#pragma once

// Name: ArkSurvivalEvolved, Version: 4.5.1


/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.EngineBaseTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineBaseTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EngineBaseTypes");
		return ptr;
	}



};

// Class Engine.EngineTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}



};

// Class Engine.ActorComponent
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData_MRJD[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                      // 0x0030(0x0058)
	TArray<struct FName>                               ComponentTags;                                             // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0098(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_56TQ : 4;                                      // 0x00A8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAutoRegister : 1;                                         // 0x00A8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTickInEditor : 1;                                         // 0x00A8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNeverNeedsRenderUpdate : 1;                               // 0x00A8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bAllowConcurrentTick : 1;                                  // 0x00A8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCreatedByConstructionScript : 1;                          // 0x00A9(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAutoActivate : 1;                                         // 0x00A9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsActive : 1;                                             // 0x00A9(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor)
	unsigned char                                      bWantsInitializeComponent : 1;                             // 0x00A9(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_JU2Y : 2;                                      // 0x00A9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAlwaysReplicatePropertyConditional : 1;                   // 0x00A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnComponentTick : 1;                                 // 0x00A9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnComponentDestroyed : 1;                            // 0x00AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOnComponentCreated : 1;                              // 0x00AA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_Y6K5[0x1];                                     // 0x00AB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       CustomTag;                                                 // 0x00AC(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CustomData;                                                // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QVN7[0x10];                                    // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_DXGK : 2;                                      // 0x00C8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReplicates : 1;                                           // 0x00C8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      bNetAddressable : 1;                                       // 0x00C8(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_BPRO[0xF];                                     // 0x00C9(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}



	void ToggleActive();
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickEnabled(bool bEnabled);
	void SetActive(bool bNewActive, bool bReset);
	void ReregisterComponent();
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsActive();
	class UWorld* GetWorld();
	class AActor* GetOwner();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void BPTickComponent(float DeltaTime);
	void BPOnComponentTick(float DeltaTime);
	void BPOnComponentDestroyed();
	void BPOnComponentCreated();
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void AddedAsPrimalItemAttachment();
	void Activate(bool bReset);
};

// Class Engine.SceneComponent
// 0x0100 (FullSize[0x01D8] - InheritedSize[0x00D8])
class USceneComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_1YLL[0x8];                                     // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct UObject_FTransform                          ComponentToWorld;                                          // 0x00E0(0x0030) (SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bRequiresCustomLocation : 1;                               // 0x0110(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAbsoluteLocation : 1;                                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAllowActorUpdateCallback : 1;                             // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAbsoluteTranslation : 1;                                  // 0x0110(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bAbsoluteRotation : 1;                                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAbsoluteScale : 1;                                        // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVisible : 1;                                              // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor)
	unsigned char                                      bHiddenInGame : 1;                                         // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAttachedSoundsForceHighPriority : 1;                      // 0x0111(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                            // 0x0111(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUpdateChildOverlaps : 1;                                  // 0x0111(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;             // 0x0111(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseAttachParentBound : 1;                                 // 0x0111(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bWorldToComponentUpdated : 1;                              // 0x0111(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bClientSyncAlwaysUpdatePhysicsCollision : 1;               // 0x0111(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIgnoreParentTransformUpdate : 1;                          // 0x0111(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_Y2JS[0x2];                                     // 0x0112(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EComponentMobility>             Mobility;                                                  // 0x0114(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RM0A[0x23];                                    // 0x0115(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USceneComponent*                             AttachParent;                                              // 0x0138(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FName                                       attachSocketName;                                          // 0x0140(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class USceneComponent*>                     AttachChildren;                                            // 0x0148(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	struct FVector                                     RelativeLocation;                                          // 0x0158(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x0164(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	struct FVector                                     RelativeTranslation;                                       // 0x0170(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x017C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_B7S0[0x3];                                     // 0x017D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                AttachmentChangedIncrementer;                              // 0x0180(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1JHA[0x14];                                    // 0x0184(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RelativeScale3D;                                           // 0x0198(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, Interp, NoDestructor)
	struct FVector                                     ComponentVelocity;                                         // 0x01A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class APhysicsVolume*                              PhysicsVolume;                                             // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FScriptMulticastDelegate                    PhysicsVolumeChangedDelegate;                              // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_UQ1H[0x10];                                    // 0x01C8(0x0010) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneComponent");
		return ptr;
	}



	void ToggleVisibility(bool bPropagateToChildren);
	void StopSound(class USoundBase* SoundToStop, float FadeOutTime);
	void SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetWorldRotation(const struct FRotator& NewRotation, bool bSweep);
	void SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep);
	void SetWorldLocation(const struct FVector& NewLocation, bool bSweep);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep);
	void SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep);
	void SetRelativeLocation(const struct FVector& NewLocation, bool bSweep);
	void SetMobility(TEnumAsByte<Engine_EComponentMobility> NewMobility);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void PhysicsVolumeChanged__DelegateSignature(class APhysicsVolume* NewVolume);
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	struct UObject_FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetWorldLocation(); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	struct FVector GetUpVector();
	struct UObject_FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<Engine_ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct UObject_FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition);
	TEnumAsByte<Engine_ECollisionEnabled> BP_GetCollisionEnabled();
	void AddWorldTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep);
	void AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep);
	void AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep);
	void AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep);
	void AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep);
	void AddLocalTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep);
	void AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep);
	void AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep);
};

// Class Engine.PrimitiveComponent
// 0x0490 (FullSize[0x0668] - InheritedSize[0x01D8])
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_K6R5[0x8];                                     // 0x01D8(0x0008) Fix Super Size
	float                                              MinDrawDistance;                                           // 0x01E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              MassiveLODSizeOnScreen;                                    // 0x01E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LDMaxDrawDistance;                                         // 0x01E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              CachedMaxDrawDistance;                                     // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       DepthPriorityGroup;                                        // 0x01F0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       ViewOwnerDepthPriorityGroup;                               // 0x01F1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GINP[0x2];                                     // 0x01F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseAbsoluteMaxDrawDisatance : 1;                          // 0x01F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIncludeBoundsRadiusInDrawDistances : 1;                   // 0x01F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bExcludeFromLevelBounds : 1;                               // 0x01F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPreventCharacterBasing : 1;                               // 0x01F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_LXYF : 1;                                      // 0x01F4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNoEncroachCheck : 1;                                      // 0x01F4(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bDisableAllRigidBody : 1;                                  // 0x01F4(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bForceDynamicPhysics : 1;                                  // 0x01F4(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventDamage : 1;                                        // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                             // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bGenerateOverlapEvents : 1;                                // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOverlapEvents : 1;                                   // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bMultiBodyOverlap : 1;                                     // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCheckAsyncSceneOnMove : 1;                                // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTraceComplexOnMove : 1;                                   // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bReturnMaterialOnMove : 1;                                 // 0x01F5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                       // 0x01F6(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowCullDistanceVolume : 1;                              // 0x01F6(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                          // 0x01F6(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRenderCustomDepth : 1;                                    // 0x01F6(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_GGRS[0x1];                                     // 0x01F7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CustomDepthStencilValue;                                   // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bRenderInMainPass : 1;                                     // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIsInForeground : 1;                                       // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      HiddenGame : 1;                                            // 0x01FC(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      DrawInGame : 1;                                            // 0x01FC(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bReceivesDecals : 1;                                       // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOwnerNoSee : 1;                                           // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOnlyOwnerSee : 1;                                         // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                        // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseAsOccluder : 1;                                        // 0x01FD(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSelectable : 1;                                           // 0x01FD(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceMipStreaming : 1;                                    // 0x01FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                             // 0x01FD(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      CastShadow : 1;                                            // 0x01FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x01FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                          // 0x01FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastDynamicShadow : 1;                                    // 0x01FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastStaticShadow : 1;                                     // 0x01FE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_70I1[0x1];                                     // 0x01FF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ObjectLayer;                                               // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                      // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastFarShadow : 1;                                        // 0x0204(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCastInsetShadow : 1;                                      // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastHiddenShadow : 1;                                     // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                 // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bLightAsIfStatic : 1;                                      // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                              // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseInternalOctree : 1;                                    // 0x0204(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseInternalOctreeOnClient : 1;                            // 0x0205(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_I699[0x2];                                     // 0x0206(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EIndirectLightingCacheQuality>  IndirectLightingCacheQuality;                              // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bHasCachedStaticLighting;                                  // 0x0209(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bStaticLightingBuildEnqueued;                              // 0x020A(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KRPL[0x1];                                     // 0x020B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                  // 0x020C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoreRadialForce : 1;                                    // 0x020C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      AlwaysLoadOnClient : 1;                                    // 0x020C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      AlwaysLoadOnServer : 1;                                    // 0x020C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseEditorCompositing : 1;                                 // 0x020C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoredByCharacterEncroachment : 1;                       // 0x020C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMovableUseDynamicDrawDistance : 1;                        // 0x020C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_9S9Z[0x3];                                     // 0x020D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TranslucencySortPriority;                                  // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                VisibilityId;                                              // 0x0214(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V8XU[0x140];                                   // 0x0218(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                InternalOctreeMask;                                        // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              LpvBiasMultiplier;                                         // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              OverrideStepHeight;                                        // 0x0360(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IA95[0x4];                                     // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               BodyInstance;                                              // 0x0368(0x0160) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCanEverAffectNavigation : 1;                              // 0x04C8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_O91L[0xB];                                     // 0x04C9(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BoundsScale;                                               // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	double                                             LastSubmitTime;                                            // 0x04D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastRenderTime;                                            // 0x04E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastRenderTimeIgnoreShadow;                                // 0x04E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECanBeCharacterBase>            CanBeCharacterBase;                                        // 0x04F0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECanBeCharacterBase>            CanCharacterStepUpOn;                                      // 0x04F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VNE8[0x26];                                    // 0x04F2(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnComponentHit;                                            // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentBeginOverlap;                                   // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentEndOverlap;                                     // 0x0538(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                         // 0x0548(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                           // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                 // 0x0568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                                // 0x0578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                         // 0x0588(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                           // 0x0598(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                         // 0x05A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                         // 0x05B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_HMKB[0x30];                                    // 0x05C8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ProxyMeshID;                                               // 0x05F8(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bIsProxyMeshParent;                                        // 0x05FC(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_63NT[0x1B];                                    // 0x05FD(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPrimitiveComponentPostPhysicsTickFunction  PostPhysicsComponentTick;                                  // 0x0618(0x0050)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}



	bool WasRecentlyVisible();
	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderCustomDepth(bool bValue);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void SetLinearDamping(float InDamping);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomDepthStencilValue(int Value);
	void SetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel, TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionResponseSet(const struct FCollisionResponseSet& Responses);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void SetCollisionObjectType(TEnumAsByte<Engine_ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<Engine_ECollisionEnabled> NewType);
	void SetCastShadow(bool NewCastShadow);
	void SetAngularDamping(float InDamping);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName);
	bool IsGravityEnabled();
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
	TArray<struct FOverlapInfo> GetOverlapInfos();
	int GetNumMaterials();
	TArray<TWeakObjectPtr<class AActor>> GetMoveIgnoreActors();
	class UMaterialInterface* GetMaterial(int ElementIndex);
	float GetMass();
	float GetLinearDamping();
	void GetCollisionResponseSet(struct FCollisionResponseSet* OutResponses);
	struct FName GetCollisionProfileName();
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	void ComponentOnReleasedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void ComponentOnInputTouchEndSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent);
	void ComponentOnInputTouchBeginSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent);
	void ComponentOnClickedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void ComponentHitSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ComponentEndTouchOverSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent);
	void ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void ComponentEndCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void ComponentBeginTouchOverSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent);
	void ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ComponentBeginCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void ClearMoveIgnoreActors();
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName);
	void AddForce(const struct FVector& Force, const struct FName& BoneName);
};

// Class Engine.LandscapeHeightfieldCollisionComponent
// 0x0160 (FullSize[0x07C8] - InheritedSize[0x0668])
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	TArray<struct FName>                               ComponentLayers;                                           // 0x0668(0x0010) (ZeroConstructor, Deprecated)
	TArray<class ULandscapeLayerInfoObject*>           ComponentLayerInfos;                                       // 0x0678(0x0010) (ZeroConstructor)
	int                                                SectionBaseX;                                              // 0x0688(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SectionBaseY;                                              // 0x068C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CollisionSizeQuads;                                        // 0x0690(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CollisionScale;                                            // 0x0694(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<unsigned char>                              CollisionQuadFlags;                                        // 0x0698(0x0010) (ZeroConstructor)
	struct FGuid                                       HeightfieldGuid;                                           // 0x06A8(0x0010) (ZeroConstructor)
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                                     // 0x06B8(0x001C) (ZeroConstructor, Deprecated)
	struct FBox                                        CachedLocalBox;                                            // 0x06D4(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TLazyObjectPtr<class ULandscapeComponent>          RenderComponent;                                           // 0x06F0(0x001C) (ExportObject, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EWS9[0xA4];                                    // 0x070C(0x00A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UPhysicalMaterial*>                   CookedPhysicalMaterials;                                   // 0x07B0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_DIV7[0x8];                                     // 0x07C0(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeHeightfieldCollisionComponent");
		return ptr;
	}



};

// Class Engine.LandscapeMeshCollisionComponent
// 0x0068 (FullSize[0x0830] - InheritedSize[0x07C8])
class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
{
public:
	struct FGuid                                       MeshGuid;                                                  // 0x07C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_KNNS[0x58];                                    // 0x07D8(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeMeshCollisionComponent");
		return ptr;
	}



};

// Class Engine.LandscapeSplinesComponent
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class ULandscapeSplinesComponent : public UPrimitiveComponent
{
public:
	TArray<class ULandscapeSplineControlPoint*>        ControlPoints;                                             // 0x0668(0x0010) (ZeroConstructor, TextExportTransient)
	TArray<class ULandscapeSplineSegment*>             Segments;                                                  // 0x0678(0x0010) (ZeroConstructor, TextExportTransient)
	unsigned char                                      UnknownData_39D4[0x8];                                     // 0x0688(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeSplinesComponent");
		return ptr;
	}



};

// Class Engine.LineBatchComponent
// 0x0038 (FullSize[0x06A0] - InheritedSize[0x0668])
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_JUB6[0x8];                                     // 0x0668(0x0008) Fix Super Size
	unsigned char                                      UnknownData_UVTS[0x30];                                    // 0x0670(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}



};

// Class Engine.MaterialBillboardComponent
// 0x0018 (FullSize[0x0680] - InheritedSize[0x0668])
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                  // 0x0668(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_RDT9[0x8];                                     // 0x0678(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialBillboardComponent");
		return ptr;
	}



	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};

// Class Engine.MeshComponent
// 0x0010 (FullSize[0x0678] - InheritedSize[0x0668])
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                 // 0x0668(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}



};

// Class Engine.SkinnedMeshComponent
// 0x0128 (FullSize[0x07A0] - InheritedSize[0x0678])
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                              // 0x0678(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LLWI[0x50];                                    // 0x0680(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                     // 0x06D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFreeSpaceBasesOnUnregister : 1;                           // 0x06D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAlwaysUpdateMeshForShadowRendering : 1;                   // 0x06D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_4DGR[0x7];                                     // 0x06D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FActiveVertexAnim>                   ActiveVertexAnims;                                         // 0x06D8(0x0010) (ZeroConstructor, Transient)
	class UPhysicsAsset*                               PhysicsAssetOverride;                                      // 0x06E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                ForcedLodModel;                                            // 0x06F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                MinLodModel;                                               // 0x06F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                PredictedLODLevel;                                         // 0x06F8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                OldPredictedLODLevel;                                      // 0x06FC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDistanceFactor;                                         // 0x0700(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowedRecentlyRenderedBoundsScaleMultiplier;             // 0x0704(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                   // 0x0708(0x0010) (ZeroConstructor, Transient)
	float                                              StreamingDistanceMultiplier;                               // 0x0718(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FColor                                      WireframeColor;                                            // 0x071C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              ForceTickPoseWithinRangeSquared;                           // 0x0720(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceTickPoseWithinRange : 1;                             // 0x0724(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceWireframe : 1;                                       // 0x0724(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisplayBones : 1;                                         // 0x0724(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHideSkin : 1;                                             // 0x0724(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bLastUpdatedBoneTransforms : 1;                            // 0x0724(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_6OSK[0x13];                                    // 0x0725(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bPerBoneMotionBlur : 1;                                    // 0x0738(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                          // 0x0738(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                           // 0x0738(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUpdateSkelWhenNotRendered : 1;                            // 0x0738(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_SYF7[0x3];                                     // 0x0739(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshComponentUpdateFlag>       MeshComponentUpdateFlag;                                   // 0x073C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_08BY[0x3];                                     // 0x073D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceMeshObjectUpdate : 1;                                // 0x0740(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bForceUpdateMesh : 1;                                      // 0x0740(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceUpdateKinematic : 1;                                 // 0x0740(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bForceTickPose : 1;                                        // 0x0740(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bChartDistanceFactor : 1;                                  // 0x0740(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCanHighlightSelectedSections : 1;                         // 0x0740(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bRecentlyRendered : 1;                                     // 0x0740(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_1Y6Y[0x3];                                     // 0x0741(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ProgressiveDrawingFraction;                                // 0x0744(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      CustomSortAlternateIndexMode;                              // 0x0748(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FQQ6[0xF];                                     // 0x0749(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBoxSphereBounds                            CachedLocalBounds;                                         // 0x0758(0x001C) (ZeroConstructor, Transient, Protected)
	bool                                               bCachedLocalBoundsUpToDate;                                // 0x0774(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bEnableUpdateRateOptimizations;                            // 0x0775(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bDisplayDebugUpdateRateOptimizations;                      // 0x0776(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_FCOG[0x1];                                     // 0x0777(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SkippedTickDeltaTime;                                      // 0x0778(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_SCZ7[0x4];                                     // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAnimUpdateRateParameters                   AnimUpdateRateParams;                                      // 0x0780(0x000C) (Transient)
	unsigned char                                      UnknownData_JV2G[0x4];                                     // 0x078C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkinnedMeshComponent*                       OverrideTickingVisiblityMesh;                              // 0x0790(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7J0V[0x8];                                     // 0x0798(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkinnedMeshComponent");
		return ptr;
	}



	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReinit);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct FName GetParentBone(const struct FName& BoneName);
	int GetNumBones();
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
};

// Class Engine.DestructibleComponent
// 0x00C0 (FullSize[0x0860] - InheritedSize[0x07A0])
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	TArray<struct FFractureEffect>                     FractureEffects;                                           // 0x07A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	bool                                               bEnableHardSleeping;                                       // 0x07B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H6NW[0x3];                                     // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LargeChunkThreshold;                                       // 0x07B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D9VO[0x10];                                    // 0x07B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnComponentFracture;                                       // 0x07C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_81Y4[0x88];                                    // 0x07D8(0x0088) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleComponent");
		return ptr;
	}



	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* GetDestructibleMesh();
	void ComponentFractureSignature__DelegateSignature(const struct FVector& HitPoint, const struct FVector& HitDirection);
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
};

// Class Engine.PoseableMeshComponent
// 0x0080 (FullSize[0x0820] - InheritedSize[0x07A0])
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData_PZ9B[0x80];                                    // 0x07A0(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PoseableMeshComponent");
		return ptr;
	}



	void SetBoneTransformByName(const struct FName& BoneName, const struct UObject_FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct UObject_FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
};

// Class Engine.StaticMeshComponent
// 0x0088 (FullSize[0x0700] - InheritedSize[0x0678])
class UStaticMeshComponent : public UMeshComponent
{
public:
	unsigned char                                      UnknownData_JENR[0x4];                                     // 0x0678(0x0004) Fix Super Size
	int                                                PreviousLODLevel;                                          // 0x067C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UStaticMesh*                                 StaticMesh;                                                // 0x0680(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	bool                                               bOverrideWireframeColor;                                   // 0x0688(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XZ53[0x3];                                     // 0x0689(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      WireframeColorOverride;                                    // 0x068C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                    // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOverrideLightMapRes : 1;                                  // 0x0690(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bRenderLandscapeInfo : 1;                                  // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseDirectionalShadowDistanceLimit : 1;                    // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bForcedAllowInstancedVertexColor : 1;                      // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_L5G1[0x3];                                     // 0x0691(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LandscapeInfoMask;                                         // 0x0694(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                OverriddenLightMapRes;                                     // 0x0698(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DirectionalShadowDistanceLimit;                            // 0x069C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StreamingDistanceMultiplier;                               // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                SubDivisionStepSize;                                       // 0x06A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseSubDivisions : 1;                                      // 0x06A8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_YXUA[0x7];                                     // 0x06A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGuid>                               IrrelevantLights;                                          // 0x06B0(0x0010) (ZeroConstructor)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                   // 0x06C0(0x0010) (ZeroConstructor, Transient)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x06D0(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_00LL[0x18];                                    // 0x06E8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}



	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
};

// Class Engine.ControlPointMeshComponent
// 0x0000 (FullSize[0x0700] - InheritedSize[0x0700])
class UControlPointMeshComponent : public UStaticMeshComponent
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ControlPointMeshComponent");
		return ptr;
	}



};

// Class Engine.GroundClutterComponent
// 0x0040 (FullSize[0x0740] - InheritedSize[0x0700])
class UGroundClutterComponent : public UStaticMeshComponent
{
public:
	TArray<struct FClutterData>                        ClutterLayers;                                             // 0x0700(0x0010) (Edit, ZeroConstructor)
	TArray<struct FClutterData>                        ActiveClutterLayers;                                       // 0x0710(0x0010) (ZeroConstructor)
	int                                                LayerID;                                                   // 0x0720(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDrawDebugInfo;                                            // 0x0724(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J9UP[0x1B];                                    // 0x0725(0x001B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GroundClutterComponent");
		return ptr;
	}



};

// Class Engine.InstancedStaticMeshComponent
// 0x0120 (FullSize[0x0820] - InheritedSize[0x0700])
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                         // 0x0700(0x0010) (Edit, ZeroConstructor, Transient, DuplicateTransient)
	int                                                InstancingRandomSeed;                                      // 0x0710(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                InstanceStartCullDistance;                                 // 0x0714(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                InstanceEndCullDistance;                                   // 0x0718(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HSPT[0x4];                                     // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        InstanceReorderTable;                                      // 0x0720(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_QQ7Q[0x10];                                    // 0x0730(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        RemovedInstances;                                          // 0x0740(0x0010) (ZeroConstructor)
	float                                              LargestSingleBounds;                                       // 0x0750(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YGIG[0x4];                                     // 0x0754(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AttachedComponentClass;                                    // 0x0758(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDestructibleMesh*                           DestroyedMesh;                                             // 0x0760(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DestroyedMeshActorClass;                                   // 0x0768(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OverrideWalkableFloorZ;                                    // 0x0770(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerOverrideWalkableFloorZ;                              // 0x0774(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bReplicateThisComponent : 1;                               // 0x0778(0x0001) BIT_FIELD (Edit, SaveGame, NoDestructor)
	unsigned char                                      bIsFallingTree : 1;                                        // 0x0778(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bIgnoreVisibilityCheck : 1;                                // 0x0778(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_HIYK[0x7];                                     // 0x0779(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundBase*                                  DestroyedSound;                                            // 0x0780(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q1FR : 3;                                      // 0x0788(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDontScaleAttachedComponent : 1;                           // 0x0788(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_FJ43[0x3];                                     // 0x0789(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScaleMaxX;                                                 // 0x078C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMinX;                                                 // 0x0790(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AttachedComponentScaleFactor;                              // 0x0794(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxScaleForAttachedComponent;                              // 0x0798(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinScaleForAttachedComponent;                              // 0x079C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeshUnscaledBounds;                                        // 0x07A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QFLC[0x4];                                     // 0x07A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DamageFXActorToSpawn;                                      // 0x07A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInterface*>                  OverrideDestructionMaterials;                              // 0x07B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_741Z[0x30];                                    // 0x07C0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UActorComponent*>                     ReferencedAttachedComponentObjects;                        // 0x07F0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	unsigned char                                      UnknownData_XXF8[0x8];                                     // 0x0800(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<uint32_t>                                   InstancesVisibility;                                       // 0x0808(0x0010) (Net, ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData_3AX3[0x8];                                     // 0x0818(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}



	bool UpdateInstanceTransform(int InstanceIndex, const struct UObject_FTransform& NewInstanceTransform, bool bWorldSpace);
	void ShowInstance(int originalIndex);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex, const struct FVector& HitDirection);
	void MulticastShowInstances(TArray<int> Indices, bool bMarkRenderStateDirty);
	void MulticastShowInstance(int originalIndex);
	void MulticastHideInstance(int originalIndex, const struct FVector& HitDirection);
	struct FVector GetPositionOfInstance(int index);
	bool GetInstanceTransform(int InstanceIndex, struct UObject_FTransform* OutInstanceTransform, bool bWorldSpace);
	int GetInstanceCount();
	void DealDirectDamage(class APlayerController* ForPC, float DamageAmount, class UClass* DamageTypeClass, int HitBodyIndex);
	void ClearInstances();
	int AddInstanceWorldSpace(const struct UObject_FTransform& WorldTransform);
	int AddInstance(const struct UObject_FTransform& InstanceTransform);
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x0080 (FullSize[0x08A0] - InheritedSize[0x0820])
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_BD19[0x18];                                    // 0x0820(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        SortedInstances;                                           // 0x0838(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_LS2R[0x10];                                    // 0x0848(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumBuiltInstances;                                         // 0x0858(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                        UnbuiltInstanceBounds;                                     // 0x085C(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                OcclusionLayerNumNodes;                                    // 0x0878(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WB90[0x24];                                    // 0x087C(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshComponent");
		return ptr;
	}



};

// Class Engine.InteractiveFoliageComponent
// 0x0010 (FullSize[0x0710] - InheritedSize[0x0700])
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_W0X8[0x10];                                    // 0x0700(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InteractiveFoliageComponent");
		return ptr;
	}



};

// Class Engine.SplineMeshComponent
// 0x0080 (FullSize[0x0780] - InheritedSize[0x0700])
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_YVCL[0x8];                                     // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSplineMeshParams                           SplineParams;                                              // 0x0708(0x0058) (Edit)
	struct FVector                                     SplineUpDir;                                               // 0x0760(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bSmoothInterpRollScale : 1;                                // 0x076C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_E4S3[0x3];                                     // 0x076D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESplineMeshAxis>                ForwardAxis;                                               // 0x0770(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PTTU[0x7];                                     // 0x0771(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  BodySetup;                                                 // 0x0778(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}



	void SetStartTangent(const struct FVector& StartTangent);
	void SetStartScale(const struct FVector2D& StartScale);
	void SetStartRoll(float StartRoll);
	void SetStartPosition(const struct FVector& StartPos);
	void SetStartOffset(const struct FVector2D& StartOffset);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent);
	void SetEndTangent(const struct FVector& EndTangent);
	void SetEndScale(const struct FVector2D& EndScale);
	void SetEndRoll(float EndRoll);
	void SetEndPosition(const struct FVector& EndPos);
	void SetEndOffset(const struct FVector2D& EndOffset);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
};

// Class Engine.ModelComponent
// 0x0048 (FullSize[0x06B0] - InheritedSize[0x0668])
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_WLFT[0x8];                                     // 0x0668(0x0008) Fix Super Size
	unsigned char                                      UnknownData_D0RQ[0x10];                                    // 0x0670(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  ModelBodySetup;                                            // 0x0680(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ELPC[0x28];                                    // 0x0688(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}



};

// Class Engine.NavLinkRenderingComponent
// 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_65U7[0x8];                                     // 0x0668(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkRenderingComponent");
		return ptr;
	}



};

// Class Engine.NavMeshRenderingComponent
// 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_CXS0[0x8];                                     // 0x0668(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavMeshRenderingComponent");
		return ptr;
	}



};

// Class Engine.NavTestRenderingComponent
// 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_JT8D[0x8];                                     // 0x0668(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavTestRenderingComponent");
		return ptr;
	}



};

// Class Engine.NiagaraComponent
// 0x0038 (FullSize[0x06A0] - InheritedSize[0x0668])
class UNiagaraComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_MZ3W[0x8];                                     // 0x0668(0x0008) Fix Super Size
	class UNiagaraScript*                              UpdateScript;                                              // 0x0670(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UNiagaraScript*                              SpawnScript;                                               // 0x0678(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ERenderModuleType>              RenderModuleType;                                          // 0x0680(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S4S8[0x7];                                     // 0x0681(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          Material;                                                  // 0x0688(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SpawnRate;                                                 // 0x0690(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M4P6[0xC];                                     // 0x0694(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NiagaraComponent");
		return ptr;
	}



};

// Class Engine.BlendableInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlendableInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendableInterface");
		return ptr;
	}



};

// Class Engine.ParticleSystem
// 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<Engine_EParticleSystemUpdateMode>      SystemUpdateMode;                                          // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_9GJH[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UpdateTime_FPS;                                            // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UpdateTime_Delta;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WarmupTime;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WarmupTickRate;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CustomTimeDilation;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UParticleEmitter*>                    Emitters;                                                  // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class UParticleSystemComponent*                    PreviewComponent;                                          // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bLit : 1;                                                  // 0x0058(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_8LYG[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0060(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                              // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowLOD : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceHighQualityEmitter : 1;                              // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForcePreventInactiveLoopReset : 1;                        // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_U7U2[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LODDistanceCheckTime;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9IO6[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      LODDistances;                                              // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bRegenerateLODDuplicate : 1;                               // 0x0088(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_TTWK[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                               // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                          // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LVP4[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBox                                        FixedRelativeBoundingBox;                                  // 0x00A4(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OverrideMaxDrawDistance;                                   // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SecondsBeforeInactive;                                     // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bShouldResetPeakCounts : 1;                                // 0x00C8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHasPhysics : 1;                                           // 0x00C8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                 // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                               // 0x00C8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsLooping : 1;                                            // 0x00C8(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor)
	unsigned char                                      bUsesGPUParticles : 1;                                     // 0x00C8(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor)
	unsigned char                                      UnknownData_DE9J[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Delay;                                                     // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	float                                              DelayLow;                                                  // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseDelayRange : 1;                                        // 0x00D4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PW8P[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     MacroUVPosition;                                           // 0x00D8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MacroUVRadius;                                             // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;                                     // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QWU6[0x3];                                     // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBox                                        CustomOcclusionBounds;                                     // 0x00EC(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                              // 0x0108(0x0010) (ZeroConstructor, Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                        // 0x0118(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}



	bool ContainsEmitterType(class UClass* TypeData);
};

// Class Engine.ShapeComponent
// 0x0020 (FullSize[0x0688] - InheritedSize[0x0668])
class UShapeComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_IG9J[0x8];                                     // 0x0668(0x0008) Fix Super Size
	class UBodySetup*                                  ShapeBodySetup;                                            // 0x0670(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          ShapeMaterial;                                             // 0x0678(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                   // 0x0680(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                             // 0x0680(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_F32F[0x7];                                     // 0x0681(0x0007) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ShapeComponent");
		return ptr;
	}



};

// Class Engine.Actor
// 0x0440 (FullSize[0x0468] - InheritedSize[0x0028])
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                          // 0x0028(0x0058)
	unsigned char                                      bHidden : 1;                                               // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor)
	unsigned char                                      bNetTemporary : 1;                                         // 0x0080(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsMapActor : 1;                                           // 0x0080(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bHasHighVolumeRPCs : 1;                                    // 0x0080(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNetStartup : 1;                                           // 0x0080(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bPreventCharacterBasing : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventCharacterBasingAllowSteppingUp : 1;                // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                  // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysRelevant : 1;                                       // 0x0081(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceHiddenReplication : 1;                               // 0x0081(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPChangedActorTeam : 1;                                // 0x0081(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_H0MC : 2;                                      // 0x0081(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIgnoredByCharacterEncroachment : 1;                       // 0x0081(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bClimbable : 1;                                            // 0x0081(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAttachmentReplicationUseNetworkParent : 1;                // 0x0081(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUnstreamComponentsUseEndOverlap : 1;                      // 0x0082(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPOverrideUILocation : 1;                              // 0x0082(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceBasedActorsOutOfFastTick : 1;                        // 0x0082(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetShowDebugAnimationComponents : 1;                 // 0x0082(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bWantsServerThrottledTick : 1;                             // 0x0082(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QYIV[0x1];                                     // 0x0083(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomTimeDilation;                                        // 0x0084(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bWantsPerformanceThrottledTick : 1;                        // 0x0088(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QRK2 : 1;                                      // 0x0088(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceInfiniteDrawDistance : 1;                            // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPCheckForErrors : 1;                                  // 0x0088(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventRegularForceNetUpdate : 1;                         // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseBPOverrideTargetingLocation : 1;                       // 0x0088(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetHUDDrawLocationOffset : 1;                        // 0x0088(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventNPCSpawnFloor : 1;                                 // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bNetCritical : 1;                                          // 0x0089(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPCustomIsRelevantForClient : 1;                       // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseStasisGrid : 1;                                        // 0x0089(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventCliffPlatforms : 1;                                // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_2AYN[0x2];                                     // 0x008A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ClientReplicationSendNowThreshold;                         // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bReplicateInstigator : 1;                                  // 0x0090(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSuppressDestroyedEvent : 1;                               // 0x0090(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseOnlyPointForLevelBounds : 1;                           // 0x0090(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateMovement : 1;                                    // 0x0090(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bTearOff : 1;                                              // 0x0090(0x0001) BIT_FIELD (Net, NoDestructor)
	unsigned char                                      bExchangedRoles : 1;                                       // 0x0090(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bStasised : 1;                                             // 0x0090(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      UnknownData_AV70 : 1;                                      // 0x0090(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPendingNetUpdate : 1;                                     // 0x0091(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNetLoadOnClient : 1;                                      // 0x0091(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                 // 0x0091(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetUseClientRelevancy : 1;                                // 0x0091(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDoNotCook : 1;                                            // 0x0091(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHibernateChange : 1;                                      // 0x0091(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bBlockInput : 1;                                           // 0x0091(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAutoStasis : 1;                                           // 0x0091(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBlueprintMultiUseEntries : 1;                             // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bEnableMultiUse : 1;                                       // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetMultiUseCenterText : 1;                           // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventSaving : 1;                                        // 0x0092(0x0001) BIT_FIELD (Edit, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	unsigned char                                      bMultiUseCenterHUD : 1;                                    // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyInitialReplication : 1;                               // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAttachmentReplication : 1;                             // 0x0092(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseNetworkSpatialization : 1;                             // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetworkSpatializationForceRelevancyCheck : 1;             // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicates : 1;                                           // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_OM6F : 4;                                      // 0x0093(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bActorEnableCollision : 1;                                 // 0x0093(0x0001) BIT_FIELD (Edit, NoDestructor)
	bool                                               bForceAllowNetMulticast;                                   // 0x0094(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	TEnumAsByte<Engine_ENetRole>                       RemoteRole;                                                // 0x0095(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LLSN[0x2];                                     // 0x0096(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AActor*                                      Owner;                                                     // 0x0098(0x0008) (Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6RXU[0x1C];                                    // 0x00A0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRepMovement                                ReplicatedMovement;                                        // 0x00BC(0x0034) (Net, Transient, RepNotify)
	struct FRepAttachment                              AttachmentReplication;                                     // 0x00F0(0x0040) (BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify)
	TEnumAsByte<Engine_ENetRole>                       Role;                                                      // 0x0130(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ENetDormancy>                   NetDormancy;                                               // 0x0131(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I8SY[0x6];                                     // 0x0132(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TWeakObjectPtr<class UActorComponent>>      ReplicatedComponents;                                      // 0x0138(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      UnknownData_QQON[0x8];                                     // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoReceiveInput;                                          // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZGFE[0x3];                                     // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DefaultStasisComponentOctreeFlags;                         // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                         StasisCheckComponent;                                      // 0x0158(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                              NetworkSpatializationChildren;                             // 0x0160(0x0010) (ZeroConstructor, Transient)
	class AActor*                                      NetworkSpatializationParent;                               // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              NetworkAndStasisRangeMultiplier;                           // 0x0178(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BKV2[0x4];                                     // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             UnstasisLastInRangeTime;                                   // 0x0180(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastPreReplicationTime;                                    // 0x0188(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastEnterStasisTime;                                       // 0x0190(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	double                                             LastExitStasisTime;                                        // 0x0198(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       CustomTag;                                                 // 0x01A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CustomData;                                                // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReplicationIntervalMultiplier;                             // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E95N[0x18];                                    // 0x01B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TWeakObjectPtr<class UActorComponent>>      StasisUnRegisteredComponents;                              // 0x01C8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class UInputComponent*                             InputComponent;                                            // 0x01D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EInputConsumeOptions>           InputConsumeOption;                                        // 0x01E0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UDIZ[0x3];                                     // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NetCullDistanceSquared;                                    // 0x01E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NetCullDistanceSquaredDormant;                             // 0x01E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int                                                NetTag;                                                    // 0x01EC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             NetUpdateTime;                                             // 0x01F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NetUpdateFrequency;                                        // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              NetPriority;                                               // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                             LastNetUpdateTime;                                         // 0x0200(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FName                                       NetDriverName;                                             // 0x0208(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                              // 0x0210(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bCanBeDamaged : 1;                                         // 0x0210(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, SaveGame, NoDestructor)
	unsigned char                                      bPendingKillPending : 1;                                   // 0x0210(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCollideWhenPlacing : 1;                                   // 0x0210(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bPreventOnDedicatedServer : 1;                             // 0x0210(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1B8Q : 3;                                      // 0x0210(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_BJXD : 2;                                      // 0x0211(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;               // 0x0211(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bLoadedFromSaveGame : 1;                                   // 0x0211(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bPreventLevelBoundsRelevant : 1;                           // 0x0211(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceReplicateDormantChildrenWithoutSpatialRelevancy : 1; // 0x0211(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                    // 0x0211(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bBPPreInitializeComponents : 1;                            // 0x0211(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPPostInitializeComponents : 1;                           // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForceNetworkSpatialization : 1;                           // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bStasisComponentRadiusForceDistanceCheck : 1;              // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInventoryItemUsed : 1;                               // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPInventoryItemDropped : 1;                            // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBPInventoryItemUsedHandlesDurability : 1;                 // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPForceAllowsInventoryUse : 1;                         // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                             // 0x0212(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateRotationHighQuality : 1;                         // 0x0213(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateVelocityHighQuality : 1;                         // 0x0213(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyReplicateOnNetForcedUpdate : 1;                       // 0x0213(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bActorInitialized : 1;                                     // 0x0213(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bActorSeamlessTraveled : 1;                                // 0x0213(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoresOriginShifting : 1;                                // 0x0213(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bReplicateHidden : 1;                                      // 0x0213(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventActorStasis : 1;                                   // 0x0213(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPGetBonesToHideOnAllocation : 1;                      // 0x0214(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_G91O[0x3];                                     // 0x0215(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TargetingTeam;                                             // 0x0218(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	float                                              OverrideStasisComponentRadius;                             // 0x021C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class APawn*                                       Instigator;                                                // 0x0220(0x0008) (BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn)
	double                                             CreationTime;                                              // 0x0228(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             OriginalCreationTime;                                      // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                              Children;                                                  // 0x0238(0x0010) (ZeroConstructor, Transient)
	uint32_t                                           AnimUpdateRateShiftTag;                                    // 0x0248(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	uint32_t                                           AnimUpdateRateFrameCount;                                  // 0x024C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class USceneComponent*                             RootComponent;                                             // 0x0250(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                  // 0x0258(0x0010) (ZeroConstructor, Transient, Protected)
	float                                              InitialLifeSpan;                                           // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TLY7[0x4];                                     // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               Layers;                                                    // 0x0270(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class AActor>                       ParentComponentActor;                                      // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             LastRenderTime;                                            // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             LastRenderTimeIgnoreShadow;                                // 0x0290(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               Tags;                                                      // 0x0298(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	uint64_t                                           HiddenEditorViews;                                         // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnTakeAnyDamage;                                           // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakePointDamage;                                         // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorBeginOverlap;                                       // 0x02D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorEndOverlap;                                         // 0x02E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                         // 0x02F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                           // 0x0300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                 // 0x0310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                                // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                         // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                           // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                         // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                         // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorHit;                                                // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTargetingTeamChanged;                                    // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     DefaultActorLocation;                                      // 0x0390(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FGuid                                       UniqueGuidId;                                              // 0x039C(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_E7HJ[0x4];                                     // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnDestroyed;                                               // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorCustomEvent;                                        // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndPlay;                                                 // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_LXK9[0x8];                                     // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnMatineeUpdated;                                          // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_E7MB[0x20];                                    // 0x03F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSemaphoreTaken;                                          // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              ForceMaximumReplicationRateUntilTime;                      // 0x0428(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VE1O[0x4];                                     // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastActorForceReplicationTime;                             // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OEX5[0x10];                                    // 0x0438(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UActorComponent*>                     SerializedComponents;                                      // 0x0448(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, TextExportTransient)
	unsigned char                                      UnknownData_K1FD[0xC];                                     // 0x0458(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bUseBPPreventAttachments;                                  // 0x0464(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bForceNonBlockingHits;                                     // 0x0465(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ELGW[0x2];                                     // 0x0466(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}



	void UserConstructionScript();
	void Unstasis();
	bool TryMultiUse(class APlayerController* ForPC, int UseIndex);
	void ThrottledTick();
	void TargetingTeamChanged__DelegateSignature();
	void TargetingTeamChanged();
	void TakePointDamageSignature__DelegateSignature(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
	void TakeAnyDamageSignature__DelegateSignature(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void StopActorSound(class USoundBase* SoundAsset, float FadeOutTime);
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickFunctionEnabled(bool bEnableTick);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetOwner(class AActor* NewOwner);
	void SetNetworkSpatializationParent(class AActor* NewParent);
	void SetLifeSpan(float InLifespan);
	bool SetActorTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
	void SetActorScale3D(const struct FVector& NewScale3D);
	bool SetActorRotation(const struct FRotator& NewRotation);
	void SetActorRelativeTransform(const struct UObject_FTransform& NewRelativeTransform, bool bSweep);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep);
	void SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep);
	bool SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void ServerSendSimpleExecCommandToEveryone(const struct FName& CommandName, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerSendExecCommandToPlayer(class APlayerController* ToPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerSendExecCommandToEveryone(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void RerunConstructionScripts();
	void ReregisterAllComponents();
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void RecieveMatineeUpdated();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveInput(const struct FString& InputName, float Value, const struct FVector& VectorValue, bool bStarted, bool bEnded);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased();
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void PropertyServerToClients(class AActor* ActorToRep, const struct FName& PropertyName, TArray<unsigned char> ReplicationData);
	void PlaySoundOnActor(class USoundCue* InSoundCue, float VolumeMultiplier, float PitchMultiplier);
	void PlaySoundAtLocation(class USoundCue* InSoundCue, const struct FVector& SoundLocation, float VolumeMultiplier, float PitchMultiplier);
	void PerformanceThrottledTick();
	void OnRep_ReplicatedMovement();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void OnInventoryItemGrind();
	void NetDetachRootComponentFromAny();
	void NetAttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation);
	void MulticastPropertyToPlayer(const struct FName& PropertyName, class APlayerController* PC);
	void MulticastProperty(const struct FName& PropertyName);
	void MulticastDrawDebugString(const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugSphere(const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugPlane(const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugLineTraceHitResult(const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool enableInShipping);
	void MulticastDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool enableInShipping);
	void MulticastDrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness, bool enableInShipping);
	void MulticastDrawDebugCapsuleWithExtents(const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent, bool enableInShipping);
	void MulticastDrawDebugCapsule(const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool enableInShipping);
	void MulticastDrawDebugBox(const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool enableInShipping);
	void MulticastDrawDebugArrow(const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
	void ModifyHudMultiUseLoc(struct FVector2D* theVec, class APlayerController* PC, int index);
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation, bool bSimpleTeleport);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep);
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class UWorld* K2_GetWorld();
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	bool IsTargetable();
	bool IsShooterCharacter();
	bool IsPrimalStructureTurret();
	bool IsPrimalStructureItemContainer();
	bool IsPrimalStructure();
	bool IsPrimalDino();
	bool IsPrimalCharacterOrStructure();
	bool IsPrimalCharacter();
	bool IsOwnedOrControlledBy(class AActor* TestOwner);
	bool IsLocallyControlledByPlayer();
	bool IsFirstPersonMeshVisible();
	bool IsDead();
	bool IsCorruptDino();
	bool HasAuthority();
	class UPrimitiveComponent* GetVisibleComponentByClass(class UClass* ComponentClass, bool bSkipHiddenComponents);
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity(bool bIsForRagdoll);
	float GetUsablePriority();
	struct UObject_FTransform GetTransform();
	struct FVector GetTargetingLocation(class AActor* Attacker);
	class AActor* GetSecondaryMountedActor();
	class APlayerController* GetOwnerController();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
	float GetLifeSpan();
	struct UObject_FTransform GetInterpolatedTransform();
	struct FRotator GetInterpolatedRotation();
	struct FVector GetInterpolatedLocation();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByCustomTag(const struct FName& TheTag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByCustomTag(const struct FName& TheTag);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	class AController* GetCharacterController();
	float GetAttachedSoundVolumeMultiplier();
	float GetAttachedSoundPitchMultiplier();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllSceneComponents(TArray<class USceneComponent*>* OutComponents);
	struct FVector GetActorViewDirection();
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	bool GetActorEnableCollision();
	class UClass* GetActorClass();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceReplicateNowWithChannel();
	void ForceReplicateNow(bool bForceCreateChannel, bool bForceCreateChannelIfRelevant);
	void ForceNetUpdate(bool bDormantDontReplicateProperties, bool bAbsoluteForceNetUpdate, bool bDontUpdateChannel);
	void ForceDestroy();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DrawInEditorViewport(class UCanvas* Canvas, int LHSX, int InOutLHSY, int RHSX, int InOutRHSY, const struct FVector& ViewLocation, const struct FRotator& ViewRotation);
	void DrawBasicFloatingHUD(class AHUD* ForHUD);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void ClientMultiUse(class APlayerController* ForPC, int UseIndex);
	struct FBox CalculateComponentsBoundingBoxInLocalSpace(bool bNonColliding);
	bool BPTryMultiUse(class APlayerController* ForPC, int UseIndex);
	bool BPServerHandleNetExecCommand(class APlayerController* FromPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	bool BPPreventAttachments(class UObject* ForItem);
	void BPPreInitializeComponents();
	void BPPostInitializeComponents();
	struct FVector BPOverrideUILocation(class APlayerController* ForPC);
	bool BPIsA(class UClass* anActorClass);
	void BPInventoryItemUsed(class UObject* InventoryItemObject);
	void BPInventoryItemDropped(class UObject* InventoryItemObject);
	void BPGetShowDebugAnimationComponents(TArray<class USkeletalMeshComponent*>* SkelMeshComponents);
	TArray<struct FMultiUseEntry> BPGetMultiUseEntries(class APlayerController* ForPC, TArray<struct FMultiUseEntry> MultiUseEntries);
	bool BPGetMultiUseCenterText(class APlayerController* ForPC, int UseIndex, struct FString* OutCenterText, struct FLinearColor* OutCenterTextColor);
	int BPGetExtraSpecialBlueprintInt(int toCheck);
	TArray<struct FName> BPGetBonesToHideOnAllocation();
	void BPGetActorEyesViewPoint(struct FVector* Location, struct FRotator* Rotation);
	bool BPForceAllowsInventoryUse(class UObject* InventoryItemObject);
	bool BPCustomIsRelevantForClient(class APlayerController* ForPC);
	bool BPConsumeUsePinCode(class AActor* FromKeypadActor, class APlayerController* ForPC, int appledPinCode, bool bIsActivating);
	bool BPConsumeSetPinCode(class APlayerController* ForPC, int appledPinCode, bool bIsSetting, int TheCustomIndex);
	bool BPClientHandleNetExecCommand(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, class APlayerController* ForPC);
	void BPClientDoMultiUse(class APlayerController* ForPC, int ClientUseIndex);
	TArray<struct FBPMapCheckEntry> BPCheckForErrors();
	void BPChangedActorTeam();
	void BPAttachedRootComponent();
	struct FVector BP_OverrideTargetingLocation(class AActor* Attacker);
	struct FVector BP_GetHUDWorldDrawLocation(const struct FName& HUDTag);
	bool AllowManualMultiUseActivation(class APlayerController* ForPC);
	bool AllowIgnoreCharacterEncroachment(class UPrimitiveComponent* HitComponent, class AActor* EncroachingCharacter);
	bool AllowGrappling();
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct UObject_FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	void AddActorWorldTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep);
	void AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep);
	void AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep);
	void AddActorLocalTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
	void AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep);
	void AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep);
	void ActorSemaphoreTaken__DelegateSignature(const struct FName& SemaphoreName);
	void ActorPlaySoundUnreliable(class USoundBase* SoundAsset, bool bAttach, const struct FName& BoneName, const struct FVector& LocOffset);
	void ActorPlaySound(class USoundBase* SoundAsset, bool bAttach, const struct FName& BoneName, const struct FVector& LocOffset);
	void ActorOnReleasedSignature__DelegateSignature();
	void ActorOnInputTouchEndSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ActorOnInputTouchBeginSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ActorOnClickedSignature__DelegateSignature();
	void ActorMatineeUpdated__DelegateSignature();
	void ActorHitSignature__DelegateSignature(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	bool ActorHasTag(const struct FName& Tag);
	void ActorEndTouchOverSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ActorEndPlaySignature__DelegateSignature(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void ActorEndOverlapSignature__DelegateSignature(class AActor* OtherActor);
	void ActorEndCursorOverSignature__DelegateSignature();
	void ActorDestroyedSignature__DelegateSignature();
	void ActorCustomEventSignature__DelegateSignature(const struct FName& EventCustomName, const struct FString& EventCustomString, class AActor* InstigatorActor);
	void ActorBeginTouchOverSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ActorBeginOverlapSignature__DelegateSignature(class AActor* OtherActor);
	void ActorBeginCursorOverSignature__DelegateSignature();
};

// Class Engine.Controller
// 0x0058 (FullSize[0x04C0] - InheritedSize[0x0468])
class AController : public AActor
{
public:
	unsigned char                                      UnknownData_0VGA[0x10];                                    // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ACharacter*                                  Character;                                                 // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerState*                                PlayerState;                                               // 0x0480(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	class APawn*                                       Pawn;                                                      // 0x0488(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected)
	struct FRotator                                    ControlRotation;                                           // 0x0490(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bAttachToPawn : 1;                                         // 0x049C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_2P7E[0xB];                                     // 0x049D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       StateName;                                                 // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                     // 0x04B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}



	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* inPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsLocalPlayerController();
	bool IsLocalController();
	void InstigatedAnyDamageSignature__DelegateSignature(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	class AActor* GetViewTarget();
	void GetPlayerViewPoint(struct FVector* Location, struct FRotator* Rotation);
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* CastToPlayerController();
};

// Class Engine.AnimationAsset
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UAnimationAsset : public UObject
{
public:
	class USkeleton*                                   Skeleton;                                                  // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_RA2N[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimationAsset");
		return ptr;
	}



};

// Class Engine.AnimInstance
// 0x0318 (FullSize[0x0340] - InheritedSize[0x0028])
class UAnimInstance : public UObject
{
public:
	float                                              DeltaTime;                                                 // 0x0028(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PZ9Y[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   CurrentSkeleton;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FAnimTickRecord>                     UngroupedActivePlayers;                                    // 0x0038(0x0010) (ZeroConstructor, Transient)
	TArray<struct FAnimGroupInstance>                  SyncGroups;                                                // 0x0048(0x0010) (ZeroConstructor, Transient)
	TArray<struct FActiveVertexAnim>                   VertexAnims;                                               // 0x0058(0x0010) (ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                      // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                            // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_RCB9[0x260];                                   // 0x0088(0x0260) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bBoneCachesInvalidated;                                    // 0x02E8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P4FC[0x57];                                    // 0x02E9(0x0057) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimInstance");
		return ptr;
	}



	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate);
	void OnMontageEndedMCDelegate__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageBlendingOutStartedMCDelegate__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);
	float Montage_Play_WithBlending(class UAnimMontage* MontageToPlay, float BlendInTime, float BlendOutTime, float InPlayRate, bool bPauseOnFinish);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, bool bPauseOnFinish);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);
	bool Montage_IsPlaying(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished);
	bool Montage_IsActive(class UAnimMontage* Montage);
	float Montage_GetPosition(class UAnimMontage* Montage);
	float Montage_GetPlayRate(class UAnimMontage* Montage);
	bool Montage_GetIsStopped(class UAnimMontage* Montage);
	bool Montage_GetCurrentTime(class UAnimMontage* Montage, float* MontageTimeRemaining, float* TotalMontageDuration);
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);
	float GetStateWeight(int MachineIndex, int StateIndex);
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	float GetCurveValue(const struct FName& CurveName);
	float GetCurrentStateElapsedTime(int MachineIndex);
	class UAnimMontage* GetCurrentActiveMontage();
	float STATIC_GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
	void ClearMorphTargets();
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintTriggerAnimationEvent(const struct FName& AnimationEventName, float* playedAnimLength);
	void BlueprintPlayAnimationEvent(class UAnimMontage* AnimationMontage, float PlayRate, float* playedAnimLength);
	void BlueprintInitializeAnimation();
	void AnimNotify_Sound(class UAnimNotify* Notify);
};

// Class Engine.AnimNotify
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UAnimNotify : public UObject
{
public:
	bool                                               bIgnoreOnDediServer;                                       // 0x0028(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6GQ5[0xF];                                     // 0x0029(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}



	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	struct FString GetNotifyName();
};

// Class Engine.AnimNotifyState
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UAnimNotifyState : public UObject
{
public:
	bool                                               bIgnoreOnDediServer;                                       // 0x0028(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ATEX[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyState");
		return ptr;
	}



	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	struct FString GetNotifyName();
};

// Class Engine.CurveBase
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData_NJGK[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ImportPath;                                                // 0x0030(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveBase");
		return ptr;
	}



	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};

// Class Engine.Scene
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UScene : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}



};

// Class Engine.CurveFloat
// 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
class UCurveFloat : public UCurveBase
{
public:
	struct FInterpCurveFloat                           FloatKeys;                                                 // 0x0040(0x0010) (ZeroConstructor, Deprecated)
	struct FRichCurve                                  FloatCurve;                                                // 0x0050(0x0068)
	bool                                               bIsEventCurve;                                             // 0x00B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2ILS[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveFloat");
		return ptr;
	}



	float GetFloatValue(float InTime);
};

// Class Engine.ForceFeedbackEffect
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                            // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                  // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_VGWO[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ForceFeedbackEffect");
		return ptr;
	}



};

// Class Engine.PlayerCameraManager
// 0x13B8 (FullSize[0x1820] - InheritedSize[0x0468])
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                   // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class USceneComponent*                             TransformComponent;                                        // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FName                                       CameraStyle;                                               // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DefaultFOV;                                                // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LockedFOV;                                                 // 0x0484(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DefaultOrthoWidth;                                         // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LockedOrthoWidth;                                          // 0x048C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsOrthographic;                                           // 0x0490(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DYVF[0x3];                                     // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultAspectRatio;                                        // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      FadeColor;                                                 // 0x0498(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeAmount;                                                // 0x049C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ColorScale;                                                // 0x04A0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DesiredColorScale;                                         // 0x04AC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     OriginalColorScale;                                        // 0x04B8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ColorScaleInterpDuration;                                  // 0x04C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ColorScaleInterpStartTime;                                 // 0x04C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3ZYC[0x4];                                     // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCameraCacheEntry                           CameraCache;                                               // 0x04D0(0x03A0)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                      // 0x0870(0x03A0)
	struct FTViewTarget                                ViewTarget;                                                // 0x0C10(0x03A8)
	struct FTViewTarget                                PendingViewTarget;                                         // 0x0FB8(0x03A8)
	float                                              BlendTimeToGo;                                             // 0x1360(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FViewTargetTransitionParams                 BlendParams;                                               // 0x1364(0x0010)
	unsigned char                                      UnknownData_R9EI[0x4];                                     // 0x1374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCameraModifier*>                     ModifierList;                                              // 0x1378(0x0010) (ZeroConstructor)
	float                                              FreeCamDistance;                                           // 0x1388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     FreeCamOffset;                                             // 0x138C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TPVCameraOffset;                                           // 0x1398(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TPVCameraCollisionHeightScaler;                            // 0x13A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   FadeAlpha;                                                 // 0x13A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeTime;                                                  // 0x13B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeTimeRemaining;                                         // 0x13B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                         // 0x13B8(0x0010) (ZeroConstructor, Transient, Protected)
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                                         // 0x13C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class UClass*                                      CameraShakeCamModClass;                                    // 0x13D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	bool                                               bAlwaysApplyModifiers;                                     // 0x13D8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_30E7[0x7];                                     // 0x13D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                         // 0x13E0(0x0040) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_CZK8[0x20];                                    // 0x1420(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                               // 0x1440(0x0010) (ZeroConstructor)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                 // 0x1450(0x0010) (ZeroConstructor, Protected)
	class ACameraActor*                                AnimCameraActor;                                           // 0x1460(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bLockedFOV : 1;                                            // 0x1468(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bLockedOrthoWidth : 1;                                     // 0x1468(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bEnableFading : 1;                                         // 0x1468(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFadeAudio : 1;                                            // 0x1468(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEnableColorScaling : 1;                                   // 0x1468(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEnableColorScaleInterp : 1;                               // 0x1468(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bClientSimulatingViewTarget : 1;                           // 0x1468(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                           // 0x1468(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bDebugClientSideCamera : 1;                                // 0x1469(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldSendClientSideCameraUpdate : 1;                     // 0x1469(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bGameCameraCutThisFrame : 1;                               // 0x1469(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bFollowHmdOrientation : 1;                                 // 0x1469(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_FC68[0x2];                                     // 0x146A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ViewPitchMin;                                              // 0x146C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewPitchMax;                                              // 0x1470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewYawMin;                                                // 0x1474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewYawMax;                                                // 0x1478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewRollMin;                                               // 0x147C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ViewRollMax;                                               // 0x1480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UQ6P[0x4];                                     // 0x1484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMinimalViewInfo                            LastPreModifierCameraCache;                                // 0x1488(0x0398) (Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerCameraManager");
		return ptr;
	}



	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraAnims(bool bImmediate);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	float GetWorldCameraShakeScale(bool bForceReturnUserSettingScale);
	class APlayerController* GetOwningPlayerController();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
};

// Class Engine.PlayerController
// 0x0398 (FullSize[0x0858] - InheritedSize[0x04C0])
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                    // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7QYQ : 1;                                      // 0x04C8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShowExtendedInfoKey : 1;                                  // 0x04C8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      UnknownData_U6D0[0x7];                                     // 0x04C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       AcknowledgedPawn;                                          // 0x04D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                   // 0x04D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_65W2[0x8];                                     // 0x04E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AHUD*                                        MyHUD;                                                     // 0x04E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerCameraManager*                        PlayerCameraManager;                                       // 0x04F0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerCameraManagerClass;                                  // 0x04F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAutoManageActiveCameraTarget;                             // 0x0500(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KNSF[0x3];                                     // 0x0501(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    TargetViewRotation;                                        // 0x0504(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S7Q0[0x10];                                    // 0x0510(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              HiddenActors;                                              // 0x0520(0x0010) (ZeroConstructor)
	float                                              LastSpectatorStateSynchTime;                               // 0x0530(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ClientCap;                                                 // 0x0534(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J84N[0x8];                                     // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCheatManager*                               CheatManager;                                              // 0x0540(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UClass*                                      CheatClass;                                                // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPlayerInput*                                PlayerInput;                                               // 0x0550(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                                // 0x0558(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_8DFF[0x60];                                    // 0x0568(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_B5T1 : 3;                                      // 0x05C8(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCheatPlayer : 1;                                          // 0x05C8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bIsAdmin : 1;                                              // 0x05C8(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_VC6Z[0x3];                                     // 0x05C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      NetPlayerIndex;                                            // 0x05CC(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9GOL[0x8B];                                    // 0x05CD(0x008B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              PendingSwapConnection;                                     // 0x0658(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor)
	class UNetConnection*                              NetConnection;                                             // 0x0660(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor)
	struct FRotator                                    RotationInput;                                             // 0x0668(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FRotator                                    PreviousRotationInput;                                     // 0x0674(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              InputYawScale;                                             // 0x0680(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              InputPitchScale;                                           // 0x0684(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              InputRollScale;                                            // 0x0688(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bShowMouseCursor : 1;                                      // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceShowMouseCursor : 1;                                 // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableClickEvents : 1;                                    // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableTouchEvents : 1;                                    // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableMouseOverEvents : 1;                                // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableTouchOverEvents : 1;                                // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceFeedbackEnabled : 1;                                 // 0x068C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_RTDF[0x3];                                     // 0x068D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EMouseCursor>              DefaultMouseCursor;                                        // 0x0690(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<CoreUObject_EMouseCursor>              CurrentMouseCursor;                                        // 0x0691(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECollisionChannel>              DefaultClickTraceChannel;                                  // 0x0692(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECollisionChannel>              CurrentClickTraceChannel;                                  // 0x0693(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HVQE[0x10];                                    // 0x0694(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bLockedInputUI;                                            // 0x06A4(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5E4Q[0x3];                                     // 0x06A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USceneComponent*                             TransformComponent;                                        // 0x06A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_TAM0[0x70];                                    // 0x06B0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInputComponent*                             InactiveStateInputComponent;                               // 0x0720(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_GJOJ[0x18];                                    // 0x0728(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTouchInterface*                             CurrentTouchInterface;                                     // 0x0740(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_63EZ[0x28];                                    // 0x0748(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ASpectatorPawn*                              SpectatorPawn;                                             // 0x0770(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     SpawnLocation;                                             // 0x0778(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_XYVD[0x4];                                     // 0x0784(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint16_t                                           SeamlessTravelCount;                                       // 0x0788(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor)
	uint16_t                                           LastCompletedSeamlessTravelCount;                          // 0x078A(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I755[0xCC];                                    // 0x078C(0x00CC) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}



	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bSpeaking, bool UseSuperRange);
	void SwitchLevel(const struct FString& URL);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetAudioListenerOverride(class USceneComponent* attachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorLocation(const struct FVector& NewLoc);
	void ServerRestartPlayer();
	void ServerReceivedPlayerControllerAck();
	void ServerProcessNetExecCommandUnreliable(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerProcessNetExecCommand(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	void ResetIgnoreInputFlags();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<Engine_EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void NetSpawnActorAtLocation(class UClass* anActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, class USceneComponent* attachToComponent, int dataIndex, const struct FName& attachSocketName);
	bool NetConnectionHasActiveActor(class AActor* anActor);
	void LocalTravel(const struct FString& URL);
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsInputKeyDown(const struct FKey& Key);
	void HandleRespawned(class APawn* NewPawn, bool IsFirstSpawn);
	void GetViewportSize(int* SizeX, int* SizeY);
	bool GetMousePosition(float* LocationX, float* LocationY, bool bEvenWhenMouseNotAttached);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	void FOV(float NewFOV);
	void EnableCheats(const struct FString& pass);
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void CopyStringToClipboard(const struct FString& S);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeleportSucceeded(const struct FVector& TeleportLoc, const struct FRotator& TeleportRot, bool bSimpleTeleport);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShake(class UClass* Shake);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientSendNetExecCommandToServer(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable);
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientProcessSimpleNetExecCommandUnreliableBP(class AActor* forActor, const struct FName& CommandName);
	void ClientProcessSimpleNetExecCommandBP(class AActor* forActor, const struct FName& CommandName);
	void ClientProcessNetExecCommandUnreliableBP(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientProcessNetExecCommandUnreliable(class AActor* forActor, const struct FName& CommandName, const struct FNetExecParams& ExecParams);
	void ClientProcessNetExecCommandBP(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientProcessNetExecCommand(class AActor* forActor, const struct FName& CommandName, const struct FNetExecParams& ExecParams);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot, float Speed, bool bForceUseWorldCameraShakeScale);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<Engine_ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientNotifyRespawned(class APawn* NewPawn, bool IsFirstSpawn);
	void ClientNotifyReconnected(class APawn* NewPawn);
	void ClientNetGUIDActorDeletion(const struct FNetworkGUID& TheNetGUID);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(const struct FName& NewMode);
	class AActor* BPGetAimedUseActor();
	void AddYawInput(float val);
	void AddRollInput(float val);
	void AddPitchInput(float val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};

// Class Engine.HUD
// 0x00E8 (FullSize[0x0550] - InheritedSize[0x0468])
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                                // 0x0468(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      GreenColor;                                                // 0x046C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      RedColor;                                                  // 0x0470(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_URWS[0x4];                                     // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           PlayerOwner;                                               // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLostFocusPaused : 1;                                      // 0x0480(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bShowHUD : 1;                                              // 0x0480(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bShowDebugInfo : 1;                                        // 0x0480(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                  // 0x0480(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowOverlays : 1;                                         // 0x0480(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEnableDebugTextShadow : 1;                                // 0x0480(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_32RW[0x7];                                     // 0x0481(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              PostRenderedActors;                                        // 0x0488(0x0010) (ZeroConstructor)
	float                                              LastHUDRenderTime;                                         // 0x0498(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RenderDelta;                                               // 0x049C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               DebugDisplay;                                              // 0x04A0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                    // 0x04B0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UCanvas*                                     Canvas;                                                    // 0x04C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UCanvas*                                     DebugCanvas;                                               // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                             // 0x04D0(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_TMGB[0x70];                                    // 0x04E0(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}



	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& Category);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector Project(const struct FVector& Location);
	void GetTextSize(const struct FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& Name, bool bConsumesInput, int Priority);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale);
};

// Class Engine.Info
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class AInfo : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}



};

// Class Engine.PlayerState
// 0x0088 (FullSize[0x04F0] - InheritedSize[0x0468])
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                     // 0x0468(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      Ping;                                                      // 0x046C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RORZ[0x3];                                     // 0x046D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerName;                                                // 0x0470(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify)
	unsigned char                                      UnknownData_RYSG[0x10];                                    // 0x0480(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PlayerId;                                                  // 0x0490(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsSpectator : 1;                                          // 0x0494(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor)
	unsigned char                                      bOnlySpectator : 1;                                        // 0x0494(0x0001) BIT_FIELD (Net, NoDestructor)
	unsigned char                                      bIsABot : 1;                                               // 0x0494(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor)
	unsigned char                                      UnknownData_F7SY : 1;                                      // 0x0494(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsInactive : 1;                                           // 0x0494(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      bFromPreviousLevel : 1;                                    // 0x0494(0x0001) BIT_FIELD (Net, NoDestructor)
	unsigned char                                      UnknownData_3YCB[0x3];                                     // 0x0495(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                StartTime;                                                 // 0x0498(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HGEB[0x4];                                     // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EngineMessageClass;                                        // 0x04A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GEJQ[0x18];                                    // 0x04A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FUniqueNetIdRepl                            UniqueID;                                                  // 0x04C0(0x0010) (Net, RepNotify)
	unsigned char                                      UnknownData_78CZ[0x20];                                    // 0x04D0(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerState");
		return ptr;
	}



	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_bIsInactive();
	float GetExactPing();
};

// Class Engine.Brush
// 0x0038 (FullSize[0x04A0] - InheritedSize[0x0468])
class ABrush : public AActor
{
public:
	TEnumAsByte<Engine_ECsgOper>                       CsgOper;                                                   // 0x0468(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EBrushType>                     BrushType;                                                 // 0x0469(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DI5U[0x2];                                     // 0x046A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      BrushColor;                                                // 0x046C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                PolyFlags;                                                 // 0x0470(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bColored : 1;                                              // 0x0474(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSolidWhenSelected : 1;                                    // 0x0474(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                            // 0x0474(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNotForClientOrServer : 1;                                 // 0x0474(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_74T8[0x3];                                     // 0x0475(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UModel*                                      Brush;                                                     // 0x0478(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBrushComponent*                             BrushComponent;                                            // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bInManipulation : 1;                                       // 0x0488(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_S0IV[0x7];                                     // 0x0489(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGeomSelection>                      SavedSelections;                                           // 0x0490(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}



};

// Class Engine.Volume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class AVolume : public ABrush
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}



	bool BPEncompassesPoint(const struct FVector& Point, float* OutDistanceToPoint, float SphereRadius);
};

// Class Engine.CameraModifier
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDisabled : 1;                                             // 0x0028(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bPendingDisable : 1;                                       // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_7J95[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerCameraManager*                        CameraOwner;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      Priority;                                                  // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_31GC[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bExclusive : 1;                                            // 0x003C(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_599I[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlphaInTime;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              AlphaOutTime;                                              // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              Alpha;                                                     // 0x0048(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	float                                              TargetAlpha;                                               // 0x004C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bDebug : 1;                                                // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1TS4[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}



};

// Class Engine.DestructibleActor
// 0x0020 (FullSize[0x0488] - InheritedSize[0x0468])
class ADestructibleActor : public AActor
{
public:
	class UDestructibleComponent*                      DestructibleComponent;                                     // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bAffectNavigation : 1;                                     // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, Config, NoDestructor)
	unsigned char                                      UnknownData_SVNX[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnActorFracture;                                           // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleActor");
		return ptr;
	}



	void SetFadingStaticMesh(class UStaticMesh* TheMesh);
	void SetFadingSkeletalMesh(class USkeletalMesh* TheMesh);
	class UMeshComponent* GetFadingMeshComponent();
	void ActorFractureSignature__DelegateSignature(const struct FVector& HitPoint, const struct FVector& HitDirection);
};

// Class Engine.DataAsset
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataAsset : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DataAsset");
		return ptr;
	}



};

// Class Engine.Light
// 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                            // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0470(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_6ZOW[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}



	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};

// Class Engine.DamageType
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UDamageType : public UObject
{
public:
	unsigned char                                      bIsPhysicalDamage : 1;                                     // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowPerBoneDamageAdjustment : 1;                         // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCausedByWorld : 1;                                        // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bScaleMomentumByMass : 1;                                  // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsPassiveDamage : 1;                                      // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bRadialDamageVelChange : 1;                                // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpulseAffectsLivePawns : 1;                              // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_6POR[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ImpulseMinimumZPercent;                                    // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DestructibleImpulseScale;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ImpulseRagdollScale;                                       // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DefaultImpulse;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PointDamageArmorEffectiveness;                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GeneralDamageArmorEffectiveness;                           // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ArmorDurabilityDegradationMultiplier;                      // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RadialPartiallyObstructedDamagePercent;                    // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D2D5[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}



	float HandleDamage(class AActor* Victim, float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
};

// Class Engine.BlueprintFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintFunctionLibrary : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintFunctionLibrary");
		return ptr;
	}



};

// Class Engine.Note
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class ANote : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}



};

// Class Engine.SplineActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ASplineActor : public AActor
{
public:
	class USplineComponent*                            SplineComponent;                                           // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SplineActor");
		return ptr;
	}



};

// Class Engine.Emitter
// 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                   // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsHighQualityEmitter : 1;                                 // 0x0470(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDestroyOnSystemFinish : 1;                                // 0x0470(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPostUpdateTickGroup : 1;                                  // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceOnDediServer : 1;                                    // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCurrentlyActive : 1;                                      // 0x0470(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_FC2S[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}



	void ToggleActive();
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void ParticleSpawnSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void ParticleDeathSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction);
	void ParticleCollisionSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName);
	void ParticleBurstSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, int ParticleCount);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	void Deactivate();
	void Activate();
};

// Class Engine.Pawn
// 0x0090 (FullSize[0x04F8] - InheritedSize[0x0468])
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData_QSMM[0x8];                                     // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseControllerRotationPitch : 1;                           // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseControllerRotationYaw : 1;                             // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseControllerRotationRoll : 1;                            // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                        // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bPreventMovementStoppingOnPossess : 1;                     // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_EQWK[0x3];                                     // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseEyeHeight;                                             // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoPossess;                                               // 0x0478(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8UCY[0x7];                                     // 0x0479(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AIControllerClass;                                         // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerState*                                PlayerState;                                               // 0x0488(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      RemoteViewPitch;                                           // 0x0490(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YZPU[0x7];                                     // 0x0491(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 LastHitBy;                                                 // 0x0498(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class AController*                                 Controller;                                                // 0x04A0(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_NUTS[0x8];                                     // 0x04A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bClearOnConsume;                                           // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ARNO[0x3];                                     // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class AActor>                       TetherActor;                                               // 0x04B4(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TetherRadius;                                              // 0x04BC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TetherHeight;                                              // 0x04C0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PYP3[0x4];                                     // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnMovementTetherSet;                                       // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     ControlInputVector;                                        // 0x04D8(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LastControlInputVector;                                    // 0x04E4(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	TWeakObjectPtr<class AController>                  SpawnedForController;                                      // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}



	void SpawnDefaultController();
	void SetMovementTether(class AActor* InTetherActor, float Radius, float Height);
	void SetCanAffectNavigationGeneration(bool bNewValue);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void MovementTetherEvent__DelegateSignature(class APawn* Pawn, class AActor* TetherObject);
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsWithinTether();
	bool IsWalking();
	bool IsTargetWithinTether(const struct FVector& Destination, float AdditionalRadius);
	bool IsMovementTethered();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsFalling();
	bool IsCrouched();
	bool IsControlled();
	void InterceptInputEvent(const struct FString& InputName);
	class AActor* GetTetherObject();
	struct FVector GetTetheredVelocity(const struct FVector& RequestedVelocity, float DeltaSeconds);
	struct FVector GetTetheredDestination(const struct FVector& Destination, float AdditionalRadius);
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void ClearMovementTether();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float val);
	void AddControllerRollInput(float val);
	void AddControllerPitchInput(float val);
};

// Class Engine.Character
// 0x01C8 (FullSize[0x06C0] - InheritedSize[0x04F8])
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                      // 0x04F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UCharacterMovementComponent*                 CharacterMovement;                                         // 0x0500(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0508(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FBasedMovementInfo                          BasedMovement;                                             // 0x0510(0x0030) (ContainsInstancedReference, Protected)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                   // 0x0540(0x0030) (Net, RepNotify, ContainsInstancedReference, Protected)
	struct FVector                                     BaseTranslationOffset;                                     // 0x0570(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      ReplicatedMovementMode;                                    // 0x057C(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_9XQ9[0x7];                                     // 0x057D(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrouchedEyeHeight;                                         // 0x0584(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProneEyeHeight;                                            // 0x0588(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsCrouched : 1;                                           // 0x058C(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      bIsProne : 1;                                              // 0x058C(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, SaveGame, RepNotify, NoDestructor)
	unsigned char                                      bCanEverProne : 1;                                         // 0x058C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanEverCrouch : 1;                                        // 0x058C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bReplicateDesiredRotation : 1;                             // 0x058C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseBPOverrideCharacterSound : 1;                          // 0x058C(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPOverrideCharacterParticle : 1;                       // 0x058C(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPressedJump : 1;                                          // 0x058C(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bClientUpdating : 1;                                       // 0x058D(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bIsPlayingTurningAnim : 1;                                 // 0x058D(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bClientWasFalling : 1;                                     // 0x058D(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bClientResimulateRootMotion : 1;                           // 0x058D(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bSimGravityDisabled : 1;                                   // 0x058D(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsBigPusher : 1;                                          // 0x058D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCanBePushed : 1;                                          // 0x058D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanPushOthers : 1;                                        // 0x058D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_E1Z6 : 1;                                      // 0x058E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bOverrideWalkingVelocity : 1;                              // 0x058E(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bOverrideSwimmingVelocity : 1;                             // 0x058E(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bOverrideSwimmingAcceleration : 1;                         // 0x058E(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bOverrideNewFallVelocity : 1;                              // 0x058E(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bOverrideFlyingVelocity : 1;                               // 0x058E(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bPreventWaterHopCorrectionVelChange : 1;                   // 0x058E(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUsesRootMotion : 1;                                       // 0x058E(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBasedUsesFastPathSMCTick : 1;                             // 0x058F(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bBasedUsesFastPathMoveTick : 1;                            // 0x058F(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bForceUnfreezeIkNextFrame : 1;                             // 0x058F(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bForceReplicationWithoutController : 1;                    // 0x058F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUse_ModifySavedMoveAcceleration_PreRep : 1;               // 0x058F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUse_ModifySavedMoveAcceleration_PostRep : 1;              // 0x058F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	float                                              HarvestingDestructionMeshRangeMultipler;                   // 0x0590(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A5F2[0x4];                                     // 0x0594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USoundBase*>                          CharacterOverrideSoundFrom;                                // 0x0598(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundBase*>                          CharacterOverrideSoundTo;                                  // 0x05A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystem*>                     CharacterOverrideParticleFrom;                             // 0x05B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystem*>                     CharacterOverrideParticleTo;                               // 0x05C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bInBaseReplication;                                        // 0x05D8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DDWX[0x3];                                     // 0x05D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              JumpKeyHoldTime;                                           // 0x05DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor)
	float                                              JumpMaxHoldTime;                                           // 0x05E0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator_NetQuantizeSmartPitch              LastMovementDesiredRotation;                               // 0x05E4(0x000C) (Net)
	unsigned char                                      UnknownData_7HT2[0x10];                                    // 0x05F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                                // 0x0600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                    // 0x0610(0x0040) (Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                        // 0x0650(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference)
	struct FRepRootMotionMontage                       RepRootMotion;                                             // 0x0660(0x0040) (Net, RepNotify, ContainsInstancedReference)
	float                                              ExtraMaxAccelerationModifier;                              // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ExtraFrictionModifier;                                     // 0x06A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E8GZ[0x8];                                     // 0x06A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             ForceUnfreezeSkeletalDynamicsUntilTime;                    // 0x06B0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KGCC[0x8];                                     // 0x06B8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Character");
		return ptr;
	}



	void UnProne(bool bClientSimulation);
	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	bool ShouldForceDedicatedMovementTickEveryFrame();
	bool ReplicateMovementToSimulatedClients();
	void Prone(bool bClientSimulation);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float BlendInTime, float BlendOutTime);
	float OverrideTerminalVelocity();
	void OnWalkingOffLedge();
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_IsProne();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void NetTeleportSucceeded(const struct FVector& ToLoc, const struct FRotator& ToRot);
	void MovementModeChangedSignature__DelegateSignature(class ACharacter* Character, TEnumAsByte<Engine_EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode);
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsRagdolled();
	bool IsPlayingRootMotion();
	bool IsJumpProvidingForce();
	struct FRotator GetLastMovementDesiredRotation();
	class UAnimMontage* GetCurrentMontage();
	void Crouch(bool bClientSimulation);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void CharacterMovementUpdatedSignature__DelegateSignature(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	bool CanJumpInternal();
	bool CanJump();
	class USoundBase* BPOverrideCharacterSound(class USoundBase* SoundIn);
	class UParticleSystem* BPOverrideCharacterParticle(class UParticleSystem* ParticleIn);
	struct FRotator BPModifyRootMotionDeltaRotation(const struct FRotator& Delta);
	bool BPAcknowledgeServerCorrection(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	bool BP_PreventMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
};

// Class Engine.ReverbVolume
// 0x0050 (FullSize[0x04F0] - InheritedSize[0x04A0])
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                                  // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x04A4(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      UnknownData_5R2D[0x3];                                     // 0x04A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             Settings;                                                  // 0x04A8(0x0018) (Edit, BlueprintVisible)
	struct FInteriorSettings                           AmbientZoneSettings;                                       // 0x04C0(0x0024) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_SAHC[0x4];                                     // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AReverbVolume*                               NextLowerPriorityVolume;                                   // 0x04E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReverbVolume");
		return ptr;
	}



};

// Class Engine.WorldSettings
// 0x0850 (FullSize[0x0CB8] - InheritedSize[0x0468])
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData_LR9Q[0x8];                                     // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GroundColorMultiplier;                                     // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SkyColorMultiplier;                                        // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     AtmosphericFogMultiplier;                                  // 0x0478(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TrueSkyIntensityMultiplier;                                // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxGroundClutterLayers;                                    // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SM4DirectionalLightMultiplier;                             // 0x048C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SM4SKyLightMultiplier;                                     // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SM5DirectionalLightMultiplier;                             // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SM5SKyLightMultiplier;                                     // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoTrueSkySM5DirectionalLightMultiplier;                    // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoTrueSkySM5SKyLightMultiplier;                            // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConsoleSM5DirectionalLightMultiplier;                      // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConsoleSM5SKyLightMultiplier;                              // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IBLFadeDistanceMultiplier;                                 // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TexturePoolSizeOverride;                                   // 0x04B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ConsoleOnlyTexturePoolSizeOverride;                        // 0x04B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalViewDistanceMultiplier;                              // 0x04B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalProxyDistanceMultiplier;                             // 0x04BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bWorldUseStasis;                                           // 0x04C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SRYQ[0x7];                                     // 0x04C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ASkyLight*                                   SkyLightReference;                                         // 0x04C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class ADirectionalLight*                           DirectionalLightReference;                                 // 0x04D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              GlobalIBLCaptureBrightness;                                // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalBakeAndStreamIBLMultiplier;                          // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TrueSkyColorMultiplier;                                    // 0x04E0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SkyIBLIntensityMultiplier;                                 // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              KillZIntervalMin;                                          // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              KillZIntervalMax;                                          // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableDFAO;                                              // 0x04F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bForceAtmosphericFogWithTrueSky;                           // 0x04F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8CYO[0x2];                                     // 0x04FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DistanceFieldShadowRaytraceDistanceOverride;               // 0x04FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bInteriorLightingKeepDistanceFieldsOnLowEnd;               // 0x0500(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TA32[0x7];                                     // 0x0501(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleSystemComponent*>            PooledParticles;                                           // 0x0508(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	unsigned char                                      UnknownData_ZLVS[0x4A8];                                   // 0x0518(0x04A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                              // 0x09C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableNavigationSystem : 1;                               // 0x09C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableWorldComposition : 1;                               // 0x09C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                            // 0x09C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bWorldGravitySet : 1;                                      // 0x09C0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCheckedForCachesLights : 1;                               // 0x09C0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUse3DWorldCompStreaming : 1;                              // 0x09C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSetIBLDFAOToMatch : 1;                                    // 0x09C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRunMeshOptimizer : 1;                                     // 0x09C1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceLoadAllLevelsOnDediServer : 1;                       // 0x09C1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_30TB[0x6];                                     // 0x09C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               LevelsToAbsolutelyNotLoadOnDediServer;                     // 0x09C8(0x0010) (Edit, ZeroConstructor)
	class ADynamicCaptureManager*                      MasterSkyLightOverride;                                    // 0x09D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bBakeOutAllProceduralAssetsToActors : 1;                   // 0x09E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnableInteriorLightingMode : 1;                           // 0x09E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bEnableShadowCache : 1;                                    // 0x09E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bEnableGlobalDistanceField : 1;                            // 0x09E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bGlobalGravitySet : 1;                                     // 0x09E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_YJ3C[0x3];                                     // 0x09E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultAmbientShadowNear;                                  // 0x09E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DefaultAmbientShadowFar;                                   // 0x09E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YSK9[0x4];                                     // 0x09EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Title;                                                     // 0x09F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              KillZ;                                                     // 0x0A00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5R04[0x4];                                     // 0x0A04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      KillZDamageType;                                           // 0x0A08(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              WorldGravityZ;                                             // 0x0A10(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              GlobalGravityZ;                                            // 0x0A14(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0A18(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	class UClass*                                      DefaultGameMode;                                           // 0x0A20(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FGameModePrefix>                     DefaultMapPrefixes;                                        // 0x0A28(0x0010) (ZeroConstructor, Config)
	class UClass*                                      GameNetworkManagerClass;                                   // 0x0A38(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                PackedLightAndShadowMapTextureSize;                        // 0x0A40(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bMinimizeBSPSections : 1;                                  // 0x0A44(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_8ZF2[0x3];                                     // 0x0A45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     DefaultColorScale;                                         // 0x0A48(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                  // 0x0A54(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalDistanceFieldViewDistance;                           // 0x0A58(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPrecomputeVisibility : 1;                                 // 0x0A5C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                      // 0x0A5C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_ED3U[0x3];                                     // 0x0A5D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VisibilityCellSize;                                        // 0x0A60(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_EVisibilityAggressiveness>      VisibilityAggressiveness;                                  // 0x0A64(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_6QMW[0x3];                                     // 0x0A65(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                           // 0x0A68(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_LHRT[0x3];                                     // 0x0A69(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                         // 0x0A6C(0x0044) (Edit)
	TEnumAsByte<Engine_ELightingBuildQuality>          LevelLightingQuality;                                      // 0x0AB0(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RV7Z[0x7];                                     // 0x0AB1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             DefaultReverbSettings;                                     // 0x0AB8(0x0018) (Edit, Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                                // 0x0AD0(0x0024) (Edit, Config)
	unsigned char                                      UnknownData_XWGB[0x4];                                     // 0x0AF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundMix*                                   DefaultBaseSoundMix;                                       // 0x0AF8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDisableSpatialReplication;                                // 0x0B00(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UMEW[0x3];                                     // 0x0B01(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SM4ExposureOffset;                                         // 0x0B04(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M7ZH[0x8];                                     // 0x0B08(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             DefaultWaterReverbSettings;                                // 0x0B10(0x0018) (Edit, BlueprintVisible)
	struct FInteriorSettings                           DefaultWaterAmbientZoneSettings;                           // 0x0B28(0x0024) (Edit, BlueprintVisible)
	struct FProxyMeshSettings                          ProxySettings;                                             // 0x0B4C(0x000C) (Edit)
	unsigned char                                      UnknownData_KY1S[0x50];                                    // 0x0B58(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WorldToMeters;                                             // 0x0BA8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QQF0[0x4];                                     // 0x0BAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                           // 0x0BB0(0x0010) (ZeroConstructor, Deprecated)
	float                                              TimeDilation;                                              // 0x0BC0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MatineeTimeDilation;                                       // 0x0BC4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerState*                                Pauser;                                                    // 0x0BC8(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bHighPriorityLoading : 1;                                  // 0x0BD0(0x0001) BIT_FIELD (Net, NoDestructor)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                             // 0x0BD0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_UJ8N[0x3];                                     // 0x0BD1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DistanceFieldRuntimeQualityMultiplier;                     // 0x0BD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               AlwaysVisibleLevelNames;                                   // 0x0BD8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LevelsToForceInvisibleWhenExcluded;                        // 0x0BE8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                MinInstancesForConsoleFoliageAutoReduction;                // 0x0BF8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConsoleFoliageAutoReductionPercent;                        // 0x0BFC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1PFR[0x58];                                    // 0x0C00(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0C58(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_629T[0x50];                                    // 0x0C68(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WorldSettings");
		return ptr;
	}



	void PooledParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
};

// Class Engine.MovementComponent
// 0x0040 (FullSize[0x0118] - InheritedSize[0x00D8])
class UMovementComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         UpdatedComponent;                                          // 0x00D8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZODA[0x4];                                     // 0x00E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     Velocity;                                                  // 0x00E4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PlaneConstraintNormal;                                     // 0x00F0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     PlaneConstraintOrigin;                                     // 0x00FC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bConstrainToPlane : 1;                                     // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                   // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                 // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                           // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                         // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bDedicatedForceTickingEveryFrame : 1;                      // 0x0108(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_SOHG[0xF];                                     // 0x0109(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MovementComponent");
		return ptr;
	}



	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	bool ShouldForceDedicatedTickEveryFrame();
	void SetUpdatedComponent(class UPrimitiveComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
};

// Class Engine.NavigationTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavigationTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationTypes");
		return ptr;
	}



};

// Class Engine.NavMovementComponent
// 0x0018 (FullSize[0x0130] - InheritedSize[0x0118])
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                             // 0x0118(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                    // 0x0128(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      UnknownData_0942[0x3];                                     // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMovementProperties                         MovementState;                                             // 0x012C(0x0004)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavMovementComponent");
		return ptr;
	}



	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
};

// Class Engine.PawnMovementComponent
// 0x0010 (FullSize[0x0140] - InheritedSize[0x0130])
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                 // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_OUR5[0x8];                                     // 0x0138(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PawnMovementComponent");
		return ptr;
	}



	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
};

// Class Engine.CharacterMovementComponent
// 0x03F0 (FullSize[0x0530] - InheritedSize[0x0140])
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData_9WN7[0x8];                                     // 0x0140(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ACharacter*                                  CharacterOwner;                                            // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_8W6I : 2;                                      // 0x0150(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventExitingWaterForceExtraOverlap : 1;                 // 0x0150(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_4ELB[0x3];                                     // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxStepHeight;                                             // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              JumpZVelocity;                                             // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              JumpOffJumpZFactor;                                        // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bSlipOffLedges;                                            // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RVDP[0x3];                                     // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LedgeSlipCapsuleRadiusMultiplier;                          // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LedgeSlipPushVelocity;                                     // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LedgeSlipVelocityBuildUpMultiplier;                        // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WalkableFloorAngle;                                        // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WalkableFloorZ;                                            // 0x0174(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VPMO[0x8];                                     // 0x0178(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMovementMode>                  MovementMode;                                              // 0x0180(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      CustomMovementMode;                                        // 0x0181(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9ELS[0x3E];                                    // 0x0182(0x003E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GravityScale;                                              // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GroundFriction;                                            // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxWalkSpeed;                                              // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxWalkSpeedCrouched;                                      // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxWalkSpeedProne;                                         // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxCustomMovementSpeed;                                    // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxSwimSpeed;                                              // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxFlySpeed;                                               // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LandedPreventRequestedMoveInterval;                        // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LandedPreventRequestedMoveMinVelocityMagnitude;            // 0x01E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinimumImpulseToApply;                                     // 0x01E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L8CE[0xC];                                     // 0x01EC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxAcceleration;                                           // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxImpulseVelocityMagnitude;                               // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxImpulseVelocityZ;                                       // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BrakingDecelerationWalking;                                // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BrakingDecelerationFalling;                                // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BrakingDecelerationSwimming;                               // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BrakingDecelerationFlying;                                 // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AirControl;                                                // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AirControlBoostMultiplier;                                 // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AirControlBoostVelocityThreshold;                          // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingLateralFriction;                                    // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CrouchedHalfHeight;                                        // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProneHalfHeight;                                           // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Buoyancy;                                                  // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PerchRadiusThreshold;                                      // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              PerchAdditionalHeight;                                     // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                                    RotationRate;                                              // 0x0238(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseControllerDesiredRotation : 1;                         // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bRequireAccelerationForUseControllerDesiredRotation : 1;   // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceDontAllowDesiredRotationWhenFalling : 1;             // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseCharacterInterpolationAndStops : 1;                    // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyForwardsInputAcceleration : 1;                        // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOnlyForwardsInputAccelerationWalking : 1;                 // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReduceBackwardsMovement : 1;                              // 0x0244(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseAsyncWalking : 1;                                      // 0x0244(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowSimulatedTickDistanceSkip : 1;                       // 0x0245(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bUseBPAcknowledgeServerCorrection : 1;                     // 0x0245(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAllowImpactDeflection : 1;                                // 0x0245(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bDisableSimulatedMovement : 1;                             // 0x0245(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_5RW7 : 1;                                      // 0x0245(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bZeroPitchWhenNoAcceleration : 1;                          // 0x0245(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventSlidingWhileFalling : 1;                           // 0x0245(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventAddingImpulse : 1;                                 // 0x0245(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventZeroPitchAndRollWhileFalling : 1;                  // 0x0246(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bOrientRotationToMovement : 1;                             // 0x0246(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAssumeSymmetricalRotation : 1;                            // 0x0246(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableSwimmingOutsideOfWater : 1;                         // 0x0246(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bMovementInProgress : 1;                                   // 0x0246(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                          // 0x0246(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceMaxAccel : 1;                                        // 0x0246(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRunPhysicsWithNoController : 1;                           // 0x0246(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceNextFloorCheck : 1;                                  // 0x0247(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay)
	unsigned char                                      bShrinkProxyCapsule : 1;                                   // 0x0247(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCanWalkOffLedges : 1;                                     // 0x0247(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                        // 0x0247(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                             // 0x0247(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseRootMotionForLocomotion : 1;                           // 0x0247(0x0001) BIT_FIELD (Edit, NoDestructor)
	class UPrimitiveComponent*                         DeferredUpdatedMoveComponent;                              // 0x0248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	float                                              MaxOutOfWaterStepHeight;                                   // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              OutOfWaterZ;                                               // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              Mass;                                                      // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoClientPositionErrorToleranceStopped;                   // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoClientPositionErrorToleranceMovingFlying;              // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerClientPositionErrorToleranceOverride;                // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SimulatedTickSkipDistanceSQ;                               // 0x0268(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bEnablePhysicsInteraction;                                 // 0x026C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bTouchForceScaledToMass;                                   // 0x026D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bPushForceScaledToMass;                                    // 0x026E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bScalePushForceToVelocity;                                 // 0x026F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StandingDownwardForceScale;                                // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InitialPushForceFactor;                                    // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PushForceFactor;                                           // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PushForcePointZOffsetFactor;                               // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TouchForceFactor;                                          // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinTouchForce;                                             // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxTouchForce;                                             // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RepulsionForce;                                            // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceBraking : 1;                                         // 0x0290(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_WV9Q[0x3];                                     // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrouchedSpeedMultiplier;                                   // 0x0294(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     LastUpdateLocation;                                        // 0x0298(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     MoveStartLocation;                                         // 0x02A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              AnalogInputModifier;                                       // 0x02B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              BackwardsMaxSpeedMultiplier;                               // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	float                                              BackwardsMovementDotThreshold;                             // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     PendingForceToApply;                                       // 0x02BC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PendingImpulseToApply;                                     // 0x02C8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     Acceleration;                                              // 0x02D4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxSimulationTimeStep;                                     // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                MaxSimulationIterations;                                   // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              LedgeCheckThreshold;                                       // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              JumpOutOfWaterPitch;                                       // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              UpperImpactNormalScale;                                    // 0x02F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_W0UA[0x4];                                     // 0x02F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FFindFloorResult                            CurrentFloor;                                              // 0x02F8(0x0098) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<Engine_EMovementMode>                  DefaultLandMovementMode;                                   // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMovementMode>                  DefaultWaterMovementMode;                                  // 0x0391(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X9HQ[0x2];                                     // 0x0392(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                     // 0x0394(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseVelocityX : 1;                                  // 0x0394(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseVelocityY : 1;                                  // 0x0394(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                  // 0x0394(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                            // 0x0394(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanSlide : 1;                                             // 0x0394(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bJustTeleported : 1;                                       // 0x0394(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bNetworkUpdateReceived : 1;                                // 0x0394(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bNetworkMovementModeChanged : 1;                           // 0x0395(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNotifyApex : 1;                                           // 0x0395(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCheatFlying : 1;                                          // 0x0395(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bWantsToCrouch : 1;                                        // 0x0395(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor)
	unsigned char                                      bWantsToProne : 1;                                         // 0x0395(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                          // 0x0395(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIgnoreBaseRotation : 1;                                   // 0x0395(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bFastAttachedMove : 1;                                     // 0x0395(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAlwaysCheckFloor : 1;                                     // 0x0396(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                            // 0x0396(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPerformingJumpOff : 1;                                    // 0x0396(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                         // 0x0396(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAccelerationFollowsRotation : 1;                          // 0x0396(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPreventWaterSurfaceHopping : 1;                           // 0x0396(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bCheckFallingAITempIgnoreDinoRiderMesh : 1;                // 0x0396(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysCheckForInvallidFloor : 1;                          // 0x0396(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_E083[0x1];                                     // 0x0397(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PreventWaterHoppingPlaneOffset;                            // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L4V9[0x4];                                     // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             PreventWaterHopping_LastTimeAtSurface;                     // 0x03A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              AccelerationFollowsRotationMinDot;                         // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              AccelerationFollowsRotationStopDistance;                   // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              RotationAcceleration;                                      // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              RotationBraking;                                           // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              AngleToStartRotationBraking;                               // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              SwimmingAccelZMultiplier;                                  // 0x03BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TamedSwimmingAccelZMultiplier;                             // 0x03C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseRotationAcceleration : 1;                              // 0x03C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIgnoreRotationAccelerationWhenSwimming : 1;               // 0x03C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_WW34 : 1;                                      // 0x03C4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceModifyDesiredRotation : 1;                           // 0x03C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_4M09[0x7];                                     // 0x03C5(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLastHasRequestedVelocity : 1;                             // 0x03CC(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bHasRequestedVelocity : 1;                                 // 0x03CC(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                            // 0x03CC(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                  // 0x03CC(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_CBAE : 2;                                      // 0x03CC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreventExitingWater : 1;                                  // 0x03CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bForcePreventExitingWater : 1;                             // 0x03CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventEnteringWater : 1;                                 // 0x03CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPendingLaunchNoLowerVelocity : 1;                         // 0x03CD(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceNextTickUpdate : 1;                                  // 0x03CD(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_W498[0x2];                                     // 0x03CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LastForcedNetVelocity;                                     // 0x03D0(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7E8C[0x4];                                     // 0x03DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastStepUpTime;                                            // 0x03E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O28R[0x20];                                    // 0x03E8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastSwimTime;                                              // 0x0408(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FRotator                                    CurrentRotationSpeed;                                      // 0x0410(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     RequestedVelocity;                                         // 0x041C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             DisableMovementPhysicsUntilTime;                           // 0x0428(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LostDeltaTime;                                             // 0x0430(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              LastLostDeltaTime;                                         // 0x0434(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                AvoidanceUID;                                              // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              AvoidanceWeight;                                           // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PendingLaunchVelocity;                                     // 0x0440(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_54NC[0x4];                                     // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCharacterMovementComponentPreClothTickFunction PreClothComponentTick;                                     // 0x0450(0x0050)
	unsigned char                                      UnknownData_4HBC[0x20];                                    // 0x04A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinTimeBetweenTimeStampResets;                             // 0x04C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WSHO[0x4];                                     // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FStoredMoveData>                     ClientMovedData;                                           // 0x04C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_5PDA[0x8];                                     // 0x04D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionMovementParams                   RootMotionParams;                                          // 0x04E0(0x0040) (Transient)
	bool                                               bWasSimulatingRootMotion;                                  // 0x0520(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X7EN[0xF];                                     // 0x0521(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CharacterMovementComponent");
		return ptr;
	}



	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoid(int GroupFlags);
	void SetBase(class UPrimitiveComponent* NewBase, const struct FName& BoneName, bool bNotifyActor);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerMoveWithRotation(float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, const struct FRotator& ClientRotation);
	void ServerMoveOnlyRotation(float TimeStamp, unsigned char ClientRoll, uint32_t View);
	void ServerMoveOldWithRotation(float OldTimeStamp, const struct FVector_NetQuantize100& OldAccel, unsigned char OldMoveFlags, const struct FRotator& OldRotation);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize100& OldAccel, unsigned char OldMoveFlags);
	void ServerMoveDualWithRotation(float TimeStamp0, const struct FVector_NetQuantize100& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, const struct FRotator& InRotation0, const struct FRotator& InRotation);
	void ServerMoveDualOnlyRotation(float TimeStamp0, uint32_t View0, float TimeStamp, unsigned char ClientRoll, uint32_t View);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize100& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerJumpOutOfWater(const struct FVector_NetQuantize100& WallNormal, unsigned char JumpFlag);
	void RequestDirectMove(const struct FVector& MoveVelocity, bool bForceMaxSpeed);
	struct FVector NewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	bool IsWalking();
	bool IsWalkable(const struct FHitResult& Hit);
	bool IsOnWalkableFloor();
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMaxJumpHeight();
	float GetMaxAcceleration();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientDrawDebugSphere(const struct FVector& Location, float Radius, const struct FColor& SphereColor, float LifeSpan);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	void ClearBase(bool bNotifyActor);
	void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
	void AddForce(const struct FVector& Force);
};

// Class Engine.CheatManager
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DebugCameraControllerClass;                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2LJJ[0x48];                                    // 0x0038(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}



	void WidgetReflector();
	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void Slomo(float T);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void ServerToggleAILogging();
	void RebuildNavigation();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void DumpVoiceMutingState();
	void DumpOnlineSessionState();
	void DestroyTarget();
	void DestroyPawns(class UClass* aClass);
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<Engine_ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
};

// Class Engine.Engine
// 0x0928 (FullSize[0x0950] - InheritedSize[0x0028])
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData_DRGH[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFont*                                       TinyFont;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       TinyFontName;                                              // 0x0038(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SmallFont;                                                 // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       SmallFontName;                                             // 0x0050(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       MediumFont;                                                // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       MediumFontName;                                            // 0x0068(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       LargeFont;                                                 // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       LargeFontName;                                             // 0x0080(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SubtitleFont;                                              // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       SubtitleFontName;                                          // 0x0098(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay)
	TArray<class UFont*>                               AdditionalFonts;                                           // 0x00A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_R3SW[0x8];                                     // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             AdditionalFontNames;                                       // 0x00C0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay)
	class UClass*                                      ConsoleClass;                                              // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       ConsoleClassName;                                          // 0x00D8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameViewportClientClass;                                   // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       GameViewportClientClassName;                               // 0x00F0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      LocalPlayerClass;                                          // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       LocalPlayerClassName;                                      // 0x0108(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      WorldSettingsClass;                                        // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       WorldSettingsClassName;                                    // 0x0120(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FStringClassReference                       NavigationSystemClassName;                                 // 0x0130(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      NavigationSystemClass;                                     // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       AvoidanceManagerClassName;                                 // 0x0148(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      AvoidanceManagerClass;                                     // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       PhysicsCollisionHandlerClassName;                          // 0x0168(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	struct FStringClassReference                       GameUserSettingsClassName;                                 // 0x0178(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameUserSettingsClass;                                     // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGameUserSettings*                           GameUserSettings;                                          // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      LevelScriptActorClass;                                     // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       LevelScriptActorClassName;                                 // 0x01A0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FStringClassReference                       DefaultBlueprintBaseClassName;                             // 0x01B0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	struct FStringClassReference                       GameSingletonClassName;                                    // 0x01C0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	class UObject*                                     GameSingleton;                                             // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTireType*                                   DefaultTireType;                                           // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DefaultTireTypeName;                                       // 0x01E0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay)
	class UClass*                                      DefaultPreviewPawnClass;                                   // 0x01F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringClassReference                       DefaultPreviewPawnClassName;                               // 0x01F8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	struct FString                                     PlayOnConsoleSaveDir;                                      // 0x0208(0x0010) (ZeroConstructor, Config)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DefaultTextureName;                                        // 0x0220(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    DefaultDiffuseTexture;                                     // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DefaultDiffuseTextureName;                                 // 0x0238(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                   // 0x0248(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DefaultBSPVertexTextureName;                               // 0x0250(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                 // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       HighFrequencyNoiseTextureName;                             // 0x0268(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBokehTexture;                                       // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DefaultBokehTextureName;                                   // 0x0280(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   WireframeMaterial;                                         // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       WireframeMaterialName;                                     // 0x0298(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   DebugMeshMaterial;                                         // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DebugMeshMaterialName;                                     // 0x02B0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationLitMaterial;                                // 0x02C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       LevelColorationLitMaterialName;                            // 0x02C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationUnlitMaterial;                              // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       LevelColorationUnlitMaterialName;                          // 0x02E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LightingTexelDensityMaterial;                              // 0x02F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       LightingTexelDensityName;                                  // 0x02F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                          // 0x0308(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       ShadedLevelColorationLitMaterialName;                      // 0x0310(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                        // 0x0320(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       ShadedLevelColorationUnlitMaterialName;                    // 0x0328(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   RemoveSurfaceMaterial;                                     // 0x0338(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       RemoveSurfaceMaterialName;                                 // 0x0340(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorMaterial;                                       // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       VertexColorMaterialName;                                   // 0x0358(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                     // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       VertexColorViewModeMaterialName_ColorOnly;                 // 0x0370(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                  // 0x0380(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       VertexColorViewModeMaterialName_AlphaAsColor;              // 0x0388(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                       // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       VertexColorViewModeMaterialName_RedOnly;                   // 0x03A0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                     // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       VertexColorViewModeMaterialName_GreenOnly;                 // 0x03B8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                      // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       VertexColorViewModeMaterialName_BlueOnly;                  // 0x03D0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ConstraintLimitMaterial;                                   // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                  // 0x03E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                  // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                  // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       ConstraintLimitMaterialName;                               // 0x0400(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                           // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       InvalidLightmapSettingsMaterialName;                       // 0x0418(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                           // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       PreviewShadowsIndicatorMaterialName;                       // 0x0430(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                             // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       ArrowMaterialName;                                         // 0x0448(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                    // 0x0458(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	TArray<struct FColor>                              LightComplexityColors;                                     // 0x0468(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                    // 0x0478(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                              // 0x0488(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                     // 0x0498(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;                  // 0x049C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	float                                              MinLightMapDensity;                                        // 0x04A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	float                                              IdealLightMapDensity;                                      // 0x04A4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	float                                              MaxLightMapDensity;                                        // 0x04A8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                       // 0x04AC(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      UnknownData_TNEE[0x3];                                     // 0x04AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RenderLightMapDensityGrayscaleScale;                       // 0x04B0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	float                                              RenderLightMapDensityColorScale;                           // 0x04B4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                          // 0x04B8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	struct FLinearColor                                LightMapDensitySelectedColor;                              // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                         // 0x04D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                       // 0x04E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       DefaultPhysMaterialName;                                   // 0x04F0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                   // 0x0500(0x0010) (ZeroConstructor, Config)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                      // 0x0510(0x0010) (ZeroConstructor, Config)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                     // 0x0520(0x0010) (ZeroConstructor, Config)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                     // 0x0530(0x0010) (ZeroConstructor, Config)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                              // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       PreIntegratedSkinBRDFTextureName;                          // 0x0548(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  MiniFontTexture;                                           // 0x0558(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       MiniFontTextureName;                                       // 0x0560(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    WeightMapPlaceholderTexture;                               // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       WeightMapPlaceholderTextureName;                           // 0x0578(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  LightMapDensityTexture;                                    // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FStringAssetReference                       LightMapDensityTextureName;                                // 0x0590(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData_JIAV[0x8];                                     // 0x05A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         GameViewport;                                              // 0x05A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             DeferredCommands;                                          // 0x05B0(0x0010) (ZeroConstructor)
	int                                                TickCycles;                                                // 0x05C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                GameCycles;                                                // 0x05C4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ClientCycles;                                              // 0x05C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NearClipPlane;                                             // 0x05CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bEditorAnalyticsEnabled : 1;                               // 0x05D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHardwareSurveyEnabled : 1;                                // 0x05D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bSubtitlesEnabled : 1;                                     // 0x05D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSubtitlesForcedOff : 1;                                   // 0x05D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_WG1A[0x3];                                     // 0x05D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeBetweenPurgingPendingKillObjects;                      // 0x05D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseBackgroundLevelStreaming : 1;                          // 0x05D8(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_XQMZ[0x3];                                     // 0x05D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AsyncLoadingTimeLimit;                                     // 0x05DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAsyncLoadingUseFullTimeLimit : 1;                         // 0x05E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_LPLA[0x3];                                     // 0x05E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PriorityAsyncLoadingExtraTime;                             // 0x05E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              LevelStreamingActorsUpdateTimeLimit;                       // 0x05E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                LevelStreamingComponentsRegistrationGranularity;           // 0x05EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                MaximumLoopIterationCount;                                 // 0x05F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                          // 0x05F4(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSmoothFrameRate : 1;                                      // 0x05F4(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_XNJZ[0x3];                                     // 0x05F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FFloatRange                                 SmoothedFrameRateRange;                                    // 0x05F8(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                 // 0x0608(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_6LBY[0x3];                                     // 0x0609(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                        // 0x060C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                    // 0x0610(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      UnknownData_8XFV[0x3];                                     // 0x0611(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      C_WorldBox;                                                // 0x0614(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_BrushWire;                                               // 0x0618(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_AddWire;                                                 // 0x061C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_SubtractWire;                                            // 0x0620(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_SemiSolidWire;                                           // 0x0624(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_NonSolidWire;                                            // 0x0628(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_WireBackground;                                          // 0x062C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_ScaleBoxHi;                                              // 0x0630(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_VolumeCollision;                                         // 0x0634(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_BSPCollision;                                            // 0x0638(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_OrthoBackground;                                         // 0x063C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_Volume;                                                  // 0x0640(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_BrushShape;                                              // 0x0644(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StreamingDistanceFactor;                                   // 0x0648(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_ETransitionType>                TransitionType;                                            // 0x064C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NRSP[0x3];                                     // 0x064D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TransitionDescription;                                     // 0x0650(0x0010) (ZeroConstructor)
	struct FString                                     TransitionGameMode;                                        // 0x0660(0x0010) (ZeroConstructor)
	float                                              MeshLODRange;                                              // 0x0670(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowMatureLanguage : 1;                                  // 0x0674(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_ZD3G[0x3];                                     // 0x0675(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraRotationThreshold;                                   // 0x0678(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              CameraTranslationThreshold;                                // 0x067C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              PrimitiveProbablyVisibleTime;                              // 0x0680(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MaxOcclusionPixelsFraction;                                // 0x0684(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisablePhysXHardwareSupport : 1;                          // 0x0688(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                   // 0x0688(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_D05P[0x3];                                     // 0x0689(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxParticleResize;                                         // 0x068C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                MaxParticleResizeWarn;                                     // 0x0690(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2XFV[0x4];                                     // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                       // 0x0698(0x0010) (ZeroConstructor, Transient)
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                     // 0x06A8(0x001C) (Config)
	float                                              NetClientTicksPerSecond;                                   // 0x06C4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      bHasPendingGlobalReregister : 1;                           // 0x06C8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_H9BW[0x3];                                     // 0x06C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DisplayGamma;                                              // 0x06CC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MinDesiredFrameRate;                                       // 0x06D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	struct FLinearColor                                DefaultSelectedMaterialColor;                              // 0x06D4(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SelectedMaterialColor;                                     // 0x06E4(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SelectionOutlineColor;                                     // 0x06F4(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SelectedMaterialColorOverride;                             // 0x0704(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsOverridingSelectedColor;                                // 0x0714(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XQSB[0x3];                                     // 0x0715(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                          // 0x0718(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                   // 0x0718(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bSuppressMapWarnings : 1;                                  // 0x0718(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bCookSeparateSharedMPGameContent : 1;                      // 0x0718(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bDisableAILogging : 1;                                     // 0x0718(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      UnknownData_AJWP[0x3];                                     // 0x0719(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           bEnableVisualLogRecordingOnStart;                          // 0x071C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	class UDeviceProfileManager*                       DeviceProfileManager;                                      // 0x0720(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CH2D[0x4];                                     // 0x0728(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ScreenSaverInhibitorSemaphore;                             // 0x072C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bStartWithMatineeCapture : 1;                              // 0x0730(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCompressMatineeCapture : 1;                               // 0x0730(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_2VFL[0x7];                                     // 0x0731(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MatineeCaptureName;                                        // 0x0738(0x0010) (ZeroConstructor, Transient)
	struct FString                                     MatineePackageCaptureName;                                 // 0x0748(0x0010) (ZeroConstructor, Transient)
	int                                                MatineeCaptureFPS;                                         // 0x0758(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMatineeCaptureType>            MatineeCaptureType;                                        // 0x075C(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bNoTextureStreaming;                                       // 0x075D(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_25C8[0x2];                                     // 0x075E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLockReadOnlyLevels : 1;                                   // 0x0760(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_3Q86[0x7];                                     // 0x0761(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ParticleEventManagerClassPath;                             // 0x0768(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData_I29M[0x10];                                    // 0x0778(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SelectionHighlightIntensity;                               // 0x0788(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              BSPSelectionHighlightIntensity;                            // 0x078C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              HoverHighlightIntensity;                                   // 0x0790(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              SelectionHighlightIntensityBillboards;                     // 0x0794(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BQN8[0x168];                                   // 0x0798(0x0168) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                      // 0x0900(0x0010) (ZeroConstructor, Transient, Config)
	TArray<struct FString>                             ServerActors;                                              // 0x0910(0x0010) (ZeroConstructor, Config)
	unsigned char                                      bStartedLoadMapMovie : 1;                                  // 0x0920(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_F3WN[0x17];                                    // 0x0921(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NextWorldContextHandle;                                    // 0x0938(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_9I8M[0x14];                                    // 0x093C(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}



};

// Class Engine.GameEngine
// 0x0040 (FullSize[0x0990] - InheritedSize[0x0950])
class UGameEngine : public UEngine
{
public:
	unsigned char                                      bCheckForMovieCapture : 1;                                 // 0x0950(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_BSWG[0x3];                                     // 0x0951(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxDeltaTime;                                              // 0x0954(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	class UGameInstance*                               GameInstance;                                              // 0x0958(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8LV2[0x30];                                    // 0x0960(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}



};

// Class Engine.GameMode
// 0x00F0 (FullSize[0x0558] - InheritedSize[0x0468])
class AGameMode : public AInfo
{
public:
	struct FName                                       MatchState;                                                // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bUseSeamlessTravel : 1;                                    // 0x0470(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bPauseable : 1;                                            // 0x0470(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStartPlayersAsSpectators : 1;                             // 0x0470(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDelayedStart : 1;                                         // 0x0470(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_CSM9[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     OptionsString;                                             // 0x0478(0x0010) (ZeroConstructor)
	class UClass*                                      DefaultPawnClass;                                          // 0x0488(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      HUDClass;                                                  // 0x0490(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)
	int                                                NumSpectators;                                             // 0x0498(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumPlayers;                                                // 0x049C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumBots;                                                   // 0x04A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinRespawnDelay;                                           // 0x04A4(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AGameSession*                                GameSession;                                               // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumTravellingPlayers;                                      // 0x04B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                CurrentID;                                                 // 0x04B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     DefaultPlayerName;                                         // 0x04B8(0x0010) (BlueprintReadOnly, ZeroConstructor)
	TArray<class APlayerStart*>                        PlayerStarts;                                              // 0x04C8(0x0010) (ZeroConstructor)
	class UClass*                                      EngineMessageClass;                                        // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerControllerClass;                                     // 0x04E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)
	class UClass*                                      SpectatorClass;                                            // 0x04E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)
	class UClass*                                      PlayerStateClass;                                          // 0x04F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay)
	class UClass*                                      GameStateClass;                                            // 0x04F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)
	class AGameState*                                  GameState;                                                 // 0x0500(0x0008) (ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor)
	TArray<class APlayerState*>                        InactivePlayerArray;                                       // 0x0508(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_VFBD[0x10];                                    // 0x0518(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAntiDupeTransactionLog*                     AntiDupeTransactionLog;                                    // 0x0528(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FGameClassShortName>                 GameModeClassAliases;                                      // 0x0530(0x0010) (ZeroConstructor, Config, Protected)
	float                                              InactivePlayerStateLifeSpan;                               // 0x0540(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_2FBC[0x14];                                    // 0x0544(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameMode");
		return ptr;
	}



	bool ShouldSpawnAtStartSpot(class AController* Player);
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void K2_PostLogin(class APlayerController* NewPlayer);
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	class AActor* ChoosePlayerStart(class AController* Player);
};

// Class Engine.GameInstance
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData_W0KA[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULocalPlayer*>                        LocalPlayers;                                              // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_C6RY[0x10];                                    // 0x0048(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameInstance");
		return ptr;
	}



	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
};

// Class Engine.GameSession
// 0x0018 (FullSize[0x0480] - InheritedSize[0x0468])
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                             // 0x0468(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	int                                                MaxPlayers;                                                // 0x046C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      MaxSplitscreensPerConnection;                              // 0x0470(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	bool                                               bRequiresPushToTalk;                                       // 0x0471(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SLJZ[0x2];                                     // 0x0472(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SessionName;                                               // 0x0474(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IV03[0x4];                                     // 0x047C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameSession");
		return ptr;
	}



};

// Class Engine.GameState
// 0x00C8 (FullSize[0x0530] - InheritedSize[0x0468])
class AGameState : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                             // 0x0468(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	class AGameMode*                                   AuthorityGameMode;                                         // 0x0470(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UClass*                                      SpectatorClass;                                            // 0x0478(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      bServerAllowsAnsel : 1;                                    // 0x0480(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_UDRZ[0x3];                                     // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       MatchState;                                                // 0x0484(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected)
	struct FName                                       PreviousMatchState;                                        // 0x048C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_NAOG[0x4];                                     // 0x0494(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAnyPostProcessVolumeEntered;                             // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnyPostProcessVolumeLeft;                                // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                ElapsedTime;                                               // 0x04B8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TY4J[0x4];                                     // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APlayerState*>                        PlayerArray;                                               // 0x04C0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class APlayerState*>                        InactivePlayerArray;                                       // 0x04D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_4ISM[0x50];                                    // 0x04E0(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameState");
		return ptr;
	}



	bool Semaphore_TryGrab(const struct FName& SemaphoreName, class AActor* InObject, float PriorityWeight, int MaxToAllocate);
	bool Semaphore_Release(const struct FName& SemaphoreName, class AActor* InObject);
	void PostProcessOverlapEvent__DelegateSignature(class APostProcessVolume* PostProcessVolume, class APlayerController* Controller, bool bIsPrimaryPlayer);
	void OnRep_SpectatorClass();
	void OnRep_MatchState();
	void OnRep_GameModeClass();
	void BPNetSpawnActorAtLocation(class UClass* anActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class AActor* EffectOwnerToIgnore, float MaxRangeToReplicate, class USceneComponent* attachToComponent, int dataIndex, const struct FName& attachSocketName, bool bOnlySendToEffectOwner);
};

// Class Engine.GameUserSettings
// 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                 // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_258U[0x37];                                    // 0x0029(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     MacroCtrl0;                                                // 0x0060(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl1;                                                // 0x0070(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl2;                                                // 0x0080(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl3;                                                // 0x0090(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl4;                                                // 0x00A0(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl5;                                                // 0x00B0(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl6;                                                // 0x00C0(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl7;                                                // 0x00D0(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl8;                                                // 0x00E0(0x0010) (ZeroConstructor, Config)
	struct FString                                     MacroCtrl9;                                                // 0x00F0(0x0010) (ZeroConstructor, Config)
	uint32_t                                           ResolutionSizeX;                                           // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	uint32_t                                           ResolutionSizeY;                                           // 0x0104(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                          // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                          // 0x010C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	int                                                WindowPosX;                                                // 0x0110(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	int                                                WindowPosY;                                                // 0x0114(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	bool                                               bUseDesktopResolutionForFullscreen;                        // 0x0118(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_OW7L[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FullscreenMode;                                            // 0x011C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	int                                                LastConfirmedFullscreenMode;                               // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	uint32_t                                           Version;                                                   // 0x0124(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameUserSettings");
		return ptr;
	}



	void SaveSettings();
};

// Class Engine.ScriptViewportClient
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData_28MG[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ScriptViewportClient");
		return ptr;
	}



};

// Class Engine.GameViewportClient
// 0x0110 (FullSize[0x0140] - InheritedSize[0x0030])
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData_OW95[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             ViewPortWidgets;                                           // 0x0038(0x0010) (ZeroConstructor, Transient)
	class UConsole*                                    ViewportConsole;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                           // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_5XEQ[0x30];                                    // 0x0060(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      World;                                                     // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UGameInstance*                               GameInstance;                                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_NNE8[0xA0];                                    // 0x00A0(0x00A0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}



	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
};

// Class Engine.ParticleSystemComponent
// 0x01C8 (FullSize[0x0830] - InheritedSize[0x0668])
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                                  // 0x0668(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                          // 0x0670(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                        // 0x0680(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference)
	unsigned char                                      UnknownData_O81D : 4;                                      // 0x0690(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bWasDeactivated : 1;                                       // 0x0690(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_3IP0 : 1;                                      // 0x0690(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bResetOnDetach : 1;                                        // 0x0690(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                              // 0x0690(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_FY94 : 2;                                      // 0x0691(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPreserveOnDedicatedServer : 1;                            // 0x0691(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_AG7K[0x6];                                     // 0x0692(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                        // 0x0698(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x06A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x06C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x06D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     OldPosition;                                               // 0x06E8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PartSysVelocity;                                           // 0x06F4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WarmupTime;                                                // 0x0700(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WarmupTickRate;                                            // 0x0704(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bWarmingUp : 1;                                            // 0x0708(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_MICK[0xB];                                     // 0x0709(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SecondsBeforeInactive;                                     // 0x0714(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4GA6[0x8];                                     // 0x0718(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxTimeBeforeForceUpdateTransform;                         // 0x0720(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YUIS[0x4];                                     // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideLODMethod : 1;                                    // 0x0728(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_J3GO[0x3];                                     // 0x0729(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x072C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F9GV[0x3];                                     // 0x072D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                      // 0x0730(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_477T : 1;                                      // 0x0730(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceAllowParticleCollisions : 1;                         // 0x0730(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_12RP[0x7];                                     // 0x0731(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FMaterialRelevance>                  CachedViewRelevanceFlags;                                  // 0x0738(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_RWT5[0x8];                                     // 0x0748(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleSystemReplay*>               ReplayClips;                                               // 0x0750(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_8CLN[0x80];                                    // 0x0760(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomTimeDilation;                                        // 0x07E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CQHZ[0x4];                                     // 0x07E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptDelegate                             OnSystemFinished;                                          // 0x07E8(0x0010) (ZeroConstructor, InstancedReference, NoDestructor)
	unsigned char                                      UnknownData_MAKY[0x38];                                    // 0x07F8(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}



	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void OnSystemFinished__DelegateSignature(class UParticleSystemComponent* PSystem);
	bool GetVectorParameter(const struct FName& InName, struct FVector* OutVector);
	int GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(const struct FName& Name);
	bool GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial);
	bool GetFloatParameter(const struct FName& InName, float* OutFloat);
	bool GetColorParameter(const struct FName& InName, struct FLinearColor* outColor);
	bool GetActorParameter(const struct FName& InName, class AActor** OutActor);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& Name, class UMaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
};

// Class Engine.SaveGame
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USaveGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SaveGame");
		return ptr;
	}



};

// Class Engine.Player
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData_53DX[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           PlayerController;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                CurrentNetSpeed;                                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ConfiguredInternetSpeed;                                   // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	int                                                ConfiguredLanSpeed;                                        // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SYQO[0xC];                                     // 0x0044(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}



};

// Class Engine.BlueprintCore
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                    // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor)
	class UClass*                                      GeneratedClass;                                            // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	bool                                               bLegacyNeedToPurgeSkelRefs;                                // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bLegacyGeneratedClassIsAuthoritative;                      // 0x0039(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E8EH[0x2];                                     // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       BlueprintGuid;                                             // 0x003C(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_LXET[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintCore");
		return ptr;
	}



};

// Class Engine.EdGraphNode
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UEdGraphNode : public UObject
{
public:
	TArray<class UEdGraphPin*>                         Pins;                                                      // 0x0028(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                  // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NodePosY;                                                  // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NodeWidth;                                                 // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NodeHeight;                                                // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bHasCompilerMessage : 1;                                   // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_PFIL[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NodeComment;                                               // 0x0050(0x0010) (ZeroConstructor)
	int                                                ErrorType;                                                 // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NN7S[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ErrorMsg;                                                  // 0x0068(0x0010) (ZeroConstructor)
	struct FGuid                                       NodeGuid;                                                  // 0x0078(0x0010) (ZeroConstructor)
	TEnumAsByte<Engine_ENodeAdvancedPins>              AdvancedPinDisplay;                                        // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K45F[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphNode");
		return ptr;
	}



};

// Class Engine.MaterialInterface
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData_XPDN[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USubsurfaceProfile*                          SubsurfaceProfile;                                         // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WUOR[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                         // 0x0040(0x0018) (Edit, BlueprintVisible, Protected)
	unsigned char                                      UnknownData_ATB9[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}



	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetBaseMaterial();
};

// Class Engine.LocalPlayer
// 0x01D8 (FullSize[0x0228] - InheritedSize[0x0050])
class ULocalPlayer : public UPlayer
{
public:
	int                                                ControllerId;                                              // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YLQM[0x14];                                    // 0x0054(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         ViewportClient;                                            // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   Origin;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   Size;                                                      // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LastViewLocation;                                          // 0x0080(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAspectRatioAxisConstraint>     AspectRatioAxisConstraint;                                 // 0x008C(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QEOU[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PendingLevelPlayerControllerClass;                         // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bSentSplitJoin : 1;                                        // 0x0098(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor)
	unsigned char                                      UnknownData_QTV8[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bValidCachedViewFrustum;                                   // 0x009C(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WCW0[0x173];                                   // 0x009D(0x0173) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UOnlineSession*                              OnlineSession;                                             // 0x0210(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HKNG[0x10];                                    // 0x0218(0x0010) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}



};

// Class Engine.OnlineSession
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UOnlineSession : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.OnlineSession");
		return ptr;
	}



};

// Class Engine.DefaultPawn
// 0x0028 (FullSize[0x0520] - InheritedSize[0x04F8])
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                              // 0x04F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              BaseLookUpRate;                                            // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	class UFloatingPawnMovement*                       MovementComponent;                                         // 0x0500(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USphereComponent*                            CollisionComponent;                                        // 0x0508(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                        MeshComponent;                                             // 0x0510(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bAddDefaultMovementBindings : 1;                           // 0x0518(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_VIGX[0x7];                                     // 0x0519(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DefaultPawn");
		return ptr;
	}



	void TurnAtRate(float Rate);
	void Turn(float val);
	void MoveUp_World(float val);
	void MoveRight(float val);
	void MoveForward(float val);
	void LookUpAtRate(float Rate);
	void LookUp(float val);
};

// Class Engine.SpectatorPawn
// 0x0000 (FullSize[0x0520] - InheritedSize[0x0520])
class ASpectatorPawn : public ADefaultPawn
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpectatorPawn");
		return ptr;
	}



};

// Class Engine.SoundNode
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                                // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}



};

// Class Engine.PhysicsVolume
// 0x0020 (FullSize[0x04C0] - InheritedSize[0x04A0])
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                          // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Priority;                                                  // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FluidFriction;                                             // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bWaterVolume : 1;                                          // 0x04AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDynamicWaterVolume : 1;                                   // 0x04AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPhysicsOnContact : 1;                                     // 0x04AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPreventWaterSubmersion : 1;                               // 0x04AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_C5W2[0x3];                                     // 0x04AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WaterDensity;                                              // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WaterDamping;                                              // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PhysicsMinWalkableFloorZ;                                  // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X8U7[0x4];                                     // 0x04BC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}



	float GetVolumeZAtPosition2D(const struct FVector2D& Position);
};

// Class Engine.AISystemBase
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UAISystemBase : public UObject
{
public:
	struct FStringClassReference                       AISystemClassName;                                         // 0x0028(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FName                                       AISystemModuleName;                                        // 0x0038(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AISystemBase");
		return ptr;
	}



};

// Class Engine.BlueprintGeneratedClass
// 0x0050 (FullSize[0x01D8] - InheritedSize[0x0188])
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                   // 0x0188(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_BPHC[0x4];                                     // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               ReplicatedPropertiesInitialOnly;                           // 0x0190(0x0010) (ZeroConstructor)
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                     // 0x01A0(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                        // 0x01B0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x01C0(0x0010) (ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintGeneratedClass");
		return ptr;
	}



};

// Class Engine.NetConnection
// 0x342C8 (FullSize[0x34318] - InheritedSize[0x0050])
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>                    Children;                                                  // 0x0050(0x0010) (ZeroConstructor, Transient)
	class UNetDriver*                                  Driver;                                                    // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPackageMap*                                 PackageMap;                                                // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UQ10[0x10];                                    // 0x0070(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UChannel*>                            OpenChannels;                                              // 0x0080(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                           // 0x0090(0x0010) (ZeroConstructor)
	struct FVector                                     LastDormancyLocCheck;                                      // 0x00A0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerControllerTimer;                                     // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G2NX[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             SpatialFrame;                                              // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                             NextSpatialFrameCheckTime;                                 // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                      Viewer;                                                    // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                      OwningActor;                                               // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxPacket;                                                 // 0x00D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      InternalAck : 1;                                           // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bWelcomed : 1;                                             // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFirstActorSent : 1;                                       // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHasArkLoginLock : 1;                                      // 0x00DC(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bDisableFlushNetUntilActuallyReady : 1;                    // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSendingHandoverToken : 1;                                 // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_4V9Z[0xEB];                                    // 0x00DD(0x00EB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastReceiveTime;                                           // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L54K[0x34018];                                 // 0x01D0(0x34018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ClientGivenIP;                                             // 0x341E8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_1S2S[0x120];                                   // 0x341F8(0x0120) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}



};

// Class Engine.NetDriver
// 0x0378 (FullSize[0x03A0] - InheritedSize[0x0028])
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData_4ZZV[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NetConnectionClassName;                                    // 0x0030(0x0010) (ZeroConstructor, Config)
	int                                                MaxDownloadSize;                                           // 0x0040(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bClampListenServerTickRate : 1;                            // 0x0044(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_AAVG[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NetServerMaxTickRate;                                      // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                MaxInternetClientRate;                                     // 0x004C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                MaxClientRate;                                             // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              ServerTravelPause;                                         // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              SpawnPrioritySeconds;                                      // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              RelevantTimeout;                                           // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              KeepAliveTime;                                             // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              InitialConnectTimeout;                                     // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              ConnectionTimeout;                                         // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              InitialConnectTimeoutToServer;                             // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              ConnectionTimeoutToServer;                                 // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               RequireEngineVersionMatch;                                 // 0x0074(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8CPJ[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              ServerConnection;                                          // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UNetConnection*>                      ClientConnections;                                         // 0x0080(0x0010) (ZeroConstructor)
	class UWorld*                                      World;                                                     // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_17ZC[0x68];                                    // 0x0098(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      NetConnectionClass;                                        // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UProperty*                                   RoleProperty;                                              // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UProperty*                                   RemoteRoleProperty;                                        // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       NetDriverName;                                             // 0x0118(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EFRP[0x8];                                     // 0x0120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             Time;                                                      // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X4H7[0x270];                                   // 0x0130(0x0270) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}



};

// Class Engine.Model
// 0x0578 (FullSize[0x05A0] - InheritedSize[0x0028])
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData_08EW[0x578];                                   // 0x0028(0x0578) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}



};

// Class Engine.Interface_AssetUserData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_AssetUserData : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_AssetUserData");
		return ptr;
	}



};

// Class Engine.AmbientSound
// 0x0020 (FullSize[0x0488] - InheritedSize[0x0468])
class AAmbientSound : public AActor
{
public:
	unsigned char                                      bAutoPlay : 1;                                             // 0x0468(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_SFTD[0x7];                                     // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAudioComponent*                             AudioComponent;                                            // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USoundNodeAmbient*                           SoundNodeInstance;                                         // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor)
	bool                                               bOverrideAutoplay;                                         // 0x0480(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5STN[0x7];                                     // 0x0481(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}



	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};

// Class Engine.LevelBase
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class ULevelBase : public UObject
{
public:
	TTransArray<AActor*>                                      Actors[0x88];                                    // 0x0028(0x0088) MISSED OFFSET (PADDING) //was missed for some reason, but this is the Actor for future reference


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelBase");
		return ptr;
	}



};

// Class Engine.PendingNetGame
// 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData_8640[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetDriver*                                  NetDriver;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NNLS[0xF8];                                    // 0x0038(0x00F8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PendingNetGame");
		return ptr;
	}



};

// Class Engine.World
// 0x0BF8 (FullSize[0x0C20] - InheritedSize[0x0028])
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData_ROFZ[0xD0];                                    // 0x0028(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      PersistentLevel;                                           // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class USaveGameSummary*                            SaveGameSummary;                                           // 0x0100(0x0008) (ZeroConstructor, Transient, Deprecated, IsPlainOldData, NoDestructor)
	class UNetDriver*                                  NetDriver;                                                 // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class ULineBatchComponent*                         LineBatcher;                                               // 0x0110(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class ULineBatchComponent*                         PersistentLineBatcher;                                     // 0x0118(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                     // 0x0120(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	class AGameState*                                  GameState;                                                 // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class AGameNetworkManager*                         NetworkManager;                                            // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                   // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class UObject*>                             ExtraReferencedObjects;                                    // 0x0140(0x0010) (ZeroConstructor, Transient)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                           // 0x0150(0x0010) (ZeroConstructor, Transient)
	struct FString                                     StreamingLevelsPrefix;                                     // 0x0160(0x0010) (ZeroConstructor)
	class ULevel*                                      CurrentLevelPendingVisibility;                             // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class AParticleEventManager*                       MyParticleEventManager;                                    // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                      // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GJW3[0xB8];                                    // 0x0188(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bWorldWasLoadedThisTick : 1;                               // 0x0240(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bTriggerPostLoadMap : 1;                                   // 0x0240(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bWorldWasPlayerView : 1;                                   // 0x0240(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUseSimpleWorld : 1;                                       // 0x0240(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_LTLH : 1;                                      // 0x0240(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bForceLevelStreamingUpdateForOneTick : 1;                  // 0x0240(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_6THF[0x7];                                     // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AGameMode*                                   AuthorityGameMode;                                         // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UNavigationSystem*                           NavigationSystem;                                          // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UAISystemBase*                               AISystem;                                                  // 0x0258(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UAvoidanceManager*                           AvoidanceManager;                                          // 0x0260(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class ULevel*>                              Levels;                                                    // 0x0268(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_2Q5B[0x10];                                    // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      CurrentLevel;                                              // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UGameInstance*                               OwningGameInstance;                                        // 0x0290(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x0298(0x0010) (ZeroConstructor, Transient)
	class UCanvas*                                     CanvasForRenderingToTarget;                                // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                       // 0x02B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                FrameCounter;                                              // 0x02B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HLGZ[0x8A4];                                   // 0x02BC(0x08A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorldComposition*                           WorldComposition;                                          // 0x0B60(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PC42[0xB4];                                    // 0x0B68(0x00B4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_ICPR : 5;                                      // 0x0C1C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAreConstraintsDirty : 1;                                  // 0x0C1C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_CCPQ[0x3];                                     // 0x0C1D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}



	bool IsActuallyUsingTrueSkyActor();
	class AWorldSettings* GetWorldSettings(bool bCheckStreamingPesistent, bool bChecked);
	class APlayerController* GetFirstPlayerController();
};

// Class Engine.Level
// 0x02A0 (FullSize[0x0350] - InheritedSize[0x00B0])
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData_ZI1Z[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      OwningWorld;                                               // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UModel*                                      Model;                                                     // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UModelComponent*>                     ModelComponents;                                           // 0x00C8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class ALevelScriptActor*                           LevelScriptActor;                                          // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class ANavigationObjectBase*                       NavListStart;                                              // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class ANavigationObjectBase*                       NavListEnd;                                                // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LightmapTotalSize;                                         // 0x00F0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              ShadowmapTotalSize;                                        // 0x00F4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TArray<struct FVector>                             StaticNavigableGeometry;                                   // 0x00F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_RUM9[0x1D8];                                   // 0x0108(0x01D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_SQ1W : 2;                                      // 0x02E0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsVisible : 1;                                            // 0x02E0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bLocked : 1;                                               // 0x02E0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_G7OM[0x2F];                                    // 0x02E1(0x002F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             MovieSceneBindingsArray;                                   // 0x0310(0x0010) (ZeroConstructor, Protected)
	TArray<class UObject*>                             ActiveRuntimeMovieScenePlayers;                            // 0x0320(0x0010) (ZeroConstructor, Transient, Protected)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0330(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_QFPZ[0x10];                                    // 0x0340(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}



};

// Class Engine.BrushShape
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class ABrushShape : public ABrush
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}



};

// Class Engine.BlockingVolume
// 0x0008 (FullSize[0x04A8] - InheritedSize[0x04A0])
class ABlockingVolume : public AVolume
{
public:
	bool                                               bAddToBlockingVolumeList;                                  // 0x04A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S8EF[0x7];                                     // 0x04A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void DoToggle(bool bEnable);
};

// Class Engine.CameraBlockingVolume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class ACameraBlockingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraBlockingVolume");
		return ptr;
	}



};

// Class Engine.CullDistanceVolume
// 0x0018 (FullSize[0x04B8] - InheritedSize[0x04A0])
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                             // 0x04A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                              // 0x04B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_D66Z[0x7];                                     // 0x04B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}



};

// Class Engine.FoliageInclusionVolume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class AFoliageInclusionVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FoliageInclusionVolume");
		return ptr;
	}



};

// Class Engine.LevelStreamingVolume
// 0x0018 (FullSize[0x04B8] - InheritedSize[0x04A0])
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                       // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                     // 0x04B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisabled : 1;                                             // 0x04B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_MJ50[0x3];                                     // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EStreamingVolumeUsage>          StreamingUsage;                                            // 0x04B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S0CB[0x3];                                     // 0x04B5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}



};

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		return ptr;
	}



};

// Class Engine.LightmassImportanceVolume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class ALightmassImportanceVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}



};

// Class Engine.MergeMeshVolume
// 0x0010 (FullSize[0x04B0] - InheritedSize[0x04A0])
class AMergeMeshVolume : public AVolume
{
public:
	float                                              GridCountX;                                                // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GridCountY;                                                // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GridCountZ;                                                // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HMPL[0x4];                                     // 0x04AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MergeMeshVolume");
		return ptr;
	}



};

// Class Engine.NavMeshBoundsVolume
// 0x0008 (FullSize[0x04A8] - InheritedSize[0x04A0])
class ANavMeshBoundsVolume : public AVolume
{
public:
	unsigned char                                      bAutoUpdateBounds : 1;                                     // 0x04A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_EN90[0x7];                                     // 0x04A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavMeshBoundsVolume");
		return ptr;
	}



};

// Class Engine.NavRelevantInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavRelevantInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavRelevantInterface");
		return ptr;
	}



};

// Class Engine.NavModifierVolume
// 0x0010 (FullSize[0x04B0] - InheritedSize[0x04A0])
class ANavModifierVolume : public AVolume
{
public:
	unsigned char                                      UnknownData_027W[0x8];                                     // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AreaClass;                                                 // 0x04A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavModifierVolume");
		return ptr;
	}



};

// Class Engine.DefaultPhysicsVolume
// 0x0000 (FullSize[0x04C0] - InheritedSize[0x04C0])
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}



};

// Class Engine.KillZVolume
// 0x0000 (FullSize[0x04C0] - InheritedSize[0x04C0])
class AKillZVolume : public APhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KillZVolume");
		return ptr;
	}



};

// Class Engine.PainCausingVolume
// 0x0048 (FullSize[0x0508] - InheritedSize[0x04C0])
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                          // 0x04C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_K39W[0x3];                                     // 0x04C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamagePerSec;                                              // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DamageType;                                                // 0x04C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PainInterval;                                              // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEntryPain : 1;                                            // 0x04D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPainWalkingOnly : 1;                                      // 0x04D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bTriggerUndermeshDetection : 1;                            // 0x04D4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bContainsMultipleOverlapComponents : 1;                    // 0x04D4(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoreWildDinos : 1;                                      // 0x04D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_Q96K[0x3];                                     // 0x04D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              ActorClassesToExclude;                                     // 0x04D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UClass*>                              ActorClassesToInclude;                                     // 0x04E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      BACKUP_bPainCausing : 1;                                   // 0x04F8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_FK9Z[0x7];                                     // 0x04F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 DamageInstigator;                                          // 0x0500(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PainCausingVolume");
		return ptr;
	}



};

// Class Engine.Interface_PostProcessVolume
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_PostProcessVolume : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_PostProcessVolume");
		return ptr;
	}



};

// Class Engine.PostProcessVolume
// 0x03C0 (FullSize[0x0860] - InheritedSize[0x04A0])
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData_GXLV[0x8];                                     // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        Settings;                                                  // 0x04A8(0x0358) (Edit, BlueprintVisible, Interp)
	float                                              Priority;                                                  // 0x0800(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BlendRadius;                                               // 0x0804(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BlendWeight;                                               // 0x0808(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              MaterialWaterLineParameterValue;                           // 0x080C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0810(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUnbound : 1;                                              // 0x0810(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bWaterPP : 1;                                              // 0x0810(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_YCMI[0x3];                                     // 0x0811(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EPostProcessVolumeType>         VolumeType;                                                // 0x0814(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZX4K[0x3];                                     // 0x0815(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAbsolutePriority : 1;                                     // 0x0818(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_PCTW[0x3];                                     // 0x0819(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ViewDistanceMultiplier;                                    // 0x081C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnPostProcessVolumeEntered;                                // 0x0820(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostProcessVolumeLeft;                                   // 0x0830(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AExponentialHeightFog*>               DisabledHeightFogs;                                        // 0x0840(0x0010) (Edit, ZeroConstructor)
	TArray<class AExponentialHeightFog*>               PrimaryLerpingHeightFogs;                                  // 0x0850(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}



	void PostprocessVolumeLeftSignature__DelegateSignature(class APlayerController* Controller, bool bIsPrimaryPlayer);
	void PostprocessVolumeEnteredSignature__DelegateSignature(class APlayerController* Controller, bool bIsPrimaryPlayer);
};

// Class Engine.SpherePostProcessVolume
// 0x0010 (FullSize[0x0870] - InheritedSize[0x0860])
class ASpherePostProcessVolume : public APostProcessVolume
{
public:
	float                                              SphereVolumeRadius;                                        // 0x0860(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QODZ[0x4];                                     // 0x0864(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USphereComponent*                            SphereComponent;                                           // 0x0868(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpherePostProcessVolume");
		return ptr;
	}



};

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (FullSize[0x04D0] - InheritedSize[0x04A0])
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                     // 0x04A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                                   // 0x04B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                   // 0x04C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		return ptr;
	}



};

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class APrecomputedVisibilityVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		return ptr;
	}



};

// Class Engine.TileStreamingVolume
// 0x0078 (FullSize[0x0518] - InheritedSize[0x04A0])
class ATileStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                       // 0x04A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               ExcludeLevelNames;                                         // 0x04B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_XDIJ[0x50];                                    // 0x04C0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDisabled : 1;                                             // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowOnlySpecifiedLevels : 1;                             // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceDoNotTriggerBlockLoading : 1;                        // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHideOtherLevels : 1;                                      // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bBlockOnLoading : 1;                                       // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableUpdatesWorldComp : 1;                               // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDestroyContainedPawnsOnStartup : 1;                       // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceLevelsAsDistanceStreamingEnabled : 1;                // 0x0510(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_8MI8[0x7];                                     // 0x0511(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TileStreamingVolume");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void DoToggle(bool bEnable);
};

// Class Engine.TriggerVolume
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class ATriggerVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}



};

// Class Engine.CameraActor
// 0x0380 (FullSize[0x07E8] - InheritedSize[0x0468])
class ACameraActor : public AActor
{
public:
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoActivateForPlayer;                                     // 0x0468(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QVGC[0x7];                                     // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraComponent*                            CameraComponent;                                           // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BTVF[0x8];                                     // 0x0478(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x0480(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_SQ1Y[0x3];                                     // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AspectRatio;                                               // 0x0484(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              FOVAngle;                                                  // 0x0488(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              PostProcessBlendWeight;                                    // 0x048C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0490(0x0358) (Deprecated)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}



	int GetAutoActivatePlayerIndex();
};

// Class Engine.NavAgentInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavAgentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavAgentInterface");
		return ptr;
	}



};

// Class Engine.InputComponent
// 0x0078 (FullSize[0x0150] - InheritedSize[0x00D8])
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_CHA2[0x78];                                    // 0x00D8(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputComponent");
		return ptr;
	}



	bool WasControllerKeyJustReleased(const struct FKey& Key);
	bool WasControllerKeyJustPressed(const struct FKey& Key);
	bool IsControllerKeyDown(const struct FKey& Key);
	void InputVectorAxisHandlerDynamicSignature__DelegateSignature(const struct FVector& AxisValue);
	void InputTouchHandlerDynamicSignature__DelegateSignature(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, const struct FVector& Location);
	void InputGestureHandlerDynamicSignature__DelegateSignature(float Value);
	void InputAxisHandlerDynamicSignature__DelegateSignature(float AxisValue);
	void InputActionHandlerDynamicSignature__DelegateSignature();
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FKey& Key);
	void GetControllerAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FKey& Key);
};

// Class Engine.DebugCameraController
// 0x0048 (FullSize[0x08A0] - InheritedSize[0x0858])
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                                     // 0x0858(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bIsFrozenRendering : 1;                                    // 0x0858(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_KTVL[0x7];                                     // 0x0859(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x0860(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BM4S[0x38];                                    // 0x0868(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}



	void ShowDebugSelectedInfo();
};

// Class Engine.LogVisualizerCameraController
// 0x0018 (FullSize[0x08B8] - InheritedSize[0x08A0])
class ALogVisualizerCameraController : public ADebugCameraController
{
public:
	class AActor*                                      PickedActor;                                               // 0x08A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_86E5[0x10];                                    // 0x08A8(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LogVisualizerCameraController");
		return ptr;
	}



};

// Class Engine.DecalActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                     // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}



	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// Class Engine.DocumentationActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData_JK7E[0x8];                                     // 0x0468(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DocumentationActor");
		return ptr;
	}



};

// Class Engine.DynamicCaptureManager
// 0x0628 (FullSize[0x0A90] - InheritedSize[0x0468])
class ADynamicCaptureManager : public AActor
{
public:
	struct FString                                     SavePath;                                                  // 0x0468(0x0010) (Edit, ZeroConstructor)
	bool                                               bUseMapRelativeSaving;                                     // 0x0478(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QZ8S[0x7];                                     // 0x0479(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AMatineeActor*                               Matinee;                                                   // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FStringAssetReference>               CapturesData;                                              // 0x0488(0x0010) (Edit, ZeroConstructor)
	struct FOverrideCaptureData                        OverridenCapturesData[0x20];                               // 0x0498(0x0300) (Edit)
	bool                                               bIsMasterSkylightOverrider;                                // 0x0798(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0RXQ[0x7];                                     // 0x0799(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     OverrideMasterSkylightCapturesPath;                        // 0x07A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FOverrideCaptureData>                OverrideMasterSkylightData;                                // 0x07B0(0x0010) (Edit, ZeroConstructor)
	float                                              CaptureInterval;                                           // 0x07C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PreviewMatineeTime;                                        // 0x07C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CQ8O[0x150];                                   // 0x07C8(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDynamicCaptureData*                         LoadedSnapshot0;                                           // 0x0918(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UDynamicCaptureData*                         LoadedSnapshot1;                                           // 0x0920(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UDynamicCaptureData*                         OverrideLoadedSnapshot0;                                   // 0x0928(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UDynamicCaptureData*                         OverrideLoadedSnapshot1;                                   // 0x0930(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FStringAssetReference>               OldCapturesData;                                           // 0x0938(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_177E[0x148];                                   // 0x0948(0x0148) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DynamicCaptureManager");
		return ptr;
	}



};

// Class Engine.EmitterCameraLensEffectBase
// 0x0038 (FullSize[0x04F0] - InheritedSize[0x04B8])
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                           // 0x04B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                          // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              BaseFOV;                                                   // 0x04C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistFromCamera;                                            // 0x04CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowMultipleInstances : 1;                               // 0x04D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_0XDE[0x7];                                     // 0x04D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              EmittersToTreatAsSame;                                     // 0x04D8(0x0010) (ZeroConstructor)
	class APlayerCameraManager*                        BaseCamera;                                                // 0x04E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}



};

// Class Engine.GroundClutterLayerActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class AGroundClutterLayerActor : public AActor
{
public:
	class UGroundClutterComponent*                     ClutterComponent;                                          // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GroundClutterLayerActor");
		return ptr;
	}



};

// Class Engine.HierarchicalInstancedStaticMeshActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class AHierarchicalInstancedStaticMeshActor : public AActor
{
public:
	class UHierarchicalInstancedStaticMeshComponent*   InstancedStaticMeshComponent;                              // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshActor");
		return ptr;
	}



};

// Class Engine.HoudiniEmptyActor
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class AHoudiniEmptyActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HoudiniEmptyActor");
		return ptr;
	}



};

// Class Engine.DebugCameraHUD
// 0x0000 (FullSize[0x0550] - InheritedSize[0x0550])
class ADebugCameraHUD : public AHUD
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}



};

// Class Engine.LogVisualizerHUD
// 0x0030 (FullSize[0x0580] - InheritedSize[0x0550])
class ALogVisualizerHUD : public ADebugCameraHUD
{
public:
	unsigned char                                      UnknownData_OZ6H[0x30];                                    // 0x0550(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LogVisualizerHUD");
		return ptr;
	}



};

// Class Engine.AtmosphericFog
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                   // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AtmosphericFog");
		return ptr;
	}



};

// Class Engine.ExponentialHeightFog
// 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                 // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0470(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_SX5Q[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ExponentialHeightFog");
		return ptr;
	}



	void OnRep_bEnabled();
};

// Class Engine.AntiDupeTransactionLog
// 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
class UAntiDupeTransactionLog : public UObject
{
public:
	class UWorld*                                      CurrentWorld;                                              // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BLLV[0x90];                                    // 0x0030(0x0090) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AntiDupeTransactionLog");
		return ptr;
	}



};

// Class Engine.LocalSpawnGameMode
// 0x0000 (FullSize[0x0558] - InheritedSize[0x0558])
class ALocalSpawnGameMode : public AGameMode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LocalSpawnGameMode");
		return ptr;
	}



};

// Class Engine.GameNetworkManager
// 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
class AGameNetworkManager : public AInfo
{
public:
	int                                                AdjustedNetSpeed;                                          // 0x0468(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastNetSpeedUpdateTime;                                    // 0x046C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TotalNetBandwidth;                                         // 0x0470(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	int                                                MinDynamicBandwidth;                                       // 0x0474(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	int                                                MaxDynamicBandwidth;                                       // 0x0478(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                             // 0x047C(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                             // 0x047C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_VGO0[0x3];                                     // 0x047D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StandbyRxCheatTime;                                        // 0x0480(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              StandbyTxCheatTime;                                        // 0x0484(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                BadPingThreshold;                                          // 0x0488(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              PercentMissingForRxStandby;                                // 0x048C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              PercentMissingForTxStandby;                                // 0x0490(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              PercentForBadPing;                                         // 0x0494(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              JoinInProgressStandbyWaitTime;                             // 0x0498(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MoveRepSize;                                               // 0x049C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MAXPOSITIONERRORSQUARED;                                   // 0x04A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	float                                              MAXNEARZEROVELOCITYSQUARED;                                // 0x04A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CLIENTADJUSTUPDATECOST;                                    // 0x04A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MAXCLIENTUPDATEINTERVAL;                                   // 0x04AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               ClientAuthorativePosition;                                 // 0x04B0(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	bool                                               bUseDistanceBasedRelevancy;                                // 0x04B1(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EN2Y[0x6];                                     // 0x04B2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameNetworkManager");
		return ptr;
	}



};

// Class Engine.MatineeActorManager
// 0x0018 (FullSize[0x0480] - InheritedSize[0x0468])
class AMatineeActorManager : public AInfo
{
public:
	bool                                               bPriorityToFloatSets;                                      // 0x0468(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bPriorityToVectorSets;                                     // 0x0469(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GCAK[0x16];                                    // 0x046A(0x0016) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeActorManager");
		return ptr;
	}



};

// Class Engine.SkyLight
// 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                            // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0470(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_5V4Z[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}



	void OnRep_bEnabled();
};

// Class Engine.WindDirectionalSource
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                 // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}



};

// Class Engine.InstancedFoliageActor
// 0x00C0 (FullSize[0x0528] - InheritedSize[0x0468])
class AInstancedFoliageActor : public AActor
{
public:
	class UFoliageType*                                SelectedMesh;                                              // 0x0468(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              EditorScrollPercent;                                       // 0x0470(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6D59[0x4];                                     // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UFoliageType*>                        FoliageTypes;                                              // 0x0478(0x0010) (ZeroConstructor, Transient, SaveGame)
	TArray<class UHierarchicalInstancedStaticMeshComponent*> InstancedStaticMeshComponent;                              // 0x0488(0x0010) (ExportObject, ZeroConstructor, Transient, SaveGame, ContainsInstancedReference)
	unsigned char                                      UnknownData_LA09[0x50];                                    // 0x0498(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             BaseMeshLookup;                                            // 0x04E8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_NS91[0x30];                                    // 0x04F8(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedFoliageActor");
		return ptr;
	}



	class AInstancedFoliageActor* STATIC_BPGetInstancedFoliageActorForCurrentLevel(class UWorld* World);
	void BPConvertStaticMeshActorsToFoliage(TArray<class AStaticMeshActor*> actors, TArray<class AStaticMeshActor*>* ConvertedActors);
};

// Class Engine.LandscapeGizmoActor
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class ALandscapeGizmoActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeGizmoActor");
		return ptr;
	}



};

// Class Engine.LandscapeGizmoActiveActor
// 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
{
public:
	unsigned char                                      UnknownData_86TC[0x50];                                    // 0x0468(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeGizmoActiveActor");
		return ptr;
	}



};

// Class Engine.LandscapeProxy
// 0x02E0 (FullSize[0x0748] - InheritedSize[0x0468])
class ALandscapeProxy : public AActor
{
public:
	class ULandscapeSplinesComponent*                  SplineComponent;                                           // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FGuid                                       LandscapeGuid;                                             // 0x0470(0x0010) (ZeroConstructor, Protected)
	struct FIntPoint                                   LandscapeSectionOffset;                                    // 0x0480(0x0008) (ZeroConstructor)
	int                                                MaxLODLevel;                                               // 0x0488(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                StaticLightingLOD;                                         // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                       // 0x0490(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StreamingDistanceMultiplier;                               // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KCY8[0x4];                                     // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          LandscapeMaterial;                                         // 0x04A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          LandscapeHoleMaterial;                                     // 0x04A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LODDistanceFactor;                                         // 0x04B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ZRescaleBuilder;                                           // 0x04B4(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<class ULandscapeComponent*>                 LandscapeComponents;                                       // 0x04B8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<class ULandscapeHeightfieldCollisionComponent*> CollisionComponents;                                       // 0x04C8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	float                                              StaticLightingResolution;                                  // 0x04D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TLazyObjectPtr<class ALandscape>                   LandscapeActor;                                            // 0x04DC(0x001C) (Edit, IsPlainOldData, NoDestructor)
	unsigned char                                      bCastStaticShadow : 1;                                     // 0x04F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                 // 0x04F8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAllowHeightFieldShadow : 1;                               // 0x04F8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIsProxy : 1;                                              // 0x04F8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_0XZW[0x3];                                     // 0x04F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x04FC(0x0018) (Edit)
	int                                                CollisionMipLevel;                                         // 0x0514(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CollisionThickness;                                        // 0x0518(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BY8A[0x4];                                     // 0x051C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               BodyInstance;                                              // 0x0520(0x0160) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FLandscapeLayerStruct>               LayerInfoObjs;                                             // 0x0680(0x0010) (ZeroConstructor, Deprecated)
	int                                                ComponentSizeQuads;                                        // 0x0690(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubsectionSizeQuads;                                       // 0x0694(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumSubsections;                                            // 0x0698(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUsedForNavigation : 1;                                    // 0x069C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_9O8H[0x3];                                     // 0x069D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ELandscapeLODFalloff>           LODFalloff;                                                // 0x06A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G51V[0x3];                                     // 0x06A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxPaintedLayersPerComponent;                              // 0x06A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PPMW[0xA0];                                    // 0x06A8(0x00A0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeProxy");
		return ptr;
	}



	void ChangeLODDistanceFactor(float InLODDistanceFactor);
};

// Class Engine.Landscape
// 0x0000 (FullSize[0x0748] - InheritedSize[0x0748])
class ALandscape : public ALandscapeProxy
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Landscape");
		return ptr;
	}



};

// Class Engine.LevelBounds
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ALevelBounds : public AActor
{
public:
	bool                                               bAutoUpdateBounds;                                         // 0x0468(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OB0J[0x7];                                     // 0x0469(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelBounds");
		return ptr;
	}



};

// Class Engine.LevelScriptActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bEnableScriptReplication : 1;                              // 0x0468(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceAbsoluteMaxDistance : 1;                             // 0x0468(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableMeshOptimizer : 1;                                 // 0x0468(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInputEnabled : 1;                                         // 0x0468(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_S8YF[0x7];                                     // 0x0469(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelScriptActor");
		return ptr;
	}



	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void OnGameStateReady(class AGameState* GameState);
	void LevelReset();
};

// Class Engine.DirectionalLight
// 0x0008 (FullSize[0x0480] - InheritedSize[0x0478])
class ADirectionalLight : public ALight
{
public:
	unsigned char                                      UnknownData_01P3[0x8];                                     // 0x0478(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}



};

// Class Engine.PointLight
// 0x0008 (FullSize[0x0480] - InheritedSize[0x0478])
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                       // 0x0478(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}



	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};

// Class Engine.SpotLight
// 0x0008 (FullSize[0x0480] - InheritedSize[0x0478])
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                        // 0x0478(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
class AGeneratedMeshAreaLight : public ASpotLight
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		return ptr;
	}



};

// Class Engine.MaterialInstanceActor
// 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                              // 0x0468(0x0010) (Edit, BlueprintVisible, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}



};

// Class Engine.MatineeActor
// 0x0088 (FullSize[0x04F0] - InheritedSize[0x0468])
class AMatineeActor : public AActor
{
public:
	unsigned char                                      UnknownData_O6IX : 1;                                      // 0x0468(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bRestoreAfterEditing : 1;                                  // 0x0468(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseGameStatePlayRate : 1;                                 // 0x0468(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LE8Z[0x7];                                     // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpData*                                 MatineeData;                                               // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       MatineeControllerName;                                     // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayRate;                                                  // 0x0480(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	unsigned char                                      bDedicatedServerUpdateInterpolations : 1;                  // 0x0484(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPlayOnLevelLoad : 1;                                      // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsGameplayRelevant : 1;                                   // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceStartPos : 1;                                        // 0x0484(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_U91T[0x3];                                     // 0x0485(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStartPosition;                                        // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                MatineeManagerPriority;                                    // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLooping : 1;                                              // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, SaveGame, NoDestructor)
	unsigned char                                      bRewindOnPlay : 1;                                         // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bNoResetOnRewind : 1;                                      // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                               // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableRadioFilter : 1;                                   // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bClientSideOnly : 1;                                       // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                               // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsSkippable : 1;                                          // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_8M5Z[0x3];                                     // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PreferredSplitScreenNum;                                   // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDisableMovementInput : 1;                                 // 0x0498(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableLookAtInput : 1;                                   // 0x0498(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHidePlayer : 1;                                           // 0x0498(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseMatineeManager : 1;                                    // 0x0498(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReplicateGroupInfos : 1;                                  // 0x0498(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7JW4[0x3];                                     // 0x0499(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpPosition;                                            // 0x049C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                           // 0x04A0(0x0010) (Net, ZeroConstructor, RepNotify)
	unsigned char                                      bShouldShowGore : 1;                                       // 0x04B0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_ZCUZ[0x7];                                     // 0x04B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                 // 0x04B8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                                // 0x04C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying : 1;                                            // 0x04D8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bReversePlayback : 1;                                      // 0x04D8(0x0001) BIT_FIELD (Net, SaveGame, NoDestructor)
	unsigned char                                      bPaused : 1;                                               // 0x04D8(0x0001) BIT_FIELD (Net, Transient, SaveGame, NoDestructor)
	unsigned char                                      bClientDontPlayMatineeIfCompleted : 1;                     // 0x04D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7PDC[0x7];                                     // 0x04D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ReplicationForceIsPlaying;                                 // 0x04E0(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_92JH[0xF];                                     // 0x04E1(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}



	void Stop();
	void SetPosition(float NewPosition, bool bJump, bool bForceJumpFromBeginningForEvents, bool bSkipMatineeUpdate);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play(float OverrideSetPosition, bool bOverridePositionJump);
	void Pause();
	void OnMatineeEvent__DelegateSignature();
	void InitClientMatinee();
	void ChangePlaybackDirection();
	void AddActorToGroup(const struct FName& GroupName, class AActor* TheGroupActor);
};

// Class Engine.MatineeActorCameraAnim
// 0x0008 (FullSize[0x04F8] - InheritedSize[0x04F0])
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                                // 0x04F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeActorCameraAnim");
		return ptr;
	}



};

// Class Engine.NavigationQueryFilter
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>               Areas;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	struct FNavigationFilterFlags                      IncludeFlags;                                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FNavigationFilterFlags                      ExcludeFlags;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationQueryFilter");
		return ptr;
	}



};

// Class Engine.NavigationData
// 0x0178 (FullSize[0x05E0] - InheritedSize[0x0468])
class ANavigationData : public AActor
{
public:
	class UPrimitiveComponent*                         RenderingComp;                                             // 0x0468(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor)
	struct FNavDataConfig                              NavDataConfig;                                             // 0x0470(0x0028)
	unsigned char                                      bEnableDrawing : 1;                                        // 0x0498(0x0001) BIT_FIELD (Edit, Transient, NoDestructor)
	unsigned char                                      bRebuildAtRuntime : 1;                                     // 0x0498(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_JGKG[0x3];                                     // 0x0499(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ObservedPathsTickInterval;                                 // 0x049C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bLockNavigation : 1;                                       // 0x04A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_C8HQ[0xD7];                                    // 0x04A1(0x00D7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSupportedAreaData>                  SupportedAreas;                                            // 0x0578(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_EUDM[0x58];                                    // 0x0588(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationData");
		return ptr;
	}



};

// Class Engine.NavigationGraph
// 0x0000 (FullSize[0x05E0] - InheritedSize[0x05E0])
class ANavigationGraph : public ANavigationData
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationGraph");
		return ptr;
	}



};

// Class Engine.RecastNavMesh
// 0x0118 (FullSize[0x06F8] - InheritedSize[0x05E0])
class ARecastNavMesh : public ANavigationData
{
public:
	unsigned char                                      bDrawTriangleEdges : 1;                                    // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawPolyEdges : 1;                                        // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawNavMeshEdges : 1;                                     // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawTileBounds : 1;                                       // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawPathCollidingGeometry : 1;                            // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawTileLabels : 1;                                       // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawPolygonLabels : 1;                                    // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawDefaultPolygonCost : 1;                               // 0x05E0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawLabelsOnPathNodes : 1;                                // 0x05E1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawNavLinks : 1;                                         // 0x05E1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawFailedNavLinks : 1;                                   // 0x05E1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawClusters : 1;                                         // 0x05E1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawOctree : 1;                                           // 0x05E1(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDistinctlyDrawTilesBeingBuilt : 1;                        // 0x05E1(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_LTZ5[0x2];                                     // 0x05E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DrawOffset;                                                // 0x05E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              TileSizeUU;                                                // 0x05E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              CellSize;                                                  // 0x05EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              CellHeight;                                                // 0x05F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              AgentRadius;                                               // 0x05F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              AgentHeight;                                               // 0x05F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              AgentMaxHeight;                                            // 0x05FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              AgentMaxSlope;                                             // 0x0600(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              AgentMaxStepHeight;                                        // 0x0604(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MinRegionArea;                                             // 0x0608(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MergeRegionSize;                                           // 0x060C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MaxSimplificationError;                                    // 0x0610(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DefaultDrawDistance;                                       // 0x0614(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DefaultMaxSearchNodes;                                     // 0x0618(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DefaultMaxHierarchicalSearchNodes;                         // 0x061C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseVirtualFilters : 1;                                    // 0x0620(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_A501[0x3];                                     // 0x0621(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ERecastPartitioning>            RegionPartitioning;                                        // 0x0624(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_ERecastPartitioning>            LayerPartitioning;                                         // 0x0625(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_ZTU4[0x2];                                     // 0x0626(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RegionChunkSplits;                                         // 0x0628(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                LayerChunkSplits;                                          // 0x062C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                MaxTileGridWidth;                                          // 0x0630(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                MaxTileGridHeight;                                         // 0x0634(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bSortNavigationAreasByCost : 1;                            // 0x0638(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bPerformVoxelFiltering : 1;                                // 0x0638(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bUseBetterOffsetsFromCorners : 1;                          // 0x0638(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bUseVoxelCache : 1;                                        // 0x0638(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_UWC3[0x7];                                     // 0x0639(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TileSetUpdateInterval;                                     // 0x0640(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              HeuristicScale;                                            // 0x0644(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9LNC[0xB0];                                    // 0x0648(0x00B0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RecastNavMesh");
		return ptr;
	}



};

// Class Engine.NavigationGraphNode
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class ANavigationGraphNode : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationGraphNode");
		return ptr;
	}



};

// Class Engine.NavigationObjectBase
// 0x0028 (FullSize[0x0490] - InheritedSize[0x0468])
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData_9FQ0[0x8];                                     // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UBillboardComponent*                         GoodSprite;                                                // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UBillboardComponent*                         BadSprite;                                                 // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsPIEPlayerStart : 1;                                     // 0x0488(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_F7AA[0x7];                                     // 0x0489(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationObjectBase");
		return ptr;
	}



};

// Class Engine.PlayerStart
// 0x0010 (FullSize[0x04A0] - InheritedSize[0x0490])
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                            // 0x0490(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SpawnPointRegion;                                          // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U2DP[0x4];                                     // 0x049C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}



};

// Class Engine.PlayerStartPIE
// 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
class APlayerStartPIE : public APlayerStart
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerStartPIE");
		return ptr;
	}



};

// Class Engine.NavPathObserverInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavPathObserverInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavPathObserverInterface");
		return ptr;
	}



};

// Class Engine.NavigationTestingActor
// 0x0098 (FullSize[0x0500] - InheritedSize[0x0468])
class ANavigationTestingActor : public AActor
{
public:
	unsigned char                                      UnknownData_BQ8D[0x10];                                    // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FNavAgentProperties                         NavAgentProps;                                             // 0x0480(0x0010) (Edit)
	struct FVector                                     QueryingExtent;                                            // 0x0490(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OPKV[0x4];                                     // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ANavigationData*                             MyNavData;                                                 // 0x04A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     ProjectedLocation;                                         // 0x04A8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      bProjectedLocationValid : 1;                               // 0x04B4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor)
	unsigned char                                      bSearchStart : 1;                                          // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseHierarchicalPathfinding : 1;                           // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bGatherDetailedInfo : 1;                                   // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowNodePool : 1;                                         // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowBestPath : 1;                                         // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowDiffWithPreviousStep : 1;                             // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShouldBeVisibleInGame : 1;                                // 0x04B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7KZZ[0x3];                                     // 0x04B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ENavCostDisplay>                CostDisplayMode;                                           // 0x04B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WQVQ[0x3];                                     // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   TextCanvasOffset;                                          // 0x04BC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPathExist : 1;                                            // 0x04C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor)
	unsigned char                                      bPathIsPartial : 1;                                        // 0x04C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor)
	unsigned char                                      bPathSearchOutOfNodes : 1;                                 // 0x04C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor)
	unsigned char                                      UnknownData_6OR3[0x3];                                     // 0x04C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PathfindingTime;                                           // 0x04C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	float                                              PathCost;                                                  // 0x04CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	int                                                PathfindingSteps;                                          // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GAMF[0x4];                                     // 0x04D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ANavigationTestingActor*                     OtherActor;                                                // 0x04D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      FilterClass;                                               // 0x04E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ShowStepIndex;                                             // 0x04E8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor)
	float                                              OffsetFromCornersDistance;                                 // 0x04EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D9ZD[0x10];                                    // 0x04F0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationTestingActor");
		return ptr;
	}



};

// Class Engine.NavLinkDefinition
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                              // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_X8PT[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkDefinition");
		return ptr;
	}



};

// Class Engine.NavLinkHostInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavLinkHostInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkHostInterface");
		return ptr;
	}



};

// Class Engine.NavLinkProxy
// 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
class ANavLinkProxy : public AActor
{
public:
	unsigned char                                      UnknownData_A1FZ[0x10];                                    // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNavigationLink>                     PointLinks;                                                // 0x0478(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                              // 0x0488(0x0010) (ZeroConstructor)
	class UNavLinkCustomComponent*                     SmartLinkComp;                                             // 0x0498(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	bool                                               bSmartLinkIsRelevant;                                      // 0x04A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q0EY[0x7];                                     // 0x04A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSmartLinkReached;                                        // 0x04A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkProxy");
		return ptr;
	}



	void SmartLinkReachedSignature__DelegateSignature(class AActor* MovingActor, const struct FVector& DestinationPoint);
	void SetSmartLinkEnabled(bool bEnabled);
	void ResumePathFollowing(class AActor* Agent);
	void ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
	bool IsSmartLinkEnabled();
	bool HasMovingAgents();
};

// Class Engine.NiagaraActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ANiagaraActor : public AActor
{
public:
	class UNiagaraComponent*                           NiagaraComponent;                                          // 0x0468(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NiagaraActor");
		return ptr;
	}



};

// Class Engine.ParticleEventManager
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class AParticleEventManager : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}



};

// Class Engine.Skeleton
// 0x0288 (FullSize[0x02B0] - InheritedSize[0x0028])
class USkeleton : public UObject
{
public:
	TArray<struct FBoneNode>                           BoneTree;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct UObject_FTransform>                  RefLocalPoses;                                             // 0x0038(0x0010) (ZeroConstructor, Deprecated)
	unsigned char                                      UnknownData_52A5[0x80];                                    // 0x0048(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkeletonToMeshLinkup>               LinkupCache;                                               // 0x00C8(0x0010) (ZeroConstructor, Transient)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x00D8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_8933[0x50];                                    // 0x00E8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSmartNameContainer                         SmartNames;                                                // 0x0138(0x0050)
	unsigned char                                      UnknownData_B7VX[0x58];                                    // 0x0188(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                                // 0x01E0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_RWA3[0xC0];                                    // 0x01F0(0x00C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Skeleton");
		return ptr;
	}



};

// Class Engine.SkeletalMesh
// 0x02A0 (FullSize[0x02C8] - InheritedSize[0x0028])
class USkeletalMesh : public UObject
{
public:
	unsigned char                                      UnknownData_L34N[0x18];                                    // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	struct FBoxSphereBounds                            Bounds;                                                    // 0x0048(0x001C) (ZeroConstructor, Transient, DuplicateTransient)
	float                                              CachedInitialSphereRadiusBounds;                           // 0x0064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FSkeletalMaterial>                   Materials;                                                 // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	struct FName                                       CloseToGroundBoneName;                                     // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FGroundBoneChain>                    GroundBonesChains;                                         // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DefaultTraceLength;                                        // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TraceStartOffset;                                          // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InterpolationSpeed;                                        // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InterpolationSpeedUpward;                                  // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                           // 0x00A0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorAxis;                                            // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorFlipAxis;                                        // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MEAY[0x6];                                     // 0x00B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                   // 0x00B8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                  // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHasBeenSimplified : 1;                                    // 0x00C8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHasVertexColors : 1;                                      // 0x00C8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoreTriReductions : 1;                                  // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowLODStreaming : 1;                                    // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFullLODStreaming : 1;                                     // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCookRemoveLOD0 : 1;                                       // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReinitDataOnStreaming : 1;                                // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreMasterPoseLODs : 1;                                 // 0x00C9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bConsoleDropLOD0 : 1;                                      // 0x00C9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bConsoleDropLOD0onLowMemPlatform : 1;                      // 0x00C9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPreventLODStreamingOnWindows : 1;                         // 0x00C9(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_90CO[0x2];                                     // 0x00CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ConsoleDropLODNewTriangleCount;                            // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_W5PC[0x30];                                    // 0x00D0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsAsset*                               PhysicsAsset;                                              // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StreamingDistanceMultiplier;                               // 0x0108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0OJH[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FMorphTargetMap>                     MorphTargetTable;                                          // 0x0110(0x0010) (ZeroConstructor, Deprecated)
	TArray<class UMorphTarget*>                        MorphTargets;                                              // 0x0120(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_2E4C[0xD8];                                    // 0x0130(0x00D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    RotOffset;                                                 // 0x0208(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LocOffset;                                                 // 0x0214(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ScaleMultiplier;                                           // 0x0220(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NO7J[0x4];                                     // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FClothingAssetData>                  ClothingAssets;                                            // 0x0230(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData_31CM[0x18];                                    // 0x0240(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x0258(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_5G4G[0x60];                                    // 0x0268(0x0060) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}



};

// Class Engine.WheeledVehicle
// 0x0010 (FullSize[0x0508] - InheritedSize[0x04F8])
class AWheeledVehicle : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                      // 0x04F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UWheeledVehicleMovementComponent*            VehicleMovement;                                           // 0x0500(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WheeledVehicle");
		return ptr;
	}



};

// Class Engine.ReflectionCapture
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                          // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReflectionCapture");
		return ptr;
	}



};

// Class Engine.BoxReflectionCapture
// 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
class ABoxReflectionCapture : public AReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoxReflectionCapture");
		return ptr;
	}



	class UBoxReflectionCaptureComponent* GetBoxCaptureComponent();
};

// Class Engine.PlaneReflectionCapture
// 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
class APlaneReflectionCapture : public AReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlaneReflectionCapture");
		return ptr;
	}



};

// Class Engine.SphereReflectionCapture
// 0x0008 (FullSize[0x0478] - InheritedSize[0x0470])
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                         // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SphereReflectionCapture");
		return ptr;
	}



	class USphereReflectionCaptureComponent* GetSphereCaptureComponent();
};

// Class Engine.RigidBodyBase
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class ARigidBodyBase : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}



};

// Class Engine.PhysicsConstraintActor
// 0x0020 (FullSize[0x0488] - InheritedSize[0x0468])
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                            // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class AActor*                                      ConstraintActor1;                                          // 0x0470(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	class AActor*                                      ConstraintActor2;                                          // 0x0478(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisableCollision : 1;                                     // 0x0480(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_9M9E[0x7];                                     // 0x0481(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsConstraintActor");
		return ptr;
	}



};

// Class Engine.PhysicsThruster
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                         // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsThruster");
		return ptr;
	}



};

// Class Engine.RadialForceActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                            // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RadialForceActor");
		return ptr;
	}



	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};

// Class Engine.SceneCapture
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                  // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCapture");
		return ptr;
	}



};

// Class Engine.SceneCapture2D
// 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                        // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCapture2D");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
};

// Class Engine.SceneCaptureCube
// 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                      // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureCube");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
};

// Class Engine.Interface_CollisionDataProvider
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_CollisionDataProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_CollisionDataProvider");
		return ptr;
	}



};

// Class Engine.PhysicsConstraintComponent
// 0x01A8 (FullSize[0x0380] - InheritedSize[0x01D8])
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                          // 0x01D8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	struct FConstrainComponentPropName                 ComponentName1;                                            // 0x01E0(0x0008) (Edit)
	class AActor*                                      ConstraintActor2;                                          // 0x01E8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	struct FConstrainComponentPropName                 ComponentName2;                                            // 0x01F0(0x0008) (Edit)
	unsigned char                                      UnknownData_6TRZ[0x10];                                    // 0x01F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                           // 0x0208(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FConstraintInstance                         ConstraintInstance;                                        // 0x0220(0x0160) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsConstraintComponent");
		return ptr;
	}



	void SetLinearZLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct UObject_FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<Engine_EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<Engine_EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<Engine_EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void ConstraintBrokenSignature__DelegateSignature(int ConstraintIndex);
	void BreakConstraint();
};

// Class Engine.SkeletalMeshComponent
// 0x0470 (FullSize[0x0C10] - InheritedSize[0x07A0])
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	TEnumAsByte<Engine_EAnimationMode>                 AnimationMode;                                             // 0x07A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_G839[0x3];                                     // 0x07A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bInterpolateRootPhys : 1;                                  // 0x07A4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5YCN[0x2B];                                    // 0x07A5(0x002B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      OriginalBonesOffsets;                                      // 0x07D0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bAlignRootOnlyToGround : 1;                                // 0x07E0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_JYMH[0x7];                                     // 0x07E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FIKLegInfo>                          IkLegs;                                                    // 0x07E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FIKGroundPlaneOverrideInfo>          IkGroundPlaneOverrides;                                    // 0x07F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FIKRootAdjustmentInfo>               IkRootAdjustmentPoints;                                    // 0x0808(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              IkRootAdjustmentHeightCS;                                  // 0x0818(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              IkRootOffsetInterpSpeed;                                   // 0x081C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkRootOffsetInterpSpeedUp;                                 // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkRootWorldOffsetInterpSpeed;                              // 0x0824(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkRootWorldOffsetInterpSpeedUp;                            // 0x0828(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkInterpSpeed;                                             // 0x082C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkInterpSpeedUp;                                           // 0x0830(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkFabrikInterpSpeed;                                       // 0x0834(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkFeetAlignmentInterpSpeed;                                // 0x0838(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              IkGroundPlaneInterpSpeed;                                  // 0x083C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinHitNormalZForFeetAlignment;                             // 0x0840(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FeetAlignmentLimit;                                        // 0x0844(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LegLimitRatioFromCylinderHeight;                           // 0x0848(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UseWorldSpaceFeetAlignment : 1;                            // 0x084C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableIkOnlyWhenIdle : 1;                                 // 0x084C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_36DY[0x3];                                     // 0x084D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    IkRootRotationOffset;                                      // 0x0850(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     IkRootLocationOffset;                                      // 0x085C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoIKDelayedTraceFreezeDurationMultiplier;                // 0x0868(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DinoIKSlopeMatchingRootHeightOffset;                       // 0x086C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bDinoIKSlopeMatchingRootHeightOffsetMultiplier : 1;        // 0x0870(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKAnimationLegZOffseting : 1;                         // 0x0870(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKUseExperimentalInvalidTraceZeroing : 1;             // 0x0870(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableSimpleIK : 1;                                       // 0x0870(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_EF07[0x3];                                     // 0x0871(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DinoIKAnimationLegZOffsetingMultiplier;                    // 0x0874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TwoLegVirtualHitLocationWS;                                // 0x0878(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     TwoLegVirtualHitLocationWSTarget;                          // 0x0884(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     TwoLegVirtualHitLocationCS;                                // 0x0890(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bRotateFeetToAlignWithGround : 1;                          // 0x089C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableMultiFabrik : 1;                                    // 0x089C(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bIKRotationEnabled : 1;                                    // 0x089C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bEnableIKTraceFreezing : 1;                                // 0x089C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKUseLegLimits : 1;                                   // 0x089C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKLerpFeet : 1;                                       // 0x089C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKLerpLegs : 1;                                       // 0x089C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKRootWorldSpaceLerpZ : 1;                            // 0x089C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDinoIKSmoothGroundPlaneLerping : 1;                       // 0x089D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHumanIKUseBoneModiferLegScalars : 1;                      // 0x089D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bApplyGroundBoneModifiers : 1;                             // 0x089D(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowParallelAnimations : 1;                              // 0x089D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOnlyTickWhenRenderedDontDisableOnDedicatedServer : 1;     // 0x089D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bSkipUpdateTransformIfBlendedPhysics : 1;                  // 0x089D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInitOffset : 1;                                           // 0x089D(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNeverTickOnDediServer : 1;                                // 0x089D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAlwaysTeleportKinematic : 1;                              // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceDisablePhysicsOnDediServer : 1;                      // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceDisablePhysicsOnDediServerAllowRagdoll : 1;          // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBasedPawnsTriggerChildTick : 1;                           // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPhysicsRequiredOnDediServer : 1;                          // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bModifyBoneAnimNodeUseCurrentBoneModifiers : 1;            // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAlwaysForceUpdateKinematicsOnDedicatedServer : 1;         // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceSimpleIK : 1;                                        // 0x089E(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFreezeGroundPlaneIK : 1;                                  // 0x089F(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      bRotateToMatchWalkingSlope : 1;                            // 0x089F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	float                                              DistanceFromGroundToStartIK;                               // 0x08A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistanceFromGroundToStartIKBias;                           // 0x08A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxIterations;                                             // 0x08A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MatchSlopeRotationSpeed;                                   // 0x08AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RootPitchRotationLimit;                                    // 0x08B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RootRollRotationLimit;                                     // 0x08B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ForceUpdateValuesTimeLimit;                                // 0x08B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RootOffset;                                                // 0x08BC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FRotator                                    RootRotationOffset;                                        // 0x08C0(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YJ6I[0x4];                                     // 0x08CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastIkUpdateTime;                                          // 0x08D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0EG7[0xC0];                                    // 0x08D8(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AnimBlueprintGeneratedClass;                               // 0x0998(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimInstance*                               AnimScriptInstance;                                        // 0x09A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FSingleAnimationPlayData                    AnimationData;                                             // 0x09A8(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_73B0[0x18];                                    // 0x09C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct UObject_FTransform>                  CachedLocalAtoms;                                          // 0x09E0(0x0010) (ZeroConstructor, Transient)
	TArray<struct UObject_FTransform>                  CachedSpaceBases;                                          // 0x09F0(0x0010) (ZeroConstructor, Transient)
	float                                              GlobalAnimRateScale;                                       // 0x0A00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHasValidBodies : 1;                                       // 0x0A04(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_78EG[0x3];                                     // 0x0A05(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType;                                  // 0x0A08(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_476J[0x3];                                     // 0x0A09(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bBlendPhysics : 1;                                         // 0x0A0C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                       // 0x0A0C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                            // 0x0A0C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDisableClothSimulation : 1;                               // 0x0A0C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCollideWithEnvironment : 1;                               // 0x0A0C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCollideWithAttachedChildren : 1;                          // 0x0A0C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bLocalSpaceSimulation : 1;                                 // 0x0A0C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bSetAttachmentMasterPoseComponent : 1;                     // 0x0A0C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceTickDisabled : 1;                                    // 0x0A0D(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6R8E[0x2];                                     // 0x0A0E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ComponentMassScale;                                        // 0x0A10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinLinearDamping;                                          // 0x0A14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                              MinAngularDamping;                                         // 0x0A18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      bClothMorphTarget : 1;                                     // 0x0A1C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bResetAfterTeleport : 1;                                   // 0x0A1C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bSuppressAnimNotifies : 1;                                 // 0x0A1C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7AUD : 1;                                      // 0x0A1C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseAutomaticAnimationStaggering : 1;                      // 0x0A1C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_3NIC[0x3];                                     // 0x0A1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TeleportDistanceThreshold;                                 // 0x0A20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TeleportRotationThreshold;                                 // 0x0A24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ClothBlendWeight;                                          // 0x0A28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OEF7[0x4];                                     // 0x0A2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RootBoneTranslation;                                       // 0x0A30(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bNoSkeletonUpdate : 1;                                     // 0x0A3C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTickAnimationWhenNotRendered : 1;                         // 0x0A3C(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bPauseAnims : 1;                                           // 0x0A3C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x0A3C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_BUJ1[0x3];                                     // 0x0A3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  BodySetup;                                                 // 0x0A40(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bAutonomousTickPose : 1;                                   // 0x0A48(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bForceRefpose : 1;                                         // 0x0A48(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bOldForceRefPose : 1;                                      // 0x0A48(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowPrePhysBones : 1;                                     // 0x0A48(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRequiredBonesUpToDate : 1;                                // 0x0A48(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bAnimTreeInitialised : 1;                                  // 0x0A48(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                            // 0x0A48(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUpdatedKinematics : 1;                                    // 0x0A48(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bUpdatedKinematicsOnce : 1;                                // 0x0A49(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bSetKinematicsSleeping : 1;                                // 0x0A49(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bDedicatedForceTickingEveryFrame : 1;                      // 0x0A49(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSleepKinematicsWhenNotRefreshingBones : 1;                // 0x0A49(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SFPP[0x6];                                     // 0x0A4A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECollisionEnabled>              PreSleepingKinematicsCollisionType;                        // 0x0A50(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WVK4[0x3];                                     // 0x0A51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LineCheckBoundsScale;                                      // 0x0A54(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x0A60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_264G[0x158];                                   // 0x0A70(0x0158) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               SequenceToPlay;                                            // 0x0BC8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	class UAnimationAsset*                             AnimToPlay;                                                // 0x0BD0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bDefaultLooping : 1;                                       // 0x0BD8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bDefaultPlaying : 1;                                       // 0x0BD8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_IRAH[0x3];                                     // 0x0BD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultPosition;                                           // 0x0BDC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              DefaultPlayRate;                                           // 0x0BE0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_K2L0[0xC];                                     // 0x0BE4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastTickTime;                                              // 0x0BF0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	double                                             PreventSoundCuesTime;                                      // 0x0BF8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TCDU[0x10];                                    // 0x0C00(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}



	void Stop();
	void SetupBetweenAnimationBlueprintBlending();
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetClothMaxDistanceScale(float Scale);
	void SetAnimInstanceClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<Engine_EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	bool IsPlayingMontage(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished);
	bool IsPlayingAnimationMontagesOnSlotName(const struct FName& SlotName);
	bool IsPlaying();
	void IncrementIKLegMute(int LegIndex);
	TArray<class APawn*> GetTrueBasedPawns();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	struct FName GetFirstBoneWithChildren();
	float GetClothMaxDistanceScale();
	class UAnimInstance* GetAnimInstance();
	TEnumAsByte<Engine_EAnimationMode> GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	void FlushMorphTargets();
	void DecrementIKLegMute(int LegIndex);
	void ClearMorphTargets();
	bool BPValidBoneToUnhide(int BoneIndex);
	void BPTickPose(float DeltaTime);
	void BPSetBoneModifiers(TArray<struct FBoneModifierNamed> NamedBoneModifiers);
	void BPRefreshBoneTransforms();
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};

// Class Engine.MatineeAnimInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMatineeAnimInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeAnimInterface");
		return ptr;
	}



};

// Class Engine.SkeletalMeshActor
// 0x0040 (FullSize[0x04A8] - InheritedSize[0x0468])
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData_V9M2[0x8];                                     // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bShouldDoAnimNotifies : 1;                                 // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bWakeOnLevelStart : 1;                                     // 0x0470(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_3HEJ[0x7];                                     // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                     // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                               ReplicatedMesh;                                            // 0x0480(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                       // 0x0488(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor)
	class UMaterialInterface*                          ReplicatedMaterial0;                                       // 0x0490(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	class UMaterialInterface*                          ReplicatedMaterial1;                                       // 0x0498(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_YF10[0x8];                                     // 0x04A0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}



	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};

// Class Engine.StaticMeshActor
// 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisableMeshOptimizer : 1;                                 // 0x0470(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_BSSM[0x3];                                     // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bStaticMeshReplicateMovement;                              // 0x0474(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_0ZK6[0x3];                                     // 0x0475(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}



};

// Class Engine.InteractiveFoliageActor
// 0x0060 (FullSize[0x04D8] - InheritedSize[0x0478])
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	struct FVector                                     TouchingActorEntryPosition;                                // 0x0480(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     FoliageVelocity;                                           // 0x048C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     FoliageForce;                                              // 0x0498(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     FoliagePosition;                                           // 0x04A4(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              FoliageDamageImpulseScale;                                 // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FoliageTouchImpulseScale;                                  // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FoliageStiffness;                                          // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FoliageStiffnessQuadratic;                                 // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FoliageDamping;                                            // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDamageImpulse;                                          // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxTouchImpulse;                                           // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxForce;                                                  // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Mass;                                                      // 0x04D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SB47[0x4];                                     // 0x04D4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InteractiveFoliageActor");
		return ptr;
	}



	void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
};

// Class Engine.TargetPoint
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class ATargetPoint : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}



};

// Class Engine.TextRenderActor
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                                // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextRenderActor");
		return ptr;
	}



};

// Class Engine.TriggerBase
// 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                        // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)
	class UBillboardComponent*                         SpriteComponent;                                           // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerBase");
		return ptr;
	}



};

// Class Engine.TriggerBox
// 0x0000 (FullSize[0x0478] - InheritedSize[0x0478])
class ATriggerBox : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerBox");
		return ptr;
	}



};

// Class Engine.TriggerCapsule
// 0x0000 (FullSize[0x0478] - InheritedSize[0x0478])
class ATriggerCapsule : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerCapsule");
		return ptr;
	}



};

// Class Engine.TriggerSphere
// 0x0000 (FullSize[0x0478] - InheritedSize[0x0478])
class ATriggerSphere : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerSphere");
		return ptr;
	}



};

// Class Engine.TrueSkyActorParent
// 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
class ATrueSkyActorParent : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TrueSkyActorParent");
		return ptr;
	}



};

// Class Engine.VectorFieldVolume
// 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                      // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldVolume");
		return ptr;
	}



};

// Class Engine.ApplicationLifecycleComponent
// 0x0050 (FullSize[0x0128] - InheritedSize[0x00D8])
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                         // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                         // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                    // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                   // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                          // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ApplicationLifecycleComponent");
		return ptr;
	}



	void ApplicationLifetimeDelegate__DelegateSignature();
};

// Class Engine.NavigationSystem
// 0x02C0 (FullSize[0x02E8] - InheritedSize[0x0028])
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	class ANavigationData*                             MainNavData;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAutoCreateNavigationData : 1;                             // 0x0030(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bBuildNavigationAtRuntime : 1;                             // 0x0030(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bInitialBuildingLocked : 1;                                // 0x0030(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_ISBV : 1;                                      // 0x0030(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAddPlayersToGenerationSeeds : 1;                          // 0x0030(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSkipAgentHeightCheckWhenPickingNavData : 1;               // 0x0030(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_2VSC[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNavDataConfig>                      SupportedAgents;                                           // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	float                                              DirtyAreasUpdateFreq;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0KG2[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ANavigationData*>                     NavDataSet;                                                // 0x0050(0x0010) (ZeroConstructor)
	TArray<class ANavigationData*>                     NavDataRegistrationQueue;                                  // 0x0060(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_J994[0x50];                                    // 0x0070(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ANavMeshBoundsVolume*>                PendingNavVolumeUpdates;                                   // 0x00C0(0x0010) (ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnNavDataRegisteredEvent;                                  // 0x00D0(0x0010) (ZeroConstructor, Transient, InstancedReference)
	TArray<struct FStringClassReference>               RequiredNavigationDataClassNames;                          // 0x00E0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_2HBT[0x1F8];                                   // 0x00F0(0x01F8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationSystem");
		return ptr;
	}



	void STATIC_SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);
	void STATIC_SimpleMoveToActor(class AController* Controller, class AActor* Goal);
	struct FVector STATIC_ProjectPointToNavigationEx(class UObject* WorldContext, const struct FVector& Point, const struct FVector& Extent, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass);
	void OnNavDataRegistered__DelegateSignature(class ANavigationData* NavData);
	bool STATIC_NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, struct FVector* HitLocation, class UClass* FilterClass, class AController* Querier);
	bool STATIC_IsNavigationBeingBuilt(class UObject* WorldContext);
	struct FVector STATIC_GetRandomReachablePointInMinMaxRadius(class UObject* WorldContext, const struct FVector& Origin, float MinRadius, float MaxRadius, const struct FRandomStream& RandStream, const struct FVector& PathDirection, float DotLimit, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPoint(class UObject* WorldContext, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<Engine_ENavigationQueryResult> STATIC_GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, float* PathLength, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<Engine_ENavigationQueryResult> STATIC_GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, float* PathCost, class ANavigationData* NavData, class UClass* FilterClass);
	class UNavigationPath* STATIC_FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
	class UNavigationPath* STATIC_FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass);
};

// Class Engine.NetworkPredictionInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNetworkPredictionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetworkPredictionInterface");
		return ptr;
	}



};

// Class Engine.FloatingPawnMovement
// 0x0018 (FullSize[0x0158] - InheritedSize[0x0140])
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                  // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Acceleration;                                              // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Deceleration;                                              // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxFrameMovement;                                          // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPositionCorrected : 1;                                    // 0x0150(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_FPY4[0x7];                                     // 0x0151(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FloatingPawnMovement");
		return ptr;
	}



};

// Class Engine.SpectatorPawnMovement
// 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0158(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_V4AF[0x7];                                     // 0x0159(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpectatorPawnMovement");
		return ptr;
	}



};

// Class Engine.WheeledVehicleMovementComponent
// 0x00E8 (FullSize[0x0228] - InheritedSize[0x0140])
class UWheeledVehicleMovementComponent : public UPawnMovementComponent
{
public:
	TArray<struct FWheelSetup>                         WheelSetups;                                               // 0x0140(0x0010) (Edit, ZeroConstructor)
	float                                              Mass;                                                      // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DragCoefficient;                                           // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ChassisWidth;                                              // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ChassisHeight;                                             // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DragArea;                                                  // 0x0160(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              EstimatedMaxEngineSpeed;                                   // 0x0164(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              MaxEngineRPM;                                              // 0x0168(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugDragMagnitude;                                        // 0x016C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     COMOffset;                                                 // 0x0170(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector                                     InertiaTensorScale;                                        // 0x017C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              MinNormalizedTireLoad;                                     // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              MinNormalizedTireLoadFiltered;                             // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              MaxNormalizedTireLoad;                                     // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              MaxNormalizedTireLoadFiltered;                             // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TArray<class UVehicleWheel*>                       Wheels;                                                    // 0x0198(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData_4H97[0x18];                                    // 0x01A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECollisionChannel>              CollisionChannel;                                          // 0x01C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VMEO[0x3];                                     // 0x01C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReplicatedVehicleState                     ReplicatedState;                                           // 0x01C4(0x0014) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VAEO[0x4];                                     // 0x01D8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RawSteeringInput;                                          // 0x01DC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              RawThrottleInput;                                          // 0x01E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bRawHandbrakeInput : 1;                                    // 0x01E4(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bRawGearUpInput : 1;                                       // 0x01E4(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bRawGearDownInput : 1;                                     // 0x01E4(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_61GC[0x3];                                     // 0x01E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SteeringInput;                                             // 0x01E8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              ThrottleInput;                                             // 0x01EC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              BrakeInput;                                                // 0x01F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              HandbrakeInput;                                            // 0x01F4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              IdleBrakeInput;                                            // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StopThreshold;                                             // 0x01FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WrongDirectionThreshold;                                   // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVehicleInputRate                           ThrottleInputRate;                                         // 0x0204(0x0008) (Edit, AdvancedDisplay)
	struct FVehicleInputRate                           BrakeInputRate;                                            // 0x020C(0x0008) (Edit, AdvancedDisplay)
	struct FVehicleInputRate                           HandbrakeInputRate;                                        // 0x0214(0x0008) (Edit, AdvancedDisplay)
	struct FVehicleInputRate                           SteeringInputRate;                                         // 0x021C(0x0008) (Edit, AdvancedDisplay)
	unsigned char                                      UnknownData_DEAO[0x4];                                     // 0x0224(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WheeledVehicleMovementComponent");
		return ptr;
	}



	void SetUseAutoGears(bool bUseAuto);
	void SetThrottleInput(float Throttle);
	void SetTargetGear(int GearNum, bool bImmediate);
	void SetSteeringInput(float Steering);
	void SetHandbrakeInput(bool bNewHandbrake);
	void SetGearUp(bool bNewGearUp);
	void SetGearDown(bool bNewGearDown);
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);
	bool GetUseAutoGears();
	float GetThrottleInput();
	int GetTargetGear();
	float GetForwardSpeed();
	float GetEngineRotationSpeed();
	float GetEngineMaxRotationSpeed();
	int GetCurrentGear();
};

// Class Engine.WheeledVehicleMovementComponent4W
// 0x0150 (FullSize[0x0378] - InheritedSize[0x0228])
class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
{
public:
	struct FVehicleEngineData                          EngineSetup;                                               // 0x0228(0x0088) (Edit)
	struct FVehicleDifferential4WData                  DifferentialSetup;                                         // 0x02B0(0x001C) (Edit)
	unsigned char                                      UnknownData_KDU9[0x4];                                     // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVehicleTransmissionData                    TransmissionSetup;                                         // 0x02D0(0x0030) (Edit)
	struct FRuntimeFloatCurve                          SteeringCurve;                                             // 0x0300(0x0070) (Edit)
	float                                              AckermannAccuracy;                                         // 0x0370(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_FIC5[0x4];                                     // 0x0374(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WheeledVehicleMovementComponent4W");
		return ptr;
	}



};

// Class Engine.ProjectileMovementComponent
// 0x0078 (FullSize[0x0190] - InheritedSize[0x0118])
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              MinLifespanToUpdate;                                       // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InitialSpeed;                                              // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxSpeed;                                                  // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRotationFollowsVelocity : 1;                              // 0x0124(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldBounce : 1;                                         // 0x0124(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                          // 0x0124(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x0124(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bTriggerBounceImpactNotification : 1;                      // 0x0124(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bIsHomingProjectile : 1;                                   // 0x0124(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_Y19W[0x3];                                     // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ProjectileDampingFactor;                                   // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FallingProjectileDampingFactor;                            // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProjectileGravityScale;                                    // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Buoyancy;                                                  // 0x0134(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PreviousVelocity;                                          // 0x0138(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Bounciness;                                                // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Friction;                                                  // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BounceVelocityStopSimulatingThreshold;                     // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                        // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                          // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                               // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                     // 0x0174(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor)
	struct FVector                                     HomingTargetComponentOffset;                               // 0x017C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor)
	float                                              MaxSimulationTimeStep;                                     // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxSimulationIterations;                                   // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ProjectileMovementComponent");
		return ptr;
	}



	void StopSimulating(const struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
};

// Class Engine.RotatingMovementComponent
// 0x0020 (FullSize[0x0138] - InheritedSize[0x0118])
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                              // 0x0118(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PivotTranslation;                                          // 0x0124(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRotationInLocalSpace : 1;                                 // 0x0130(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_331P[0x7];                                     // 0x0131(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RotatingMovementComponent");
		return ptr;
	}



};

// Class Engine.NavRelevantComponent
// 0x0028 (FullSize[0x0100] - InheritedSize[0x00D8])
class UNavRelevantComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_VKCJ[0x24];                                    // 0x00D8(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bNavigationRelevant : 1;                                   // 0x00FC(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_L4OE[0x3];                                     // 0x00FD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavRelevantComponent");
		return ptr;
	}



	void SetNavigationRelevancy(bool bRelevant);
};

// Class Engine.NavLinkCustomInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavLinkCustomInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkCustomInterface");
		return ptr;
	}



};

// Class Engine.NavLinkCustomComponent
// 0x0090 (FullSize[0x0190] - InheritedSize[0x0100])
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	unsigned char                                      UnknownData_EWDL[0x8];                                     // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           NavLinkUserId;                                             // 0x0108(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_YOLR[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EnabledAreaClass;                                          // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      DisabledAreaClass;                                         // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LinkRelativeStart;                                         // 0x0120(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LinkRelativeEnd;                                           // 0x012C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TEnumAsByte<Engine_ENavLinkDirection>              LinkDirection;                                             // 0x0138(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_EQQC[0x3];                                     // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLinkEnabled : 1;                                          // 0x013C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bNotifyWhenEnabled : 1;                                    // 0x013C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bNotifyWhenDisabled : 1;                                   // 0x013C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bCreateBoxObstacle : 1;                                    // 0x013C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      UnknownData_DRD8[0x3];                                     // 0x013D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ObstacleOffset;                                            // 0x0140(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     ObstacleExtent;                                            // 0x014C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      ObstacleAreaClass;                                         // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              BroadcastRadius;                                           // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              BroadcastInterval;                                         // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TEnumAsByte<Engine_ECollisionChannel>              BroadcastChannel;                                          // 0x0168(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_W1OQ[0x27];                                    // 0x0169(0x0027) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkCustomComponent");
		return ptr;
	}



};

// Class Engine.NavModifierComponent
// 0x0018 (FullSize[0x0118] - InheritedSize[0x0100])
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	class UClass*                                      AreaClass;                                                 // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YY78[0x10];                                    // 0x0108(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavModifierComponent");
		return ptr;
	}



};

// Class Engine.PawnNoiseEmitterComponent
// 0x0020 (FullSize[0x00F8] - InheritedSize[0x00D8])
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	struct FVector                                     LastRemoteNoisePosition;                                   // 0x00D8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoiseLifetime;                                             // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastRemoteNoiseVolume;                                     // 0x00E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastRemoteNoiseTime;                                       // 0x00EC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastLocalNoiseVolume;                                      // 0x00F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastLocalNoiseTime;                                        // 0x00F4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PawnNoiseEmitterComponent");
		return ptr;
	}



	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
};

// Class Engine.PhysicsHandleComponent
// 0x00A8 (FullSize[0x0180] - InheritedSize[0x00D8])
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                          // 0x00D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9SDW[0x10];                                    // 0x00E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearDamping;                                             // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LinearStiffness;                                           // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AngularDamping;                                            // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AngularStiffness;                                          // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3JXB[0x60];                                    // 0x0100(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpolationSpeed;                                        // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FAPH[0x1C];                                    // 0x0164(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsHandleComponent");
		return ptr;
	}



	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void ReleaseComponent();
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
};

// Class Engine.AtmosphericFogComponent
// 0x01C8 (FullSize[0x03A0] - InheritedSize[0x01D8])
class UAtmosphericFogComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_P1MJ[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	float                                              FogMultiplier;                                             // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DensityMultiplier;                                         // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DensityOffset;                                             // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DistanceScale;                                             // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AltitudeScale;                                             // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DistanceOffset;                                            // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              GroundOffset;                                              // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              StartDistance;                                             // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SunDiscScale;                                              // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyInscatterScale;                                         // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DefaultBrightness;                                         // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FColor                                      DefaultLightColor;                                         // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bDisableSunDisk : 1;                                       // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor)
	unsigned char                                      bDisableGroundScattering : 1;                              // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor)
	unsigned char                                      bUseDayCycle : 1;                                          // 0x020C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor)
	unsigned char                                      UnknownData_TM01[0x3];                                     // 0x020D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UTexture2D*>                          LossTextures;                                              // 0x0210(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UTexture2D*>                          ScatterTextures;                                           // 0x0220(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	class UTextureRenderTarget2D*                      External_ScatterRT;                                        // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTextureRenderTarget2D*                      External_LossRT;                                           // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                                LUT_TintScatter;                                           // 0x0240(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FLinearColor                                LUT_TintLoss;                                              // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	int                                                OvertimeIndex0;                                            // 0x0260(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                OvertimeIndex1;                                            // 0x0264(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              OvertimeInterpolation;                                     // 0x0268(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                          // 0x026C(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, Protected)
	class UTexture2D*                                  TransmittanceTexture;                                      // 0x0298(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  IrradianceTexture;                                         // 0x02A0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0IJP[0xF8];                                    // 0x02A8(0x00F8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AtmosphericFogComponent");
		return ptr;
	}



	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogTexturesDirectly(class UTexture2D* ScatterTexture0, class UTexture2D* ScatterTexture1, class UTexture2D* LossTexture0, class UTexture2D* LossTexture1, float InInterpolation);
	void SetFogOverTimeIndices(int Texture0, int Texture1, float InInterpolation);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};

// Class Engine.SoundAttenuation
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class USoundAttenuation : public UObject
{
public:
	struct FAttenuationSettings                        Attenuation;                                               // 0x0028(0x0034) (Edit)
	unsigned char                                      UnknownData_03GH[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundAttenuation");
		return ptr;
	}



};

// Class Engine.AudioComponent
// 0x00C8 (FullSize[0x02A0] - InheritedSize[0x01D8])
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                                     // 0x01D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                        // 0x01E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay)
	class USoundClass*                                 SoundClassOverride;                                        // 0x01F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAutoPlay : 1;                                             // 0x01F8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bAutoDestroy : 1;                                          // 0x01F8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                               // 0x01F8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                          // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAllowSpatialization : 1;                                  // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsUISound : 1;                                            // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsAmbient : 1;                                            // 0x01F8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_8RPF[0x3];                                     // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PitchModulationMin;                                        // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitchModulationMax;                                        // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeModulationMin;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeModulationMax;                                       // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMultiplier;                                          // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitchMultiplier;                                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HighFrequencyGainMultiplier;                               // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0218(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAttenuationSettings                        AttenuationOverrides;                                      // 0x0220(0x0034) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_5K47[0x4];                                     // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioFinished;                                           // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_O4HW[0x20];                                    // 0x0268(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptDelegate                             OnQueueSubtitles;                                          // 0x0288(0x0010) (ZeroConstructor, InstancedReference, NoDestructor)
	unsigned char                                      UnknownData_96YL[0x8];                                     // 0x0298(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}



	void Stop();
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetIntParameter(const struct FName& InName, int InInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void Play(float StartTime);
	void OnQueueSubtitles__DelegateSignature(TArray<struct FSubtitleCue> Subtitles, float CueDuration);
	void OnAudioFinished__DelegateSignature();
	bool IsPlaying();
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings);
};

// Class Engine.CameraComponent
// 0x0378 (FullSize[0x0550] - InheritedSize[0x01D8])
class UCameraComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_VOK1[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	float                                              OrthoWidth;                                                // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AspectRatio;                                               // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x01E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x01E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_SF6G[0x3];                                     // 0x01E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECameraProjectionMode>          ProjectionMode;                                            // 0x01E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_WZRZ[0x3];                                     // 0x01E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PostProcessBlendWeight;                                    // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x01F0(0x0358) (Edit, BlueprintVisible, Interp)
	unsigned char                                      bUseControllerViewRotation : 1;                            // 0x0548(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_1QHP[0x7];                                     // 0x0549(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraComponent");
		return ptr;
	}



	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
};

// Class Engine.ChildActorComponent
// 0x0028 (FullSize[0x0200] - InheritedSize[0x01D8])
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                           // 0x01D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                      ChildActor;                                                // 0x01E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient)
	unsigned char                                      UnknownData_ZU16[0x18];                                    // 0x01E8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ChildActorComponent");
		return ptr;
	}



};

// Class Engine.DecalComponent
// 0x0028 (FullSize[0x0200] - InheritedSize[0x01D8])
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                             // 0x01D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SortOrder;                                                 // 0x01E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2RS2[0x1C];                                    // 0x01E4(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}



	void SetSortOrder(int Value);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void CheckDestructionFirst();
	void CheckDestruction();
};

// Class Engine.ExponentialHeightFogComponent
// 0x0048 (FullSize[0x0220] - InheritedSize[0x01D8])
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_LHNN[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	float                                              Priority;                                                  // 0x01DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FogDensity;                                                // 0x01E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FLinearColor                                FogInscatteringColor;                                      // 0x01E4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DirectionalInscatteringExponent;                           // 0x01F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DirectionalInscatteringStartDistance;                      // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FLinearColor                                DirectionalInscatteringColor;                              // 0x01FC(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FogHeightFalloff;                                          // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FogMaxOpacity;                                             // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              StartDistance;                                             // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              AdditionalStartDistance;                                   // 0x0218(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VISF[0x4];                                     // 0x021C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		return ptr;
	}



	void SetStartDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
	void SetAdditionalStartDistance(float Value);
};

// Class Engine.LightComponentBase
// 0x0038 (FullSize[0x0210] - InheritedSize[0x01D8])
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                 // 0x01D8(0x0010) (ZeroConstructor)
	float                                              Brightness;                                                // 0x01E8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              Intensity;                                                 // 0x01EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FColor                                      LightColor;                                                // 0x01F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              ExtraIntensity;                                            // 0x01F4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bAffectsWorld : 1;                                         // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      CastShadows : 1;                                           // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseShadowmapCache : 1;                                    // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOnlyCastShadowmapsWhenCached : 1;                         // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bShadowmapCachesDynamicGeometry : 1;                       // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAlwaysRenderInCache : 1;                                  // 0x01F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_2EF8[0x3];                                     // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShadowDiscardDynamicObjectsDistance;                       // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowTexelSizeMultiplier;                                 // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ObjectLayerMask;                                           // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UseBlackLightBuffer : 1;                                   // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      AlwaysProjectShadows : 1;                                  // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UseAmbientLightInfo : 1;                                   // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UseSpotLightInfo : 1;                                      // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      CastStaticShadows : 1;                                     // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      CastDynamicShadows : 1;                                    // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAffectTranslucentLighting : 1;                            // 0x0208(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPrecomputedLightingIsValid : 1;                           // 0x0208(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_E1CV[0x3];                                     // 0x0209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IndirectLightingIntensity;                                 // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightComponentBase");
		return ptr;
	}



};

// Class Engine.LightComponent
// 0x015C (FullSize[0x036C] - InheritedSize[0x0210])
class ULightComponent : public ULightComponentBase
{
public:
	int                                                ShadowMapChannel;                                          // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7MPX[0x4];                                     // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SourceRadius;                                              // 0x0218(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              MinRoughness;                                              // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              ShadowBias;                                                // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              ShadowSharpen;                                             // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      InverseSquaredFalloff : 1;                                 // 0x0228(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0228(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      CastTranslucentShadows : 1;                                // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x0228(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_I35C[0x3];                                     // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ShadowInjectionSourceMask;                                 // 0x022C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      ShadowInjectionTargetMask;                                 // 0x022D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_IXVE[0x2];                                     // 0x022E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShadowDistanceFadeFraction;                                // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              TranslucencyColorMultiplier;                               // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	class UMaterialInterface*                          LightFunctionMaterial;                                     // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LightFunctionScale;                                        // 0x0240(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I4WH[0x4];                                     // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureLightProfile*                        IESTexture;                                                // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseIESBrightness : 1;                                     // 0x0258(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_B9LA[0x3];                                     // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IESBrightnessScale;                                        // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              LightFunctionFadeDistance;                                 // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DisabledBrightness;                                        // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnableLightShaftBloom : 1;                                // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_8WY8[0x3];                                     // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BloomScale;                                                // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BloomThreshold;                                            // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      BloomTint;                                                 // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseRayTracedDistanceFieldShadows;                         // 0x0278(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseShadowmapsWithRayTracedDFS;                            // 0x0279(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y8QS[0x2];                                     // 0x027A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShadowmapWithDFSMaxViewDistance;                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RayStartOffsetDepthScale;                                  // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_FMND[0xE8];                                    // 0x0284(0x00E8) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}



	void SetShadowDistanceFade(float NewFadeFraction);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetCastShadows(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
};

// Class Engine.DirectionalLightComponent
// 0x0064 (FullSize[0x03D0] - InheritedSize[0x036C])
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              OcclusionMaskDarkness;                                     // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OcclusionDepthRange;                                       // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LightShaftOverrideDirection;                               // 0x0374(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              WholeSceneDynamicShadowRadius;                             // 0x0380(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              DynamicShadowDistanceMovableLight;                         // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DynamicShadowDistanceStationaryLight;                      // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                DynamicShadowCascades;                                     // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CascadeDistributionExponent;                               // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CascadeTransitionFraction;                                 // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowDistanceFadeoutFraction;                             // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                     // 0x039C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_UWPP[0x3];                                     // 0x039D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FarShadowCascadeCount;                                     // 0x03A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FarShadowDistance;                                         // 0x03A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientShadowIntensityMultiplier;                          // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistanceFieldShadowDistance;                               // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LightSourceAngle;                                          // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                         // 0x03B4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                             // 0x03C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_C4T1[0xB];                                     // 0x03C5(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}



	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
};

// Class Engine.PointLightComponent
// 0x0024 (FullSize[0x0390] - InheritedSize[0x036C])
class UPointLightComponent : public ULightComponent
{
public:
	float                                              AttenuationRadius;                                         // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              MaxDrawDistance;                                           // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseInverseSquaredFalloff : 1;                             // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_NP7F[0x3];                                     // 0x0375(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LightFalloffExponent;                                      // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay)
	float                                              SourceRadius;                                              // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SourceLength;                                              // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLightmassPointLightSettings                LightmassSettings;                                         // 0x0384(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}



	void SetSourceRadius(float bNewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetAttenuationRadius(float NewRadius);
};

// Class Engine.SpotLightComponent
// 0x0030 (FullSize[0x03C0] - InheritedSize[0x0390])
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                            // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OuterConeAngle;                                            // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LightShaftConeAngle;                                       // 0x0398(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowNearScale;                                           // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowFarScale;                                            // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InfluenceScale;                                            // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InfluenceRange;                                            // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InfluenceExponent;                                         // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxInjectedWholeSceneDynamicShadowRadius;                  // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxInjectedShadowDistanceFadeoutFraction;                  // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SB02[0x8];                                     // 0x03B8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// Class Engine.SkyLightComponent
// 0x01A0 (FullSize[0x03B0] - InheritedSize[0x0210])
class USkyLightComponent : public ULightComponentBase
{
public:
	float                                              AtmosphericFogIntensity;                                   // 0x0210(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TrueSkyBrightness;                                         // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TrueSkyColorMultiplier;                                    // 0x0218(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESkyLightSourceType>            SourceType;                                                // 0x0224(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GZNF[0x3];                                     // 0x0225(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                Cubemap;                                                   // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SkyDistanceThreshold;                                      // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bBakeAndStream : 1;                                        // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bLockCaptureData : 1;                                      // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_QCXK[0x3];                                     // 0x0235(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bLowerHemisphereIsBlack;                                   // 0x0238(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YQ9J[0x3];                                     // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OcclusionMaxDistance;                                      // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Contrast;                                                  // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinOcclusion;                                              // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ContrastTangentMult;                                       // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ContrastTangentShift;                                      // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      OcclusionTint;                                             // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MMPH[0x15C];                                   // 0x0254(0x015C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}



	void SetOcclusionTint(const struct FColor& InTint);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
};

// Class Engine.NavigationGraphNodeComponent
// 0x0028 (FullSize[0x0200] - InheritedSize[0x01D8])
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	struct FNavGraphNode                               Node;                                                      // 0x01D8(0x0018)
	class UNavigationGraphNodeComponent*               NextNodeComponent;                                         // 0x01F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	class UNavigationGraphNodeComponent*               PrevNodeComponent;                                         // 0x01F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationGraphNodeComponent");
		return ptr;
	}



};

// Class Engine.PhysicsThrusterComponent
// 0x0008 (FullSize[0x01E0] - InheritedSize[0x01D8])
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_43AG[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	float                                              ThrustStrength;                                            // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsThrusterComponent");
		return ptr;
	}



};

// Class Engine.PostProcessComponent
// 0x0378 (FullSize[0x0550] - InheritedSize[0x01D8])
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_C7LO[0x8];                                     // 0x01D8(0x0008) Fix Super Size
	struct FPostProcessSettings                        Settings;                                                  // 0x01E0(0x0358) (Edit, BlueprintVisible, Interp)
	float                                              Priority;                                                  // 0x0538(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BlendRadius;                                               // 0x053C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              BlendWeight;                                               // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0544(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUnbound : 1;                                              // 0x0544(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bWaterPP : 1;                                              // 0x0544(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_OGFH[0xB];                                     // 0x0545(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PostProcessComponent");
		return ptr;
	}



};

// Class Engine.ArrowComponent
// 0x0018 (FullSize[0x0680] - InheritedSize[0x0668])
class UArrowComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_F724[0x4];                                     // 0x0668(0x0004) Fix Super Size
	float                                              ArrowSize;                                                 // 0x066C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsScreenSizeScaled;                                       // 0x0670(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PTXT[0x3];                                     // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScreenSize;                                                // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bTreatAsASprite : 1;                                       // 0x0678(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_ZTPW[0x7];                                     // 0x0679(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}



	void SetArrowColor_New(const struct FLinearColor& NewColor);
	void SetArrowColor_DEPRECATED(const struct FColor& NewColor);
};

// Class Engine.BillboardComponent
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                    // 0x0668(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsScreenSizeScaled : 1;                                   // 0x0670(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_IYM7[0x3];                                     // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScreenSize;                                                // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              U;                                                         // 0x0678(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UL;                                                        // 0x067C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              V;                                                         // 0x0680(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VL;                                                        // 0x0684(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YT5S[0x8];                                     // 0x0688(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BillboardComponent");
		return ptr;
	}



	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};

// Class Engine.EdGraphPin
// 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
class UEdGraphPin : public UObject
{
public:
	struct FString                                     PinName;                                                   // 0x0028(0x0010) (ZeroConstructor)
	struct FText                                       PinFriendlyName;                                           // 0x0038(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_SFDC[0x10];                                    // 0x0038(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FString                                     PinToolTip;                                                // 0x0060(0x0010) (ZeroConstructor)
	TEnumAsByte<Engine_EEdGraphPinDirection>           Direction;                                                 // 0x0070(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9VOU[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FEdGraphPinType                             PinType;                                                   // 0x0078(0x0050)
	struct FString                                     DefaultValue;                                              // 0x00C8(0x0010) (ZeroConstructor)
	struct FString                                     AutogeneratedDefaultValue;                                 // 0x00D8(0x0010) (ZeroConstructor)
	class UObject*                                     DefaultObject;                                             // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FText                                       DefaultTextValue;                                          // 0x00F0(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_IFG0[0x10];                                    // 0x00F0(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TArray<class UEdGraphPin*>                         LinkedTo;                                                  // 0x0118(0x0010) (ZeroConstructor)
	TArray<class UEdGraphPin*>                         SubPins;                                                   // 0x0128(0x0010) (ZeroConstructor)
	class UEdGraphPin*                                 ParentPin;                                                 // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphPin");
		return ptr;
	}



};

// Class Engine.Blueprint
// 0x0070 (FullSize[0x00C0] - InheritedSize[0x0050])
class UBlueprint : public UBlueprintCore
{
public:
	unsigned char                                      bRecompileOnLoad : 1;                                      // 0x0050(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_KW1X[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ParentClass;                                               // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	class UObject*                                     PRIVATE_InnermostPreviousCDO;                              // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bHasBeenRegenerated : 1;                                   // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                 // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_1AGY[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                        // 0x0078(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x0088(0x0010) (ZeroConstructor)
	TEnumAsByte<Engine_EBlueprintType>                 BlueprintType;                                             // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_04J8[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlueprintSystemVersion;                                    // 0x009C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_40MT[0x20];                                    // 0x00A0(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Blueprint");
		return ptr;
	}



};

// Class Engine.BrushComponent
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                     // 0x0668(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBodySetup*                                  BrushBodySetup;                                            // 0x0670(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bBodySetupLocked : 1;                                      // 0x0678(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSolidWhenShownInGame : 1;                                 // 0x0678(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_9F1V[0x3];                                     // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PrePivot;                                                  // 0x067C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5JOA[0x8];                                     // 0x0688(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}



	struct FVector GetBoxBrushXYZ();
};

// Class Engine.DrawFrustumComponent
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_0NDQ[0x4];                                     // 0x0668(0x0004) Fix Super Size
	float                                              FrustumAngle;                                              // 0x066C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FrustumAspectRatio;                                        // 0x0670(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FrustumStartDist;                                          // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FrustumEndDist;                                            // 0x0678(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A0GJ[0x4];                                     // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture*                                    Texture;                                                   // 0x0680(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_REN9[0x8];                                     // 0x0688(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}



};

// Class Engine.LandscapeComponent
// 0x0158 (FullSize[0x07C0] - InheritedSize[0x0668])
class ULandscapeComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_09NJ[0x4];                                     // 0x0668(0x0004) Fix Super Size
	int                                                SectionBaseY;                                              // 0x066C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	int                                                ComponentSizeQuads;                                        // 0x0670(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubsectionSizeQuads;                                       // 0x0674(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumSubsections;                                            // 0x0678(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OEUF[0x4];                                     // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          OverrideMaterial;                                          // 0x0680(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          OverrideHoleMaterial;                                      // 0x0688(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstance*                           MaterialInstance;                                          // 0x0690(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient)
	TArray<struct FWeightmapLayerAllocationInfo>       WeightmapLayerAllocations;                                 // 0x0698(0x0010) (ZeroConstructor)
	TArray<class UTexture2D*>                          WeightmapTextures;                                         // 0x06A8(0x0010) (ZeroConstructor, TextExportTransient)
	class UTexture2D*                                  XYOffsetmapTexture;                                        // 0x06B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient)
	struct FVector4                                    WeightmapScaleBias;                                        // 0x06C0(0x0010) (ZeroConstructor)
	float                                              WeightmapSubsectionOffset;                                 // 0x06D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BMBY[0xC];                                     // 0x06D4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector4                                    HeightmapScaleBias;                                        // 0x06E0(0x0010) (ZeroConstructor)
	class UTexture2D*                                  HeightmapTexture;                                          // 0x06F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient)
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                                     // 0x06F8(0x001C) (ZeroConstructor, Deprecated)
	struct FBox                                        CachedLocalBox;                                            // 0x0714(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TLazyObjectPtr<class ULandscapeHeightfieldCollisionComponent> CollisionComponent;                                        // 0x0730(0x001C) (ExportObject, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9RSP[0x4];                                     // 0x074C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGuid>                               IrrelevantLights;                                          // 0x0750(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_NBWJ[0x10];                                    // 0x0760(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CollisionMipLevel;                                         // 0x0770(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StaticLightingResolution;                                  // 0x0774(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ForcedLOD;                                                 // 0x0778(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      NeighborLOD[0x8];                                          // 0x077C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                LODBias;                                                   // 0x0784(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      NeighborLODBias[0x8];                                      // 0x0788(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       StateId;                                                   // 0x0790(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_PULG[0x20];                                    // 0x07A0(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeComponent");
		return ptr;
	}



};

// Class Engine.LandscapeGizmoRenderComponent
// 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_JIHM[0x8];                                     // 0x0668(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeGizmoRenderComponent");
		return ptr;
	}



};

// Class Engine.BoxComponent
// 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                                     BoxExtent;                                                 // 0x0688(0x000C) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_WIRV[0xC];                                     // 0x0694(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoxComponent");
		return ptr;
	}



	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};

// Class Engine.CapsuleComponent
// 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
class UCapsuleComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData_PFLW[0x4];                                     // 0x0688(0x0004) Fix Super Size
	float                                              CapsuleRadius;                                             // 0x068C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              CapsuleHeight;                                             // 0x0690(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_K08D[0xC];                                     // 0x0694(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CapsuleComponent");
		return ptr;
	}



	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight();
};

// Class Engine.SphereComponent
// 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
class USphereComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData_YGI4[0x8];                                     // 0x0688(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SphereComponent");
		return ptr;
	}



	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};

// Class Engine.DrawSphereComponent
// 0x0000 (FullSize[0x0690] - InheritedSize[0x0690])
class UDrawSphereComponent : public USphereComponent
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}



};

// Class Engine.TextRenderComponent
// 0x0048 (FullSize[0x06B0] - InheritedSize[0x0668])
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	struct FString                                     Text;                                                      // 0x0668(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UMaterialInterface*                          TextMaterial;                                              // 0x0678(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFont*                                       Font;                                                      // 0x0680(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EHorizTextAligment>             HorizontalAlignment;                                       // 0x0688(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EVerticalTextAligment>          VerticalAlignment;                                         // 0x0689(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B3YC[0x2];                                     // 0x068A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      TextRenderColor;                                           // 0x068C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              XScale;                                                    // 0x0690(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              YScale;                                                    // 0x0694(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WorldSize;                                                 // 0x0698(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InvDefaultSize;                                            // 0x069C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HorizSpacingAdjust;                                        // 0x06A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAlwaysRenderAsText : 1;                                   // 0x06A4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_D4UN[0xB];                                     // 0x06A5(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextRenderComponent");
		return ptr;
	}



	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVerticalAlignment(TEnumAsByte<Engine_EVerticalTextAligment> Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<Engine_EHorizTextAligment> Value);
	void SetFont(class UFont* Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
};

// Class Engine.VectorFieldComponent
// 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                               // 0x0668(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Intensity;                                                 // 0x0670(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              Tightness;                                                 // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPreviewVectorField : 1;                                   // 0x0678(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_F536[0x17];                                    // 0x0679(0x0017) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldComponent");
		return ptr;
	}



	void SetIntensity(float NewIntensity);
};

// Class Engine.RadialForceComponent
// 0x0038 (FullSize[0x0210] - InheritedSize[0x01D8])
class URadialForceComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_YING[0x8];                                     // 0x01D8(0x0008) Fix Super Size
	float                                              ImpulseStrength;                                           // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bImpulseVelChange : 1;                                     // 0x01E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_KWBX[0x3];                                     // 0x01E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStrength;                                             // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DestructibleDamage;                                        // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bForceEnabled : 1;                                         // 0x01F0(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_BFFA[0x7];                                     // 0x01F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       ObjectTypesToAffect;                                       // 0x01F8(0x0010) (Edit, ZeroConstructor, Protected)
	unsigned char                                      UnknownData_FYPH[0x8];                                     // 0x0208(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RadialForceComponent");
		return ptr;
	}



	void RemoveObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
};

// Class Engine.ReflectionCaptureComponent
// 0x01C8 (FullSize[0x03A0] - InheritedSize[0x01D8])
class UReflectionCaptureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_1D55[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	float                                              CaptureBrightness;                                         // 0x01DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AReflectionCapture*                          CaptureParent;                                             // 0x01E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       PresistentCaptureParent;                                   // 0x01E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTextureCube*                                AmbientCubemap;                                            // 0x01F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SkyColor;                                                  // 0x01F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FLinearColor                                GroundColor;                                               // 0x0208(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              SkyIBLIntensity;                                           // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutDistanceStart;                                      // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutDistanceEnd;                                        // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseSeperateShadowFadeOut;                                 // 0x0224(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QTVF[0x3];                                     // 0x0225(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShadowFadeOutDistanceStart;                                // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowFadeOutDistanceEnd;                                  // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Bounces;                                                   // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NVP8[0x4];                                     // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      BouncesIntensity;                                          // 0x0238(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              AtmosphericFogIntensity;                                   // 0x0248(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TheTrueSkyBrightness;                                      // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TrueSkyColorMultiplier;                                    // 0x0250(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bBakeAndStream : 1;                                        // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseGlobalBrightness : 1;                                  // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bLockCaptureData : 1;                                      // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseGlobalGroundColorMultiplier : 1;                       // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseGlobalSkyColorMultiplier : 1;                          // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseGlobalSkyIntensityMultiplier : 1;                      // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseParentBrightness : 1;                                  // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_CCJT[0x3];                                     // 0x025D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ParentBrightnessMultiplier;                                // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SelfAndChildBrightnessMultiplier;                          // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseParentAmbientLightInfo : 1;                            // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bCaptureAmbientShadow : 1;                                 // 0x0268(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_ESL6[0x3];                                     // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AmbientShadowIntensity;                                    // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientLightInfluence;                                     // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientShadowNear;                                         // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientShadowFar;                                          // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientShadowFadeDistanceFraction;                         // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                                AmbientTranslucencyColor;                                  // 0x0280(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                AmbientShadowCaptureObjectLayerMask;                       // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmbientShadowCaptureScale;                                 // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxAmbientShadowCaptureSize;                               // 0x0298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EReflectionDFAOOption>          DFAOOption;                                                // 0x029C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_51YR[0xBB];                                    // 0x029D(0x00BB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       StateId;                                                   // 0x0358(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_V5XM[0x38];                                    // 0x0368(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReflectionCaptureComponent");
		return ptr;
	}



	void SetBrightness(float NewBrightness);
	void ForceUpdateReflectionCapture();
};

// Class Engine.BoxReflectionCaptureComponent
// 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              BoxTransitionDistance;                                     // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DYLS[0x4];                                     // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBoxComponent*                               PreviewInfluenceBox;                                       // 0x03A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MQFN[0x8];                                     // 0x03B8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoxReflectionCaptureComponent");
		return ptr;
	}



};

// Class Engine.PlaneReflectionCaptureComponent
// 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadiusScale;                                      // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OQVU[0x4];                                     // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x03A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IP9U[0x8];                                     // 0x03B8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlaneReflectionCaptureComponent");
		return ptr;
	}



};

// Class Engine.SphereReflectionCaptureComponent
// 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadius;                                           // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UsedWithDFAOInfluenceRadiusMultiplier;                     // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Falloff;                                                   // 0x03A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShadowFallOff;                                             // 0x03AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PercentOfRadiusToStartFalloff;                             // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CaptureDistanceScale;                                      // 0x03B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x03B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SphereReflectionCaptureComponent");
		return ptr;
	}



};

// Class Engine.SceneCaptureComponent
// 0x0018 (FullSize[0x01F0] - InheritedSize[0x01D8])
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                          // 0x01D8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	bool                                               bCaptureEveryFrame;                                        // 0x01E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P53I[0x3];                                     // 0x01E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxViewDistanceOverride;                                   // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}



	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor);
};

// Class Engine.SceneCaptureComponent2D
// 0x0380 (FullSize[0x0570] - InheritedSize[0x01F0])
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	float                                              FOVAngle;                                                  // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_MRTS[0x4];                                     // 0x01F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureRenderTarget2D*                      TextureTarget;                                             // 0x01F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   DesiredTargetSize;                                         // 0x0200(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESceneCaptureSource>            CaptureSource;                                             // 0x0208(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_4IEN[0x7];                                     // 0x0209(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0210(0x0358) (Edit, BlueprintVisible, Interp)
	float                                              PostProcessBlendWeight;                                    // 0x0568(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_A8WV[0x4];                                     // 0x056C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureComponent2D");
		return ptr;
	}



};

// Class Engine.SceneCaptureComponentCube
// 0x0010 (FullSize[0x0200] - InheritedSize[0x01F0])
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                             // 0x01F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5JBZ[0x8];                                     // 0x01F8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureComponentCube");
		return ptr;
	}



};

// Class Engine.SplineComponent
// 0x0048 (FullSize[0x0220] - InheritedSize[0x01D8])
class USplineComponent : public USceneComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                                // 0x01D8(0x0010) (ZeroConstructor)
	struct FInterpCurveFloat                           SplineReparamTable;                                        // 0x01E8(0x0010) (ZeroConstructor, Transient, TextExportTransient)
	bool                                               bAllowSplineEditingPerInstance;                            // 0x01F8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bShowSplineDirectionOnAllPoints;                           // 0x01F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bAlwaysDrawSplineInEditorViewport;                         // 0x01FA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_KOUR[0x1];                                     // 0x01FB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SplineDirectionArrowSize;                                  // 0x01FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FLinearColor                                SplineDrawColor;                                           // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                ReparamStepsPerSegment;                                    // 0x0210(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              Duration;                                                  // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bStationaryEndpoints;                                      // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_IRKF[0x7];                                     // 0x0219(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SplineComponent");
		return ptr;
	}



	void SetWorldSplinePointsAndType(TArray<struct FVector> Points, TEnumAsByte<Engine_ESplinePointType> Type);
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineWorldPoints(TArray<struct FVector> Points);
	void SetSplinePointTypeAllPoints(TEnumAsByte<Engine_ESplinePointType> Type);
	void SetSplinePointType(int PointIndex, TEnumAsByte<Engine_ESplinePointType> Type);
	void SetSplineLocalPoints(TArray<struct FVector> Points);
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	TEnumAsByte<Engine_ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	int GetNumSplinePoints();
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints();
	void AddSplineWorldPoint(const struct FVector& Position);
	void AddSplineLocalPoint(const struct FVector& Position);
};

// Class Engine.SpringArmComponent
// 0x0078 (FullSize[0x0250] - InheritedSize[0x01D8])
class USpringArmComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_E0GM[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	struct FVector                                     SocketOffset;                                              // 0x01DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TargetOffset;                                              // 0x01E8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProbeSize;                                                 // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECollisionChannel>              ProbeChannel;                                              // 0x01F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TZ36[0x3];                                     // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDoCollisionTest : 1;                                      // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInheritPitch : 1;                                         // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInheritYaw : 1;                                           // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInheritRoll : 1;                                          // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableCameraLag : 1;                                      // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableCameraRotationLag : 1;                              // 0x01FC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_AYCS[0x3];                                     // 0x01FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraLagSpeed;                                            // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CameraRotationLagSpeed;                                    // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3SQ4[0x48];                                    // 0x0208(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpringArmComponent");
		return ptr;
	}



};

// Class Engine.WindDirectionalSourceComponent
// 0x0018 (FullSize[0x01F0] - InheritedSize[0x01D8])
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_7DP6[0x4];                                     // 0x01D8(0x0004) Fix Super Size
	float                                              Speed;                                                     // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_FSLI[0x10];                                    // 0x01E0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}



};

// Class Engine.TimelineComponent
// 0x0098 (FullSize[0x0170] - InheritedSize[0x00D8])
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                               // 0x00D8(0x0098) (Net, RepNotify, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TimelineComponent");
		return ptr;
	}



	void Stop();
	void SetTimelineLengthMode(TEnumAsByte<Engine_ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnTimelineVector__DelegateSignature(const struct FVector& Output);
	void OnTimelineLinearColor__DelegateSignature(const struct FLinearColor& Output);
	void OnTimelineFloat__DelegateSignature(float Output);
	void OnTimelineEvent__DelegateSignature();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
};

// Class Engine.AnimSequenceBase
// 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                  // 0x0040(0x0010) (ZeroConstructor)
	float                                              SequenceLength;                                            // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	float                                              RateScale;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRawCurveTracks                             RawCurveData;                                              // 0x0058(0x0010)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSequenceBase");
		return ptr;
	}



};

// Class Engine.AnimCompositeBase
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class UAnimCompositeBase : public UAnimSequenceBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompositeBase");
		return ptr;
	}



};

// Class Engine.AnimComposite
// 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                            // 0x0068(0x0010)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimComposite");
		return ptr;
	}



};

// Class Engine.AnimSequence
// 0x00E8 (FullSize[0x0150] - InheritedSize[0x0068])
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                 // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_F5PH[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                   // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_JM6S[0x10];                                    // 0x0080(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTranslationTrack>                   TranslationData;                                           // 0x0090(0x0010) (ZeroConstructor, Transient)
	TArray<struct FRotationTrack>                      RotationData;                                              // 0x00A0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FScaleTrack>                         ScaleData;                                                 // 0x00B0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FCurveTrack>                         CurveData;                                                 // 0x00C0(0x0010) (ZeroConstructor, Deprecated)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x00D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x00D1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    ScaleCompressionFormat;                                    // 0x00D2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KAH2[0x5];                                     // 0x00D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        CompressedTrackOffsets;                                    // 0x00D8(0x0010) (ZeroConstructor)
	struct FCompressedOffsetData                       CompressedScaleOffsets;                                    // 0x00E8(0x0018)
	unsigned char                                      UnknownData_1KFN[0x10];                                    // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationKeyFormat>            KeyEncodingFormat;                                         // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G1GM[0x1F];                                    // 0x0111(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAdditiveAnimationType>         AdditiveAnimType;                                          // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_EAdditiveBasePoseType>          RefPoseType;                                               // 0x0131(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_W6WB[0x6];                                     // 0x0132(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               RefPoseSeq;                                                // 0x0138(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                RefFrameIndex;                                             // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EncodingPkgVersion;                                        // 0x0144(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       RetargetSource;                                            // 0x0148(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}



};

// Class Engine.AnimMontage
// 0x0048 (FullSize[0x00B0] - InheritedSize[0x0068])
class UAnimMontage : public UAnimCompositeBase
{
public:
	float                                              BlendInTime;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BlendOutTime;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bClientPlayWhenNotRendered;                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bForceTickPoseAndServerUpdateMesh;                         // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAnimPauseOnFinish;                                        // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZS2O[0x5];                                     // 0x0073(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCompositeSection>                   CompositeSections;                                         // 0x0078(0x0010) (ZeroConstructor)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                            // 0x0088(0x0010) (ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                           // 0x0098(0x0010) (ZeroConstructor)
	bool                                               bEnableRootMotionTranslation;                              // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bEnableRootMotionRotation;                                 // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x00AA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_70B0[0x5];                                     // 0x00AB(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimMontage");
		return ptr;
	}



};

// Class Engine.BlendSpaceBase
// 0x00B8 (FullSize[0x00F8] - InheritedSize[0x0040])
class UBlendSpaceBase : public UAnimationAsset
{
public:
	struct FBlendParameter                             BlendParameters[0x3];                                      // 0x0040(0x0060) (Protected)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                   // 0x00A0(0x0018) (Edit, Protected)
	float                                              TargetWeightInterpolationSpeedPerSec;                      // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TEnumAsByte<Engine_ENotifyTriggerMode>             NotifyTriggerMode;                                         // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	bool                                               bRotationBlendInMeshSpace;                                 // 0x00BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IN4X[0x2];                                     // 0x00BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumOfDimension;                                            // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AnimLength;                                                // 0x00C4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                              // 0x00C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBlendSample>                        SampleData;                                                // 0x00D8(0x0010) (ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                               // 0x00E8(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendSpaceBase");
		return ptr;
	}



};

// Class Engine.BlendSpace
// 0x0008 (FullSize[0x0100] - InheritedSize[0x00F8])
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<Engine_EBlendSpaceAxis>                AxisToScaleAnimation;                                      // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PPDH[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendSpace");
		return ptr;
	}



};

// Class Engine.AimOffsetBlendSpace
// 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
class UAimOffsetBlendSpace : public UBlendSpace
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace");
		return ptr;
	}



};

// Class Engine.BlendSpace1D
// 0x0008 (FullSize[0x0100] - InheritedSize[0x00F8])
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                           // 0x00F8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SBWD[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendSpace1D");
		return ptr;
	}



};

// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace1D");
		return ptr;
	}



};

// Class Engine.AnimCompress
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UAnimCompress : public UObject
{
public:
	struct FString                                     Description;                                               // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      bNeedsSkeleton : 1;                                        // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_EIEW[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x003C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x003D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    ScaleCompressionFormat;                                    // 0x003E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U9MX[0x1];                                     // 0x003F(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress");
		return ptr;
	}



};

// Class Engine.AnimCompress_Automatic
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                              MaxEndEffectorError;                                       // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                           // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;                        // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;                       // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                                // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                          // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;                   // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                              // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_J0CM[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_Automatic");
		return ptr;
	}



};

// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_BitwiseCompressOnly");
		return ptr;
	}



};

// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_LeastDestructive");
		return ptr;
	}



};

// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                   // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bStartAtSecondKey : 1;                                     // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_DVS6[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveEverySecondKey");
		return ptr;
	}



};

// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxAngleDiff;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxScaleDiff;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxEffectorDiff;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinEffectorDiff;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EffectorDiffSocket;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ParentKeyScale;                                            // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRetarget : 1;                                             // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                             // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_P8JP[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveLinearKeys");
		return ptr;
	}



};

// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (FullSize[0x00E0] - InheritedSize[0x0060])
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                       // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxPosDiffBitwise;                                         // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxAngleDiffBitwise;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxScaleDiffBitwise;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedRotationFormats;                                    // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedTranslationFormats;                                 // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedScaleFormats;                                       // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JICX[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResampledFramerate;                                        // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MinKeysForResampling;                                      // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseAdaptiveError : 1;                                     // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                           // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PYV2[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TrackHeightBias;                                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ParentingDivisor;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ParentingDivisorExponent;                                  // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseAdaptiveError2 : 1;                                    // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_WX94[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RotationErrorSourceRatio;                                  // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslationErrorSourceRatio;                               // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleErrorSourceRatio;                                     // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxErrorPerTrackRatio;                                     // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PerturbationProbeSize;                                     // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6HD7[0xC];                                     // 0x00D4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_PerTrackCompression");
		return ptr;
	}



};

// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxAngleDiff;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxScaleDiff;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZAIK[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveTrivialKeys");
		return ptr;
	}



};

// Class Engine.AnimCompress_RevertToRaw
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_RevertToRaw : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RevertToRaw");
		return ptr;
	}



};

// Class Engine.AnimSingleNodeInstance
// 0x00E0 (FullSize[0x0420] - InheritedSize[0x0340])
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                              // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UVertexAnimation*                            CurrentVertexAnim;                                         // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     BlendSpaceInput;                                           // 0x0350(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MR7O[0x4];                                     // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBlendSampleData>                    BlendSampleData;                                           // 0x0360(0x0010) (ZeroConstructor, Transient)
	struct FBlendFilter                                BlendFilter;                                               // 0x0370(0x0090) (Transient)
	float                                              CurrentTime;                                               // 0x0400(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              PlayRate;                                                  // 0x0404(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                     // 0x0408(0x0010) (ZeroConstructor, Transient, InstancedReference, NoDestructor)
	unsigned char                                      bLooping : 1;                                              // 0x0418(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPlaying : 1;                                              // 0x0418(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bReverse : 1;                                              // 0x0418(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_FNMP[0x7];                                     // 0x0419(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSingleNodeInstance");
		return ptr;
	}



	void StopAnim();
	void SetVertexAnimation(class UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate);
	void SetReverse(bool bInReverse);
	void SetPosition(float InPosition, bool bFireNotifies, bool bReallyFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct FVector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PostEvaluateAnimEvent__DelegateSignature();
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
};

// Class Engine.VehicleAnimInstance
// 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
class UVehicleAnimInstance : public UAnimInstance
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VehicleAnimInstance");
		return ptr;
	}



	class AWheeledVehicle* GetVehicle();
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       SocketName;                                                // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     LocationOffset;                                            // 0x0040(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RotationOffset;                                            // 0x004C(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDestroyAtEnd;                                             // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I1VJ[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyState_TimedParticleEffect");
		return ptr;
	}



};

// Class Engine.AnimNotifyState_Trail
// 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       FirstSocketName;                                           // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       SecondSocketName;                                          // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETrailWidthMode>                WidthScaleMode;                                            // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1MAU[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       WidthScaleCurve;                                           // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3JTA[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyState_Trail");
		return ptr;
	}



};

// Class Engine.AnimSet
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6DDA[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               TrackBoneNames;                                            // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                               // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                    // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                   // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                             // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                       // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       BestRatioSkelMeshName;                                     // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D9YW[0x50];                                    // 0x00A0(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}



};

// Class Engine.AnimStateMachineTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimStateMachineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimStateMachineTypes");
		return ptr;
	}



};

// Class Engine.AssetImportData
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UAssetImportData : public UObject
{
public:
	struct FString                                     SourceFilePath;                                            // 0x0028(0x0010) (Edit, ZeroConstructor)
	struct FString                                     SourceFileTimestamp;                                       // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      bDirty : 1;                                                // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_ANEU[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AssetImportData");
		return ptr;
	}



};

// Class Engine.AssetUserData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAssetUserData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AssetUserData");
		return ptr;
	}



};

// Class Engine.AudioSettings
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UAudioSettings : public UObject
{
public:
	struct FStringAssetReference                       DefaultSoundClassName;                                     // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       DefaultBaseSoundMix;                                       // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       VoiPSoundClass;                                            // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	float                                              LowPassFilterResonance;                                    // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	int                                                MaximumConcurrentStreams;                                  // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AudioSettings");
		return ptr;
	}



};

// Class Engine.AutomationTestSettings
// 0x02B0 (FullSize[0x02D8] - InheritedSize[0x0028])
class UAutomationTestSettings : public UObject
{
public:
	TArray<struct FString>                             AutoRunConsoleCommands;                                    // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             AutoRunMapFilterWhitelist;                                 // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FFilePath                                   AutomationTestmap;                                         // 0x0048(0x0010) (Edit, Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                 // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                        // 0x0068(0x0210) (Edit, Config)
	TArray<struct FString>                             EngineTestModules;                                         // 0x0278(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             EditorTestModules;                                         // 0x0288(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             TestLevelFolders;                                          // 0x0298(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOpenTestAsset>                      TestAssetsToOpen;                                          // 0x02A8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                             // 0x02B8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                               // 0x02C8(0x0010) (Edit, ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AutomationTestSettings");
		return ptr;
	}



};

// Class Engine.AvoidanceManager
// 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData_M2IW[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultTimeToLive;                                         // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              LockTimeAfterAvoid;                                        // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              LockTimeAfterClean;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DeltaTimeToPredict;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              ArtificialRadiusExpansion;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              TestRadius2D;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              TestHeightDifference;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O3TQ[0x7C];                                    // 0x004C(0x007C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AvoidanceManager");
		return ptr;
	}



	bool RegisterMovementComponent(class UCharacterMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID);
	struct FVector GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
};

// Class Engine.BadObject
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBadObject : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BadObject");
		return ptr;
	}



};

// Class Engine.BodySetup
// 0x0260 (FullSize[0x0288] - InheritedSize[0x0028])
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                             AggGeom;                                                   // 0x0028(0x0048)
	struct FName                                       BoneName;                                                  // 0x0070(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EPhysicsType>                   PhysicsType;                                               // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6K5P[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                 // 0x007C(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bConsiderForBounds : 1;                                    // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bMeshCollideAll : 1;                                       // 0x007C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsPlayerRagdoll : 1;                                      // 0x007C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bDoubleSidedGeometry : 1;                                  // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                         // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bGenerateMirroredCollision : 1;                            // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_CGCC[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EBodyCollisionResponse>         CollisionReponse;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECollisionTraceFlag>            CollisionTraceFlag;                                        // 0x0089(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BYXL[0x6];                                     // 0x008A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               DefaultInstance;                                           // 0x0090(0x0160) (Edit)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                     // 0x01F0(0x0008) (Edit, AdvancedDisplay)
	unsigned char                                      bReallyUseTriangleMeshCollisions : 1;                      // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseLastLODInsteadOfFirstForCollisionMesh : 1;             // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseSecondToLastLODInsteadOfFirstForCollisionMesh : 1;     // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUsesSkelCustomIgnore : 1;                                 // 0x01F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_9ZLT[0x3];                                     // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BuildScale;                                                // 0x01FC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     BuildScale3D;                                              // 0x0200(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_82NI[0x7C];                                    // 0x020C(0x007C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BodySetup");
		return ptr;
	}



};

// Class Engine.BodySetup2D
// 0x0030 (FullSize[0x02B8] - InheritedSize[0x0288])
class UBodySetup2D : public UBodySetup
{
public:
	struct FAggregateGeometry2D                        AggGeom2D;                                                 // 0x0288(0x0030)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BodySetup2D");
		return ptr;
	}



};

// Class Engine.BookMark2D
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                                    // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FIntPoint                                   Location;                                                  // 0x002C(0x0008) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_2PXZ[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BookMark2D");
		return ptr;
	}



};

// Class Engine.Breakpoint
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                              // 0x0028(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_ZQHK[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UEdGraphNode*                                Node;                                                      // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bStepOnce : 1;                                             // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                       // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                              // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_ZEJL[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Breakpoint");
		return ptr;
	}



};

// Class Engine.BrushBuilder
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                            // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     ToolTip;                                                   // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                                       // 0x0048(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_GUCU[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector>                             Vertices;                                                  // 0x0050(0x0010) (ZeroConstructor, Protected)
	TArray<struct FBuilderPoly>                        Polys;                                                     // 0x0060(0x0010) (ZeroConstructor, Protected)
	struct FName                                       Layer;                                                     // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      MergeCoplanars : 1;                                        // 0x0078(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_0WO4[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BrushBuilder");
		return ptr;
	}



};

// Class Engine.MaterialExpression
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UMaterialExpression : public UObject
{
public:
	unsigned char                                      bRealtimePreview : 1;                                      // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNeedToUpdatePreview : 1;                                  // 0x0028(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsParameterExpression : 1;                                // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_JM92[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterial*                                   Material;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialFunction*                           Function;                                                  // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     Desc;                                                      // 0x0040(0x0010) (Edit, ZeroConstructor)
	struct FColor                                      BorderColor;                                               // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bShowOutputNameOnPin : 1;                                  // 0x0054(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHidePreviewWindow : 1;                                    // 0x0054(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCollapsed : 1;                                            // 0x0054(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShaderInputData : 1;                                      // 0x0054(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowInputs : 1;                                           // 0x0054(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowOutputs : 1;                                          // 0x0054(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_A1H0[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             MenuCategories;                                            // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FExpressionOutput>                   Outputs;                                                   // 0x0068(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistance
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceCullFade");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                  // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldGradient");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                  // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceToNearestSurface");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDivide
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0028 (FullSize[0x00A0] - InheritedSize[0x0078])
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                          // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FFunctionExpressionInput>            FunctionInputs;                                            // 0x0080(0x0010) (ZeroConstructor)
	TArray<struct FFunctionExpressionOutput>           FunctionOutputs;                                           // 0x0090(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMax
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMax");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMin
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMin");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMultiply
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}



};

// Class Engine.MaterialExpressionNoise
// 0x0090 (FullSize[0x0108] - InheritedSize[0x0078])
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                  // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            FilterWidth;                                               // 0x00B0(0x0038) (ZeroConstructor)
	float                                              Scale;                                                     // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Quality;                                                   // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ENoiseFunction>                 NoiseFunction;                                             // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I7CP[0x3];                                     // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bTurbulence : 1;                                           // 0x00F4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_BICT[0x3];                                     // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Levels;                                                    // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OutputMin;                                                 // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OutputMax;                                                 // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LevelScale;                                                // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionNoise");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParameter
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                             // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       ExpressionGUID;                                            // 0x0080(0x0010) (ZeroConstructor)
	struct FName                                       Group;                                                     // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_OZ5N[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0070 (FullSize[0x0110] - InheritedSize[0x00A0])
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                         // 0x00A0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00D8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0040 (FullSize[0x00D8] - InheritedSize[0x0098])
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0098(0x0038) (ZeroConstructor)
	unsigned char                                      DefaultR : 1;                                              // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DefaultG : 1;                                              // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DefaultB : 1;                                              // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DefaultA : 1;                                              // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GXU5[0x7];                                     // 0x00D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00E8 (FullSize[0x0160] - InheritedSize[0x0078])
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                    // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            RotationAngle;                                             // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            PivotPoint;                                                // 0x00E8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Position;                                                  // 0x0120(0x0038) (ZeroConstructor)
	float                                              Period;                                                    // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WDD1[0x4];                                     // 0x015C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}



};

// Class Engine.MaterialExpressionRotator
// 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Time;                                                      // 0x00B0(0x0038) (ZeroConstructor)
	float                                              CenterX;                                                   // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CenterY;                                                   // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Speed;                                                     // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint32_t                                           ConstCoordinate;                                           // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneColor
// 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WN2C[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0080(0x0038) (ZeroConstructor)
	struct FExpressionInput                            OffsetFraction;                                            // 0x00B8(0x0038) (ZeroConstructor, Deprecated)
	struct FVector2D                                   ConstInput;                                                // 0x00F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneDepth
// 0x0088 (FullSize[0x0100] - InheritedSize[0x0078])
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QP2O[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0080(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Coordinates;                                               // 0x00B8(0x0038) (ZeroConstructor, Deprecated)
	struct FVector2D                                   ConstInput;                                                // 0x00F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseHZB;                                                   // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4UR5[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexelSize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSceneTexture
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0078(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_ESceneTextureId>                SceneTextureId;                                            // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bClampUVs;                                                 // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9OAS[0x6];                                     // 0x00B2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}



};

// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSine
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	float                                              Period;                                                    // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L72Y[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSpeedTree
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_ESpeedTreeGeometryType>         GeometryType;                                              // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESpeedTreeWindType>             WindType;                                                  // 0x0079(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESpeedTreeLODType>              LODType;                                                   // 0x007A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y09L[0x1];                                     // 0x007B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BillboardThreshold;                                        // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSpeedTree");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSphereMask
// 0x00E8 (FullSize[0x0160] - InheritedSize[0x0078])
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Radius;                                                    // 0x00E8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Hardness;                                                  // 0x0120(0x0038) (ZeroConstructor)
	float                                              AttenuationRadius;                                         // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HardnessPercent;                                           // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                   // 0x0078(0x0038) (ZeroConstructor)
	float                                              ConstantDensity;                                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PR7J[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSphericalParticleOpacity");
		return ptr;
	}



};

// Class Engine.MaterialParameterCollection
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                   // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                          // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                          // 0x0048(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_2TTB[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialParameterCollection");
		return ptr;
	}



};

// Class Engine.MaterialParameterCollectionInstance
// 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData_QKTQ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialParameterCollection*                Collection;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UWorld*                                      World;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_2TZS[0xA8];                                    // 0x0040(0x00A8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialParameterCollectionInstance");
		return ptr;
	}



};

// Class Engine.MatineeInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMatineeInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeInterface");
		return ptr;
	}



};

// Class Engine.MountedDLCManager
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UMountedDLCManager : public UObject
{
public:
	TArray<struct FMountedDLCInfo>                     MountedDLCs;                                               // 0x0028(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FMountedDLCMapInfo>                  MountedDLCMaps;                                            // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData_FBR5[0x20];                                    // 0x0048(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MountedDLCManager");
		return ptr;
	}



};

// Class Engine.StadiaMountedDLCManager
// 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
class UStadiaMountedDLCManager : public UMountedDLCManager
{
public:
	unsigned char                                      UnknownData_P1S0[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StadiaMountedDLCManager");
		return ptr;
	}



};

// Class Engine.NavArea
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UNavArea : public UObject
{
public:
	float                                              DefaultCost;                                               // 0x0028(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              FixedAreaEnteringCost;                                     // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	struct FColor                                      DrawColor;                                                 // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bSupportsAgent0 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent1 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent2 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent3 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent4 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent5 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent6 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent7 : 1;                                       // 0x0034(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent8 : 1;                                       // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent9 : 1;                                       // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent10 : 1;                                      // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent11 : 1;                                      // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent12 : 1;                                      // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent13 : 1;                                      // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent14 : 1;                                      // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSupportsAgent15 : 1;                                      // 0x0035(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_VCB4[0xA];                                     // 0x0036(0x000A) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea");
		return ptr;
	}



};

// Class Engine.NavArea_Default
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavArea_Default : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea_Default");
		return ptr;
	}



};

// Class Engine.NavArea_Null
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavArea_Null : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea_Null");
		return ptr;
	}



};

// Class Engine.NavAreaMeta
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavAreaMeta : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavAreaMeta");
		return ptr;
	}



};

// Class Engine.NavAreaMeta_SwitchByAgent
// 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	class UClass*                                      Agent0Area;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent1Area;                                                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent2Area;                                                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent3Area;                                                // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent4Area;                                                // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent5Area;                                                // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent6Area;                                                // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent7Area;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent8Area;                                                // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent9Area;                                                // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent10Area;                                               // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent11Area;                                               // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent12Area;                                               // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent13Area;                                               // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent14Area;                                               // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      Agent15Area;                                               // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavAreaMeta_SwitchByAgent");
		return ptr;
	}



};

// Class Engine.NavCollision
// 0x00E0 (FullSize[0x0108] - InheritedSize[0x0028])
class UNavCollision : public UObject
{
public:
	unsigned char                                      UnknownData_J1Z2[0x50];                                    // 0x0028(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNavCollisionCylinder>               CylinderCollision;                                         // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavCollisionBox>                    BoxCollision;                                              // 0x0088(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      AreaClass;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsDynamicObstacle : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bGatherConvexGeometry : 1;                                 // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_QZYH[0x67];                                    // 0x00A1(0x0067) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavCollision");
		return ptr;
	}



};

// Class Engine.ParticleModule
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                          // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUpdateModule : 1;                                         // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFinalUpdateModule : 1;                                    // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                  // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCurvesAsColor : 1;                                        // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      b3DDrawMode : 1;                                           // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSupported3DDrawMode : 1;                                  // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEditable : 1;                                             // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      LODDuplicate : 1;                                          // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSupportsRandomSeed : 1;                                   // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRequiresLoopingNotification : 1;                          // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_M41W[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      LODValidity;                                               // 0x002C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KKTP[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleAttractorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorLine
// 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                 // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     EndPoint1;                                                 // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRawDistributionFloat                       Range;                                                     // 0x0048(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0080(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)
	struct FRawDistributionFloat                       Range;                                                     // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bStrengthByDistance : 1;                                   // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Z4NI[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0078(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_M346[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAttractorParticleSelectionMethod> SelectionMethod;                                           // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UV52[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenewSource : 1;                                          // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritSourceVel : 1;                                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SQSM[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LastSelIndex;                                              // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                  // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Range;                                                     // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      StrengthByDistance : 1;                                    // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOverrideVelocity : 1;                                     // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseWorldSpacePosition : 1;                                // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_X : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Y : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Z : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_X : 1;                                            // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Y : 1;                                            // 0x00D9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Z : 1;                                            // 0x00D9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_2LMC[0x6];                                     // 0x00DA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}



};

// Class Engine.ParticleModuleAttractorPointGravity
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Radius;                                                    // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDistributionFloat*                          Strength;                                                  // 0x0040(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPointGravity");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleBeamBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamModifier
// 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeamModifierType>              ModifierType;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GPOJ[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        PositionOptions;                                           // 0x0034(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                  // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	struct FBeamModifierOptions                        TangentOptions;                                            // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData_TT73[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Tangent;                                                   // 0x0078(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAbsoluteTangent : 1;                                      // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7L54[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        StrengthOptions;                                           // 0x00B4(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00B8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamNoise
// 0x0158 (FullSize[0x0188] - InheritedSize[0x0030])
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                      // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_DUP2[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Frequency;                                                 // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Frequency_LowRange;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1RKZ[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseRange;                                                // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       NoiseRangeScale;                                           // 0x0078(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bNRScaleEmitterTime : 1;                                   // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YSDM[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseSpeed;                                                // 0x00B8(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bSmooth : 1;                                               // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_IA9G[0x3];                                     // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockRadius;                                           // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bNoiseLock : 1;                                            // 0x00F8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bOscillate : 1;                                            // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_EPP4[0x3];                                     // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockTime;                                             // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoiseTension;                                              // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseNoiseTangents : 1;                                     // 0x0104(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TK9W[0x3];                                     // 0x0105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                      // 0x0108(0x0038) (Edit, ContainsInstancedReference)
	int                                                NoiseTessellation;                                         // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bTargetNoise : 1;                                          // 0x0144(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_T2MP[0x3];                                     // 0x0145(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FrequencyDistance;                                         // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bApplyNoiseScale : 1;                                      // 0x014C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YKOR[0x3];                                     // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseScale;                                                // 0x0150(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamSource
// 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       SourceMethod;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MS1H[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bSourceAbsolute : 1;                                       // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5ULO[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Source;                                                    // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSource : 1;                                           // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_C03X[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> SourceTangentMethod;                                       // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MBAT[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      SourceTangent;                                             // 0x0080(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSourceTangent : 1;                                    // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_T0ZR[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5BL3[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}



};

// Class Engine.ParticleModuleBeamTarget
// 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       TargetMethod;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V7VL[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       TargetName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G8VB[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Target;                                                    // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bTargetAbsolute : 1;                                       // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bLockTarget : 1;                                           // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LMIH[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> TargetTangentMethod;                                       // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZPT0[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      TargetTangent;                                             // 0x0080(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockTargetTangent : 1;                                    // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_AJL1[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TargetStrength;                                            // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockTargetStength : 1;                                    // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PGM3[0x3];                                     // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LockRadius;                                                // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}



};

// Class Engine.ParticleModuleCameraBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleCameraBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleCameraOffset
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                              // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bSpawnTimeOnly : 1;                                        // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JSMJ[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleCameraOffsetUpdateMethod> UpdateMethod;                                              // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U0GM[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		return ptr;
	}



};

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleCollisionBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleCollision
// 0x0150 (FullSize[0x0180] - InheritedSize[0x0030])
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                             // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      DampingFactorRotation;                                     // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       MaxCollisions;                                             // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	TEnumAsByte<Engine_EParticleCollisionComplete>     CollisionCompletionOption;                                 // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9C2G[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       CollisionTypes;                                            // 0x00E0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_9ZTJ[0x4];                                     // 0x00F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bApplyPhysics : 1;                                         // 0x00F4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GJH1[0x3];                                     // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       ParticleMass;                                              // 0x00F8(0x0038) (Edit, ContainsInstancedReference)
	float                                              DirScalar;                                                 // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                             // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                    // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_2SRS[0x3];                                     // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VerticalFudgeFactor;                                       // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RESP[0x4];                                     // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       DelayAmount;                                               // 0x0140(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bDropDetail : 1;                                           // 0x0178(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                 // 0x0178(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreSourceActor : 1;                                    // 0x0178(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_G6HW[0x3];                                     // 0x0179(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxCollisionDistance;                                      // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}



};

// Class Engine.ParticleModuleCollisionGPU
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                                // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                   // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	float                                              Friction;                                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RadiusScale;                                               // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RadiusBias;                                                // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EParticleCollisionResponse>     Response;                                                  // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OLRB[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionGPU");
		return ptr;
	}



};

// Class Engine.ParticleModuleColorBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleColorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleColor
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                                // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       StartAlpha;                                                // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UNVH[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}



};

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleLifetimeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLifetime
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       LifeTime;                                                  // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleLocationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Y : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Z : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_X : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Y : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Z : 1;                                            // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      SurfaceOnly : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Velocity : 1;                                              // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_2UFA[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      StartLocation;                                             // 0x0070(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0080 (FullSize[0x0128] - InheritedSize[0x00A8])
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                        // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_3VPC[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00B0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       StartHeight;                                               // 0x00E8(0x0038) (Edit, ContainsInstancedReference)
	TEnumAsByte<Engine_ECylinderHeightAxis>            HeightAxis;                                                // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TYMW[0x7];                                     // 0x0121(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (FullSize[0x0148] - InheritedSize[0x0128])
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0128(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0038 (FullSize[0x00E0] - InheritedSize[0x00A8])
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00A8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                               // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Height;                                                    // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Angle;                                                     // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Thickness;                                                 // 0x00D8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveTriangle");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationSkelVertSurfaceSource> SourceType;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6XJI[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     UniversalOffset;                                           // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NGYS[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0044(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QNQO[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               ValidAssociatedBones;                                      // 0x0050(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                   // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1HU2[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     NormalToCompare;                                           // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NormalCheckToleranceDegrees;                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NormalCheckTolerance;                                      // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int>                                        ValidMaterialIndices;                                      // 0x0078(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                   // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_C6ZZ[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		return ptr;
	}



};

// Class Engine.ParticleModuleSourceMovement
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                       // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}



};

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleMaterialBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                             // 0x0030(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrbitBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_VWF5[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrbit
// 0x00C8 (FullSize[0x0100] - InheritedSize[0x0038])
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<Engine_EOrbitChainMode>                ChainMode;                                                 // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6927[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      OffsetAmount;                                              // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	struct FOrbitOptions                               OffsetOptions;                                             // 0x0078(0x0004) (Edit)
	unsigned char                                      UnknownData_TW2T[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationAmount;                                            // 0x0080(0x0038) (Edit, ContainsInstancedReference)
	struct FOrbitOptions                               RotationOptions;                                           // 0x00B8(0x0004) (Edit)
	unsigned char                                      UnknownData_NWIF[0x4];                                     // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationRateAmount;                                        // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	struct FOrbitOptions                               RotationRateOptions;                                       // 0x00F8(0x0004) (Edit)
	unsigned char                                      UnknownData_C209[0x4];                                     // 0x00FC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleOrientationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<Engine_EParticleAxisLock>              LockAxisFlags;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8UG4[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}



};

// Class Engine.ParticleModuleParameterBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleParameterBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                             // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference)
	int                                                UpdateFlags;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUsesVelocity : 1;                                         // 0x0044(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_APKC[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleRotationRateBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRate
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                         // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                   // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bScaleRotRate : 1;                                         // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_XAXA[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleSpawnBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bProcessBurstList : 1;                                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_HE1S[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleSpawn
// 0x00C0 (FullSize[0x00F8] - InheritedSize[0x0038])
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                      // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       RateScale;                                                 // 0x0070(0x0038) (Edit, ContainsInstancedReference)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NYR3[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x00B0(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	struct FRawDistributionFloat                       BurstScale;                                                // 0x00C0(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}



};

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PIBH[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SpawnPerUnit;                                              // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                            // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TESB[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementTolerance;                                         // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxFrameDistance;                                          // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                 // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                 // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                 // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ORGN[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}



};

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleSubUVBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleSubUV
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                             // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bUseRealTime : 1;                                          // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_76VF[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}



};

// Class Engine.ParticleModuleSubUVMovie
// 0x0048 (FullSize[0x00B8] - InheritedSize[0x0070])
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_HLRI[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       FrameRate;                                                 // 0x0078(0x0038) (Edit, ContainsInstancedReference)
	int                                                StartingFrame;                                             // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UUDN[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}



};

// Class Engine.ParticleModuleTrailBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleTrailBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleTrailSource
// 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<Engine_ETrail2SourceMethod>            SourceMethod;                                              // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OGO2[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2HJ9[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_T3U4[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SourceOffsetCount;                                         // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FVector>                             SourceOffsetDefaults;                                      // 0x0080(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<Engine_EParticleSourceSelectionMethod> SelectionMethod;                                           // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_93MV[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bInheritRotation : 1;                                      // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UK0K[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleTypeDataBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_HH4E[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistanceTessellationStepSize;                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TangentTessellationStepSize;                               // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              WidthTessellationStepSize;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L0VB[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataBeam2
// 0x00E8 (FullSize[0x0118] - InheritedSize[0x0030])
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<Engine_EBeam2Method>                   BeamMethod;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PDJG[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TextureTile;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TextureTileDistance;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Sheets;                                                    // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxBeamCount;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Speed;                                                     // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                InterpolationPoints;                                       // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAlwaysOn : 1;                                             // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6H2L[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UpVectorStepSize;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       BranchParentName;                                          // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UZZ7[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Distance;                                                  // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	TEnumAsByte<Engine_EBeamTaperMethod>               TaperMethod;                                               // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UGON[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TaperFactor;                                               // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       TaperScale;                                                // 0x00D8(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      RenderGeometry : 1;                                        // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RenderDirectLine : 1;                                      // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RenderLines : 1;                                           // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RenderTessellation : 1;                                    // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_AJX0[0x7];                                     // 0x0111(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataGpu
// 0x03E0 (FullSize[0x0410] - InheritedSize[0x0030])
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                               // 0x0030(0x0280) (Transient, ContainsInstancedReference)
	struct FGPUSpriteResourceData                      ResourceData;                                              // 0x02B0(0x0150) (Transient)
	float                                              CameraMotionBlurAmount;                                    // 0x0400(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CN1M[0xC];                                     // 0x0404(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataGpu");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataMesh
// 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                      // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      CastShadows : 1;                                           // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      DoCollisions : 1;                                          // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_U9LR[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshScreenAlignment>           MeshAlignment;                                             // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E0FZ[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideMaterial : 1;                                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_R1Z0[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Pitch;                                                     // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              Roll;                                                      // 0x0048(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              Yaw;                                                       // 0x004C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FRawDistributionVector                      RollPitchYawRange;                                         // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      UnknownData_04C2[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleAxisLock>              AxisLockOption;                                            // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QM3R[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bCameraFacing : 1;                                         // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TZZP[0x3];                                     // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshCameraFacingUpAxis>        CameraFacingUpAxisOption;                                  // 0x0098(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMeshCameraFacingOptions>       CameraFacingOption;                                        // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E6UK[0x2];                                     // 0x009A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                          // 0x009C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;                // 0x009C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_8VZW[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}



};

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SheetsPerTrail;                                            // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxTrailCount;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxParticleInTrailCount;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                               // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bClipSourceSegement : 1;                                   // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSpawnInitialParticle : 1;                                 // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_531V[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETrailsRenderAxisOption>        RenderAxis;                                                // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PD5T[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentSpawningScalar;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRenderGeometry : 1;                                       // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRenderSpawnPoints : 1;                                    // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRenderTangents : 1;                                       // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRenderTessellation : 1;                                   // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_P3HC[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistanceTessellationStepSize;                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                         // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UX65[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentTessellationScalar;                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                   // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_J6NH[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalVectorFieldScale;                                    // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GlobalVectorFieldTightness;                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F505[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldGlobal");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeTranslation;                                       // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeScale3D;                                           // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Intensity;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Tightness;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIgnoreComponentTransform : 1;                             // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTileX : 1;                                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTileY : 1;                                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTileZ : 1;                                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_BD46[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldLocal");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                              // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RJBZ[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotationRate");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldScale
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                          // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScale");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                  // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScaleOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                         // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Z4A4[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocity
// 0x0070 (FullSize[0x00A8] - InheritedSize[0x0038])
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                             // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       StartVelocityRadial;                                       // 0x0070(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (FullSize[0x00C8] - InheritedSize[0x00A8])
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00A8(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		return ptr;
	}



};

// Class Engine.PhysicsConstraintTemplate
// 0x0218 (FullSize[0x0240] - InheritedSize[0x0028])
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FName                                       JointName;                                                 // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FName                                       ConstraintBone1;                                           // 0x0030(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FName                                       ConstraintBone2;                                           // 0x0038(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     Pos1;                                                      // 0x0040(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     PriAxis1;                                                  // 0x004C(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     SecAxis1;                                                  // 0x0058(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     Pos2;                                                      // 0x0064(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     PriAxis2;                                                  // 0x0070(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     SecAxis2;                                                  // 0x007C(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnableProjection : 1;                                     // 0x0088(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_527R[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ProjectionLinearTolerance;                                 // 0x008C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              ProjectionAngularTolerance;                                // 0x0090(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ELinearConstraintMotion>        LinearXMotion;                                             // 0x0094(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ELinearConstraintMotion>        LinearYMotion;                                             // 0x0095(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ELinearConstraintMotion>        LinearZMotion;                                             // 0x0096(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7UQR[0x1];                                     // 0x0097(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearLimitSize;                                           // 0x0098(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bLinearLimitSoft : 1;                                      // 0x009C(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_CMPK[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearLimitStiffness;                                      // 0x00A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              LinearLimitDamping;                                        // 0x00A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bLinearBreakable : 1;                                      // 0x00A8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_YEET[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearBreakThreshold;                                      // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bSwingLimited : 1;                                         // 0x00B0(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bTwistLimited : 1;                                         // 0x00B0(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_PA0O[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAngularConstraintMotion>       AngularSwing1Motion;                                       // 0x00B4(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAngularConstraintMotion>       AngularSwing2Motion;                                       // 0x00B5(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EAngularConstraintMotion>       AngularTwistMotion;                                        // 0x00B6(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_H7YF[0x1];                                     // 0x00B7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bSwingLimitSoft : 1;                                       // 0x00B8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bTwistLimitSoft : 1;                                       // 0x00B8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_B74N[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Swing1LimitAngle;                                          // 0x00BC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              Swing2LimitAngle;                                          // 0x00C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              TwistLimitAngle;                                           // 0x00C4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              SwingLimitStiffness;                                       // 0x00C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              SwingLimitDamping;                                         // 0x00CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              TwistLimitStiffness;                                       // 0x00D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              TwistLimitDamping;                                         // 0x00D4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bAngularBreakable : 1;                                     // 0x00D8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_NOT0[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AngularBreakThreshold;                                     // 0x00DC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FConstraintInstance                         DefaultInstance;                                           // 0x00E0(0x0160) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsConstraintTemplate");
		return ptr;
	}



};

// Class Engine.PlatformInterfaceBase
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                              // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return ptr;
	}



	void PlatformInterfaceDelegate__DelegateSignature(const struct FPlatformInterfaceDelegateResult& Result);
};

// Class Engine.CloudStorageBase
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                           // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                                // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_6LQE[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CloudStorageBase");
		return ptr;
	}



};

// Class Engine.InGameAdManager
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                               // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_UO46[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                    // 0x0040(0x0010) (ZeroConstructor, ContainsInstancedReference)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                         // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InGameAdManager");
		return ptr;
	}



	void OnUserClosedAdvertisement__DelegateSignature();
	void OnUserClickedBanner__DelegateSignature();
};

// Class Engine.MicroTransactionBase
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                         // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     LastError;                                                 // 0x0048(0x0010) (ZeroConstructor)
	struct FString                                     LastErrorSolution;                                         // 0x0058(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MicroTransactionBase");
		return ptr;
	}



};

// Class Engine.TwitterIntegrationBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return ptr;
	}



	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};

// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                               // 0x0028(0x0010) (ZeroConstructor)
	int                                                ResponseCode;                                              // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Tag;                                                       // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     StringResponse;                                            // 0x0040(0x0010) (ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                            // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_6XTF[0x50];                                    // 0x0060(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return ptr;
	}



	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
};

// Class Engine.ChildConnection
// 0x0008 (FullSize[0x34320] - InheritedSize[0x34318])
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                    // 0x34318(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}



};

// Class Engine.Polys
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData_7U7D[0x18];                                    // 0x0028(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}



};

// Class Engine.ReflectionCaptureData
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UReflectionCaptureData : public UObject
{
public:
	struct FString                                     ComponentName;                                             // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_O0QG[0x48];                                    // 0x0038(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReflectionCaptureData");
		return ptr;
	}



};

// Class Engine.RendererSettings
// 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
class URendererSettings : public UObject
{
public:
	unsigned char                                      bMobileHDR : 1;                                            // 0x0028(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bOcclusionCulling : 1;                                     // 0x0028(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_BMEN[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinScreenRadiusForLights;                                  // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MinScreenRadiusForEarlyZPass;                              // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MinScreenRadiusForCSMdepth;                                // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                         // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bTextureStreaming : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                    // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bAllowStaticLighting : 1;                                  // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                       // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bGBuffer : 1;                                              // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                           // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_1LPU[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DistanceFieldPenumbraSize;                                 // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              TessellationAdaptivePixelsPerTriangle;                     // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bSeparateTranslucency : 1;                                 // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_5P0H[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECustomDepth>                   CustomDepth;                                               // 0x0048(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CRYT[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDefaultFeatureBloom : 1;                                  // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                       // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                           // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                             // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                              // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_4L1P[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAntiAliasingMethodUI>          DefaultFeatureAntiAliasing;                                // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDefaultBackBufferPixelFormat>  DefaultBackBufferPixelFormat;                              // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_AOQF[0x2];                                     // 0x0052(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEarlyZPassMovable : 1;                                    // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_324N[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EClearSceneOptions>             ClearSceneMethod;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECompositingSampleCount>        EditorPrimitiveMSAA;                                       // 0x0059(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G6S2[0x2];                                     // 0x005A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WireframeCullThreshold;                                    // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EUIScalingRule>                 UIScaleRule;                                               // 0x0060(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E0EW[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                              // 0x0068(0x0070) (Edit, Config)
	struct FRuntimeFloatCurve                          UIScaleCurveX;                                             // 0x00D8(0x0070) (Edit, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RendererSettings");
		return ptr;
	}



};

// Class Engine.ReporterBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData_ENH9[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReporterBase");
		return ptr;
	}



};

// Class Engine.ReporterGraph
// 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData_AIEU[0x70];                                    // 0x0030(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReporterGraph");
		return ptr;
	}



};

// Class Engine.ReverbEffect
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Diffusion;                                                 // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Gain;                                                      // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GainHF;                                                    // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DecayTime;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DecayHFRatio;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReflectionsGain;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReflectionsDelay;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LateGain;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LateDelay;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AirAbsorptionGainHF;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RoomRolloffFactor;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReverbEffect");
		return ptr;
	}



};

// Class Engine.Rig
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class URig : public UObject
{
public:
	TArray<struct FTransformBase>                      TransformBases;                                            // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                                     // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Rig");
		return ptr;
	}



};

// Class Engine.RuntimeMovieScenePlayerInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class URuntimeMovieScenePlayerInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RuntimeMovieScenePlayerInterface");
		return ptr;
	}



};

// Class Engine.SaveGameSummary
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     Description;                                               // 0x0030(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SaveGameSummary");
		return ptr;
	}



};

// Class Engine.SCS_Node
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class USCS_Node : public UObject
{
public:
	class UActorComponent*                             ComponentTemplate;                                         // 0x0028(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FName                                       VariableName;                                              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       CategoryName;                                              // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       AttachToName;                                              // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       ParentComponentOrVariableName;                             // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       ParentComponentOwnerClassName;                             // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsParentComponentNative;                                  // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QC3F[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USCS_Node*>                           ChildNodes;                                                // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x0070(0x0010) (Edit, ZeroConstructor)
	bool                                               bIsFalseRoot;                                              // 0x0080(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	bool                                               bIsNative;                                                 // 0x0081(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YZPC[0x2];                                     // 0x0082(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       NativeComponentName;                                       // 0x0084(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	bool                                               bVariableNameAutoGenerated;                                // 0x008C(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WEOW[0xB];                                     // 0x008D(0x000B) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SCS_Node");
		return ptr;
	}



};

// Class Engine.Selection
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData_G7V1[0x30];                                    // 0x0028(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Selection");
		return ptr;
	}



};

// Class Engine.SimpleConstructionScript
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                 // 0x0028(0x0010) (ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class USCS_Node*                                   RootNode;                                                  // 0x0040(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TArray<class USCS_Node*>                           ActorComponentNodes;                                       // 0x0048(0x0010) (ZeroConstructor, Deprecated)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SimpleConstructionScript");
		return ptr;
	}



};

// Class Engine.DestructibleMesh
// 0x00B8 (FullSize[0x0380] - InheritedSize[0x02C8])
class UDestructibleMesh : public USkeletalMesh
{
public:
	struct FDestructibleParameters                     DefaultDestructibleParameters;                             // 0x02C8(0x0078) (Edit)
	class UPhysicalMaterial*                           DestructiblePhysicalMaterial;                              // 0x0340(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESleepFamily>                   PhysicsSleepFamily;                                        // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_78E4[0x7];                                     // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFractureEffect>                     FractureEffects;                                           // 0x0350(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	class UBodySetup*                                  BodySetup;                                                 // 0x0360(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3MMU[0x18];                                    // 0x0368(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleMesh");
		return ptr;
	}



};

// Class Engine.SlateBrushAsset
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                                     // 0x0028(0x0078) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SlateBrushAsset");
		return ptr;
	}



};

// Class Engine.SoundBase
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class USoundBase : public UObject
{
public:
	struct FName                                       SoundClass;                                                // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	class USoundClass*                                 SoundClassObject;                                          // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bDebug : 1;                                                // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceStopFarthestThenOldest : 1;                          // 0x0038(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_M50O[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaxConcurrentResolutionRule>   MaxConcurrentResolutionRule;                               // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_N80Y[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxConcurrentPlayCount;                                    // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Duration;                                                  // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YAD0[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundBase");
		return ptr;
	}



	float GetDuration();
};

// Class Engine.DialogueSoundWaveProxy
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData_7388[0x18];                                    // 0x0058(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueSoundWaveProxy");
		return ptr;
	}



};

// Class Engine.SoundCue
// 0x0088 (FullSize[0x00E0] - InheritedSize[0x0058])
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JHCI[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundNode*                                  FirstNode;                                                 // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMultiplier;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	float                                              PitchMultiplier;                                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	struct FAttenuationSettings                        AttenuationOverrides;                                      // 0x0070(0x0034) (Edit)
	unsigned char                                      SubtitleColorIndex;                                        // 0x00A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JI4Z[0x3];                                     // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSubtitleCue>                        Subtitles;                                                 // 0x00A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FLocalizedSpokenText>                LocalizedSpokenTexts;                                      // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FStringAssetReference                       AnimTexture;                                               // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_GZ8V[0x8];                                     // 0x00D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}



};

// Class Engine.SoundGroups
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                        // 0x0028(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_VU4H[0x50];                                    // 0x0038(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundGroups");
		return ptr;
	}



};

// Class Engine.SoundWave
// 0x01A8 (FullSize[0x0200] - InheritedSize[0x0058])
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bLooping : 1;                                              // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bStreamingReserved : 1;                                    // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReallyUseStreamingReserved : 1;                           // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CNGY[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                StreamingPriority;                                         // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_N4VK : 3;                                      // 0x0064(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bMature : 1;                                               // 0x0064(0x0001) BIT_FIELD (Edit, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bManualWordWrap : 1;                                       // 0x0064(0x0001) BIT_FIELD (Edit, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bSingleLine : 1;                                           // 0x0064(0x0001) BIT_FIELD (Edit, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_KXAV : 1;                                      // 0x0064(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bApplyRadioFilterOverride : 1;                             // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceAllowStreaming : 1;                                  // 0x0065(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ACEK[0x2];                                     // 0x0066(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESoundGroup>                    SoundGroup;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8E3S[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FLocalizedSpokenText>                LocalizedSpokenTexts;                                      // 0x0080(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      SubtitleColorIndex;                                        // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C5FE[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Volume;                                                    // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Pitch;                                                     // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                NumChannels;                                               // 0x009C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                SampleRate;                                                // 0x00A0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                RawPCMDataSize;                                            // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FSubtitleCue>                        Subtitles;                                                 // 0x00A8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                        // 0x00B8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_FAVN[0x138];                                   // 0x00C8(0x0138) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundWave");
		return ptr;
	}



};

// Class Engine.SoundWaveStreaming
// 0x0018 (FullSize[0x0218] - InheritedSize[0x0200])
class USoundWaveStreaming : public USoundWave
{
public:
	unsigned char                                      UnknownData_WQ3E[0x18];                                    // 0x0200(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundWaveStreaming");
		return ptr;
	}



};

// Class Engine.SoundClass
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                                // 0x0028(0x0024) (Edit)
	unsigned char                                      UnknownData_A699[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USoundClass*>                         ChildClasses;                                              // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                  // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ChildClassNames;                                           // 0x0070(0x0010) (ZeroConstructor, Deprecated)
	class USoundClass*                                 ParentClass;                                               // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}



};

// Class Engine.SoundMix
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                              // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_YREJ[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EQPriority;                                                // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAudioEQEffect                              EQSettings;                                                // 0x0030(0x0028) (Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                         // 0x0058(0x0010) (Edit, ZeroConstructor)
	float                                              InitialDelay;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeInTime;                                                // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Duration;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeOutTime;                                               // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundMix");
		return ptr;
	}



};

// Class Engine.SoundNodeAttenuation
// 0x0060 (FullSize[0x0098] - InheritedSize[0x0038])
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAttenuationSettings                        AttenuationOverrides;                                      // 0x0040(0x0034) (Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAttenuate : 1;                                            // 0x0074(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bSpatialize : 1;                                           // 0x0074(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_CW8T[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              dBAttenuationAtMax;                                        // 0x0078(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESoundDistanceModel>            DistanceAlgorithm;                                         // 0x007C(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESoundDistanceCalc>             DistanceType;                                              // 0x007D(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I95V[0x2];                                     // 0x007E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RadiusMin;                                                 // 0x0080(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              RadiusMax;                                                 // 0x0084(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bAttenuateWithLPF : 1;                                     // 0x0088(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_N3VI[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LPFRadiusMin;                                              // 0x008C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              LPFRadiusMax;                                              // 0x0090(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_41TF[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}



};

// Class Engine.SoundNodeBranch
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                         // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeBranch");
		return ptr;
	}



};

// Class Engine.SoundNodeConcatenator
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}



};

// Class Engine.SoundNodeDelay
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DelayMax;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}



};

// Class Engine.SoundNodeDeprecated
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeDeprecated : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDeprecated");
		return ptr;
	}



};

// Class Engine.SoundNodeAmbient
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class USoundNodeAmbient : public USoundNodeDeprecated
{
public:
	unsigned char                                      bAttenuate : 1;                                            // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSpatialize : 1;                                           // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_1UOO[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              dBAttenuationAtMax;                                        // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESoundDistanceModel>            DistanceModel;                                             // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7P1N[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RadiusMin;                                                 // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RadiusMax;                                                 // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAttenuateWithLPF : 1;                                     // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_WNDY[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LPFRadiusMin;                                              // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LPFRadiusMax;                                              // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitchMin;                                                  // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitchMax;                                                  // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMin;                                                 // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMax;                                                 // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FAmbientSoundSlot>                   SoundSlots;                                                // 0x0068(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeAmbient");
		return ptr;
	}



};

// Class Engine.SoundNodeAmbientNonLoop
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	float                                              DelayMin;                                                  // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DelayMax;                                                  // 0x007C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoop");
		return ptr;
	}



};

// Class Engine.SoundNodeAmbientNonLoopToggle
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class USoundNodeAmbientNonLoopToggle : public USoundNodeAmbientNonLoop
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoopToggle");
		return ptr;
	}



};

// Class Engine.SoundNodeConcatenatorRadio
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeConcatenatorRadio : public USoundNodeDeprecated
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeConcatenatorRadio");
		return ptr;
	}



};

// Class Engine.SubsurfaceProfile
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                  // 0x0028(0x0024) (Edit)
	unsigned char                                      UnknownData_1L3S[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SubsurfaceProfile");
		return ptr;
	}



};

// Class Engine.TextPropertyTestObject
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                             // 0x0028(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_R7CE[0x10];                                    // 0x0028(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FText                                       UndefaultedText;                                           // 0x0050(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_KCKL[0x10];                                    // 0x0050(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FText                                       TransientText;                                             // 0x0078(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_N5QC[0x10];                                    // 0x0078(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextPropertyTestObject");
		return ptr;
	}



};

// Class Engine.Texture
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UTexture : public UObject
{
public:
	struct FString                                     BulkDataFilePath;                                          // 0x0028(0x0010) (ZeroConstructor)
	int                                                LODBias;                                                   // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                NumCinematicMipLevels;                                     // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      SRGB : 1;                                                  // 0x0040(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      NeverStream : 1;                                           // 0x0040(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay)
	unsigned char                                      bNoTiling : 1;                                             // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseCinematicMipLevels : 1;                                // 0x0040(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bBulkDataOverrideBasePath : 1;                             // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_24P8[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CachedCombinedLODBias;                                     // 0x0044(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                CachedStreamingLODBias;                                    // 0x0048(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                   // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_YA76[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETextureCompressionSettings>    CompressionSettings;                                       // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_ETextureFilter>                 Filter;                                                    // 0x0051(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay)
	TEnumAsByte<Engine_ETextureGroup>                  LODGroup;                                                  // 0x0052(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_5TEZ[0x5D];                                    // 0x0053(0x005D) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}



};

// Class Engine.Texture2D
// 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
class UTexture2D : public UTexture
{
public:
	int                                                RequestedMips;                                             // 0x00B0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor)
	int                                                ResidentMips;                                              // 0x00B4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor)
	int                                                StreamingIndex;                                            // 0x00B8(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor)
	int                                                FirstResourceMemMip;                                       // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_B6R1[0x4];                                     // 0x00C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SizeX;                                                     // 0x00C4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	int                                                SizeY;                                                     // 0x00C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	int                                                OriginalSizeX;                                             // 0x00CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	int                                                OriginalSizeY;                                             // 0x00D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FIntPoint                                   ImportedSize;                                              // 0x00D4(0x0008) (ZeroConstructor)
	float                                              ForceMipLevelsToBeResidentTimestamp;                       // 0x00DC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                          // 0x00E0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bDisableDerivedDataCache : 1;                              // 0x00E0(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bIsStreamable : 1;                                         // 0x00E0(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor)
	unsigned char                                      bHasCancelationPending : 1;                                // 0x00E0(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                           // 0x00E0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                     // 0x00E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_Z6XY[0x3];                                     // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EPixelFormat>              Format;                                                    // 0x00E4(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x00E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x00E6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay)
	unsigned char                                      UnknownData_E0RU[0x79];                                    // 0x00E7(0x0079) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}



	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
};

// Class Engine.LightMapTexture2D
// 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData_LB7J[0x8];                                     // 0x0160(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}



};

// Class Engine.ShadowMapTexture2D
// 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<Engine_EShadowMapFlags>                ShadowmapFlags;                                            // 0x0160(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4G29[0x7];                                     // 0x0161(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}



};

// Class Engine.TextureLightProfile
// 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                                // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	float                                              TextureMultiplier;                                         // 0x0164(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureLightProfile");
		return ptr;
	}



};

// Class Engine.Texture2DDynamic
// 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData_JCCN[0x8];                                     // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EPixelFormat>              Format;                                                    // 0x00B8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UTVR[0xF];                                     // 0x00B9(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}



};

// Class Engine.TextureCube
// 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData_I28P[0x58];                                    // 0x00B0(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}



};

// Class Engine.TextureRenderTarget
// 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                               // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EGHX[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}



};

// Class Engine.TextureRenderTarget2D
// 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x00B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                SizeY;                                                     // 0x00BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	struct FLinearColor                                ClearColor;                                                // 0x00C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x00D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_2M57[0x2];                                     // 0x00D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00D4(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHDR : 1;                                                  // 0x00D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_GCV5[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAutoGenerateMips : 1;                                     // 0x00D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_ETextureRenderTargetFormat>     RenderTargetFormat;                                        // 0x00D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00DA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V5PR[0x1D];                                    // 0x00DB(0x001D) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}



};

// Class Engine.CanvasRenderTarget2D
// 0x0010 (FullSize[0x0108] - InheritedSize[0x00F8])
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                                // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CanvasRenderTarget2D");
		return ptr;
	}



	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void OnCanvasRenderTargetUpdate__DelegateSignature(class UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UClass* CanvasRenderTarget2DClass, int Width, int Height);
};

// Class Engine.TextureRenderTargetCube
// 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	struct FLinearColor                                ClearColor;                                                // 0x00BC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x00CC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_69UE[0x3];                                     // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bHDR : 1;                                                  // 0x00D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x00D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_DY43[0x7];                                     // 0x00D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}



};

// Class Engine.ThumbnailInfo
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UThumbnailInfo : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ThumbnailInfo");
		return ptr;
	}



};

// Class Engine.TimelineTemplate
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                            // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETimelineLengthMode>            LengthMode;                                                // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_3CSU[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAutoPlay : 1;                                             // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bLoop : 1;                                                 // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReplicated : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bValidatedAsWired : 1;                                     // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_HJJJ[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTTEventTrack>                       EventTracks;                                               // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                               // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                              // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                         // 0x0068(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                              // 0x0088(0x0010) (ZeroConstructor, DuplicateTransient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TimelineTemplate");
		return ptr;
	}



};

// Class Engine.TouchInterface
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InactiveOpacity;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TimeUntilDeactive;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TimeUntilReset;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ActivationDelay;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bPreventRecenter;                                          // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KJU3[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StartupDelay;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7QS0[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TouchInterface");
		return ptr;
	}



};

// Class Engine.UserDefinedEnum
// 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
class UUserDefinedEnum : public UEnum
{
public:
	TArray<struct FText>                               DisplayNames;                                              // 0x0058(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.UserDefinedEnum");
		return ptr;
	}



};

// Class Engine.UserDefinedStruct
// 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
class UUserDefinedStruct : public UScriptStruct
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.UserDefinedStruct");
		return ptr;
	}



};

// Class Engine.VectorField
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                    // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Intensity;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorField");
		return ptr;
	}



};

// Class Engine.VectorFieldAnimated
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                   // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EVectorFieldConstructionOp>     ConstructionOp;                                            // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_N0B0[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VolumeSizeX;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                VolumeSizeY;                                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                VolumeSizeZ;                                               // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubImagesX;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubImagesY;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                FrameCount;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FramesPerSecond;                                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLoop : 1;                                                 // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JPJ4[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UVectorFieldStatic*                          NoiseField;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoiseScale;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoiseMax;                                                  // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldAnimated");
		return ptr;
	}



};

// Class Engine.VectorFieldStatic
// 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                     // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	int                                                SizeY;                                                     // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	int                                                SizeZ;                                                     // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RZVN[0x54];                                    // 0x0054(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldStatic");
		return ptr;
	}



};

// Class Engine.VehicleWheel
// 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
class UVehicleWheel : public UObject
{
public:
	class UStaticMesh*                                 CollisionMesh;                                             // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bDontCreateShape;                                          // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               bAutoAdjustCollisionSize;                                  // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SZW1[0x2];                                     // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     Offset;                                                    // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShapeRadius;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ShapeWidth;                                                // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Mass;                                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DampingRate;                                               // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SteerAngle;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAffectedByHandbrake;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0SP4[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTireType*                                   TireType;                                                  // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LatStiffMaxLoad;                                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LatStiffValue;                                             // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LongStiffValue;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SuspensionForceOffset;                                     // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SuspensionMaxRaise;                                        // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SuspensionMaxDrop;                                         // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SuspensionNaturalFrequency;                                // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SuspensionDampingRatio;                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxBrakeTorque;                                            // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxHandBrakeTorque;                                        // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWheeledVehicleMovementComponent*            VehicleSim;                                                // 0x0088(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)
	int                                                WheelIndex;                                                // 0x0090(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugLongSlip;                                             // 0x0094(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugLatSlip;                                              // 0x0098(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugNormalizedTireLoad;                                   // 0x009C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugWheelTorque;                                          // 0x00A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugLongForce;                                            // 0x00A4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              DebugLatForce;                                             // 0x00A8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     Location;                                                  // 0x00AC(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     OldLocation;                                               // 0x00B8(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FVector                                     Velocity;                                                  // 0x00C4(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JD3Z[0x10];                                    // 0x00D0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VehicleWheel");
		return ptr;
	}



	float GetSuspensionOffset();
	float GetSteerAngle();
	float GetRotationAngle();
};

// Class Engine.VertexAnimBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UVertexAnimBase : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VertexAnimBase");
		return ptr;
	}



};

// Class Engine.MorphTarget
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UMorphTarget : public UVertexAnimBase
{
public:
	unsigned char                                      UnknownData_LPO8[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}



};

// Class Engine.VertexAnimation
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UVertexAnimation : public UVertexAnimBase
{
public:
	int                                                NumAnimatedVerts;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AZD4[0x14];                                    // 0x0034(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VertexAnimation");
		return ptr;
	}



};

// Class Engine.WorldComposition
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData_JPID[0x20];                                    // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreaming*>                     TilesStreaming;                                            // 0x0048(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                               // 0x0058(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TArray<struct FEditorTileInitialState>             TileInitialState;                                          // 0x0060(0x0010) (ZeroConstructor)
	TArray<class ATileStreamingVolume*>                TileVolumes;                                               // 0x0070(0x0010) (ZeroConstructor, Transient)
	double                                             LastTimeSwitchedContainedVolumes;                          // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WCOB[0x8];                                     // 0x0088(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WorldComposition");
		return ptr;
	}



};

// Class Engine.AnimBlueprint
// 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
class UAnimBlueprint : public UBlueprint
{
public:
	class USkeleton*                                   TargetSkeleton;                                            // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TArray<struct FAnimGroupInfo>                      Groups;                                                    // 0x00C8(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimBlueprint");
		return ptr;
	}



};

// Class Engine.LevelScriptBlueprint
// 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
class ULevelScriptBlueprint : public UBlueprint
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelScriptBlueprint");
		return ptr;
	}



};

// Class Engine.DataTable
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     ImportPath;                                                // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_7OWU[0x50];                                    // 0x0040(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DataTable");
		return ptr;
	}



};

// Class Engine.DataTableFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DataTableFunctionLibrary");
		return ptr;
	}



	bool STATIC_GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);
	void STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<Engine_EEvaluateCurveTableResult>* OutResult, float* OutXY);
};

// Class Engine.DebugDrawService
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DebugDrawService");
		return ptr;
	}



};

// Class Engine.DialogueTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDialogueTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueTypes");
		return ptr;
	}



};

// Class Engine.GameplayStatics
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameplayStatics");
		return ptr;
	}



	void STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo);
	class UParticleSystemComponent* STATIC_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bAutoDestroy, bool bDontSpawnOutOfView, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive);
	class UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, bool bDontSpawnOutOfView, float DontSpawnOutOfViewCheckRadius, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive);
	class UDecalComponent* STATIC_SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, float LifeSpan);
	class UDecalComponent* STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void STATIC_SetSoundMode(const struct FName& SoundModeName);
	void STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	bool STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void STATIC_SetBaseSoundMix(class USoundMix* InSoundMix);
	bool STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void STATIC_PushSoundMixModifier(class USoundMix* InSoundMixModifier);
	void STATIC_PopSoundMixModifier(class USoundMix* InSoundMixModifier);
	void STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScaleMultiplier);
	class UAudioComponent* STATIC_PlaySoundAttached(class USoundBase* Sound, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAlwaysPlay);
	void STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAlwaysPlay);
	void STATIC_PlaySound(class UObject* WorldContextObject, class USoundCue* InSoundCue, class USceneComponent* AttachComponent, const struct FName& AttachName, bool bFollow, float VolumeMultiplier, float PitchMultiplier);
	class UAudioComponent* STATIC_PlayDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void STATIC_OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);
	void STATIC_LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	bool STATIC_IsGameWorld(class UObject* WorldContextObject);
	bool STATIC_IsGamePaused(class UObject* WorldContextObject);
	struct FIntVector STATIC_GetWorldOriginLocation(class UObject* WorldContextObject);
	float STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject);
	TEnumAsByte<Engine_EPhysicalSurface> STATIC_GetSurfaceType(const struct FHitResult& Hit);
	class ULevelStreaming* STATIC_GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);
	float STATIC_GetRealTimeSeconds(class UObject* WorldContextObject);
	class APawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class ACharacter* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);
	struct FString STATIC_GetPlatformName();
	class UClass* STATIC_GetObjectClass(class UObject* Object);
	float STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AGameState* STATIC_GetGameState(class UObject* WorldContextObject);
	class AGameMode* STATIC_GetGameMode(class UObject* WorldContextObject);
	class UGameInstance* STATIC_GetGameInstance(class UObject* WorldContextObject);
	float STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject);
	void STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);
	void STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);
	void STATIC_GetActorArrayBounds(TArray<class AActor*> actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector STATIC_GetActorArrayAverageLocation(TArray<class AActor*> actors);
	void STATIC_GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	class AActor* STATIC_FinishSpawningActor(class AActor* Actor, const struct UObject_FTransform& SpawnTransform);
	void STATIC_EnableLiveStreaming(bool Enable);
	bool STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void STATIC_DeactivateReverbEffect(const struct FName& TagName);
	class USaveGame* STATIC_CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint);
	class USaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);
	class APlayerController* STATIC_CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn);
	void STATIC_ClearSoundMixModifiers();
	void STATIC_BreakHitResult_OLD(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem);
	void STATIC_BreakHitResult(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, bool* BlockingHit);
	struct FVector STATIC_BPPointPlaneProject(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm);
	float STATIC_BPPointPlaneDist(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm);
	bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<Engine_ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
	class AActor* STATIC_BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct UObject_FTransform& SpawnTransform, bool bNoCollisionFail);
	class AActor* STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct UObject_FTransform& SpawnTransform, bool bNoCollisionFail);
	bool STATIC_AreAnyListenersWithinRange(const struct FVector& Location, float MaximumRange);
	bool STATIC_ApplyRadialDamageIgnoreDamageActors(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, TArray<class AActor*> IgnoreDamageActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel, float Impulse);
	bool STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel, float Impulse);
	void STATIC_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse, bool bForceCollisionCheck, TEnumAsByte<Engine_ECollisionChannel> ForceCollisionCheckTraceChannel);
	void STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse);
	void STATIC_ActivateReverbEffect(class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);
};

// Class Engine.HeadMountedDisplayFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HeadMountedDisplayFunctionLibrary");
		return ptr;
	}



	void STATIC_ResetOrientationAndPosition(float Yaw);
	bool STATIC_IsInLowPersistenceMode();
	bool STATIC_IsHeadMountedDisplayEnabled();
	bool STATIC_HasValidTrackingPosition();
	float STATIC_GetScreenPercentage();
	void STATIC_GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane);
	void STATIC_GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition);
	void STATIC_EnableLowPersistenceMode(bool bEnable);
};

// Class Engine.KismetArrayLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetArrayLibrary");
		return ptr;
	}



	void STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);
	void STATIC_FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);
	void STATIC_Array_Shuffle(TArray<int> TargetArray, class UArrayProperty* ArrayProperty);
	void STATIC_Array_Set(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int index, int Item, bool bSizeToFit);
	void STATIC_Array_Resize(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int Size);
	bool STATIC_Array_RemoveItem(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int Item);
	void STATIC_Array_Remove(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int IndexToRemove);
	int STATIC_Array_Length(TArray<int> TargetArray, class UArrayProperty* ArrayProperty);
	int STATIC_Array_LastIndex(TArray<int> TargetArray, class UArrayProperty* ArrayProperty);
	bool STATIC_Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest);
	void STATIC_Array_Insert(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int newItem, int index);
	void STATIC_Array_Get(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int index, int* Item);
	int STATIC_Array_Find(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int ItemToFind);
	bool STATIC_Array_Contains(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int ItemToFind);
	void STATIC_Array_Clear(TArray<int> TargetArray, class UArrayProperty* ArrayProperty);
	void STATIC_Array_Append(TArray<int> TargetArray, class UArrayProperty* TargetArrayProperty, TArray<int> SourceArray, class UArrayProperty* SourceArrayProperty);
	int STATIC_Array_AddUnique(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int newItem);
	int STATIC_Array_Add(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int newItem);
};

// Class Engine.KismetInputLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetInputLibrary");
		return ptr;
	}



	bool STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);
	bool STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
	float STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
	struct FKey STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
	bool STATIC_InputEvent_IsShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRepeat(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsAltDown(const struct FInputEvent& Input);
	struct FKey STATIC_GetKey(const struct FKeyboardEvent& Input);
	bool STATIC_EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	int STATIC_ControllerEvent_GetUserIndex(const struct FControllerEvent& Input);
	struct FKey STATIC_ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input);
	float STATIC_ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input);
	void STATIC_CalibrateTilt();
};

// Class Engine.KismetMaterialLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetMaterialLibrary");
		return ptr;
	}



	void STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);
	void STATIC_ResetMaterialParameterCollectionInstance(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection);
	struct FLinearColor STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	float STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent);
};

// Class Engine.KismetMathLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetMathLibrary");
		return ptr;
	}



	int STATIC_Xor_IntInt(int A, int B);
	float STATIC_WrapAngle(float degrees);
	float STATIC_VSizeSquared2D(const struct FVector2D& A);
	float STATIC_VSizeSquared(const struct FVector& A);
	float STATIC_VSize2D(const struct FVector2D& A);
	float STATIC_VSize(const struct FVector& A);
	struct FVector STATIC_VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	struct FVector STATIC_VInterpTo_SnapWithinDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist);
	struct FVector STATIC_VInterpTo_SnapPastDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist);
	struct FVector STATIC_VInterpTo_Constant_SnapWithinDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist);
	struct FVector STATIC_VInterpTo_Constant_SnapPastDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist);
	struct FVector STATIC_VInterpTo_Constant_ClampDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist);
	struct FVector STATIC_VInterpTo_Constant(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VInterpTo_ClampDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist);
	struct FVector STATIC_VInterpTo(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime STATIC_UtcNow();
	struct FVector STATIC_TransformLocation(const struct UObject_FTransform& T, const struct FVector& Location);
	struct FVector STATIC_TransformDirection(const struct UObject_FTransform& T, const struct FVector& Direction);
	struct FDateTime STATIC_Today();
	struct UObject_FTransform STATIC_TLerp(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha);
	struct UObject_FTransform STATIC_TInterpTo(const struct UObject_FTransform& current, const struct UObject_FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan STATIC_TimespanZeroValue();
	float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan STATIC_TimespanMinValue();
	struct FTimespan STATIC_TimespanMaxValue();
	struct UObject_FTransform STATIC_TEase(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Tan(float A);
	struct FVector STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int STATIC_Subtract_IntInt(int A, int B);
	float STATIC_Subtract_FloatFloat(float A, float B);
	double STATIC_Subtract_DoubleFloat(double A, float B);
	double STATIC_Subtract_DoubleDouble(double A, double B);
	struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Square(float A);
	float STATIC_Sqrt(float A);
	float STATIC_Sin(float A);
	int STATIC_SignOfInteger(int A);
	float STATIC_SignOfFloat(float A);
	void STATIC_SetRandomStreamSeed(struct FRandomStream* Stream, int NewSeed);
	struct FVector STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct UObject_FTransform STATIC_SelectTransform(const struct UObject_FTransform& A, const struct UObject_FTransform& B, bool bPickA);
	struct FString STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int STATIC_SelectInt(int A, int B, bool bPickA);
	float STATIC_SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	void STATIC_SeedRandomStream(struct FRandomStream* Stream);
	int STATIC_Round(float A);
	struct FRotator STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator STATIC_RInterpTo_PerAxis(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis);
	struct FRotator STATIC_RInterpTo_Constant_PerAxis(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis);
	struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator STATIC_RInterpTo(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	void STATIC_ResetRandomStream(const struct FRandomStream& Stream);
	struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector STATIC_RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle);
	struct FVector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVector();
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator STATIC_RandomRotator(bool bRoll);
	struct FVector STATIC_RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
	int STATIC_RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);
	int STATIC_RandomIntegerInRange(int Min, int Max);
	int STATIC_RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);
	int STATIC_RandomInteger(int Max);
	float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
	float STATIC_RandomFloatInRange(float Min, float Max);
	float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);
	float STATIC_RandomFloat();
	bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);
	bool STATIC_RandomBool();
	float STATIC_RadiansToDegrees(float A);
	struct FRotator STATIC_QInterpTo(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector STATIC_ProjectOnTo(const struct FVector& X, const struct FVector& Y);
	bool STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
	int STATIC_Percent_IntInt(int A, int B);
	float STATIC_Percent_FloatFloat(float A, float B);
	double STATIC_Percent_DoubleDouble(double A, double B);
	unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);
	int STATIC_Or_IntInt(int A, int B);
	struct FDateTime STATIC_Now();
	bool STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B);
	bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_NotEqual_IntInt(int A, int B);
	bool STATIC_NotEqual_FloatFloat(float A, float B);
	bool STATIC_NotEqual_DoubleDouble(double A, double B);
	bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_NotEqual_BoolBool(bool A, bool B);
	bool STATIC_Not_PreBool(bool A);
	int STATIC_Not_Int(int A);
	float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	struct FVector2D STATIC_Normal2D(const struct FVector2D& A);
	struct FVector STATIC_Normal(const struct FVector& A);
	struct FVector STATIC_NegateVector(const struct FVector& A);
	struct FRotator STATIC_NegateRotator(const struct FRotator& A);
	bool STATIC_NearlyEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	bool STATIC_NearlyEqual_DoubleDouble(double A, double B, float ErrorTolerance);
	int STATIC_MultiplyMultiply_IntInt(int Base, int Exp);
	float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
	float STATIC_MultiplyByPi(float Value);
	struct FVector STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	int STATIC_Multiply_IntInt(int A, int B);
	float STATIC_Multiply_IntFloat(int A, float B);
	float STATIC_Multiply_FloatFloat(float A, float B);
	double STATIC_Multiply_DoubleFloat(double A, float B);
	double STATIC_Multiply_DoubleDouble(double A, double B);
	unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);
	struct FVector STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	void STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
	int STATIC_Min(int A, int B);
	void STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int STATIC_Max(int A, int B);
	float STATIC_MapRange(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector2D STATIC_MakeVector2D(float X, float Y);
	struct FVector STATIC_MakeVector(float X, float Y, float Z);
	struct UObject_FTransform STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FRotator STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromZ(const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromY(const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromX(const struct FVector& X);
	struct FRotator STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FRotator STATIC_MakeRot(float Pitch, float Yaw, float Roll);
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
	float STATIC_Loge(float A);
	bool STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FVector STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_LessEqual_IntInt(int A, int B);
	bool STATIC_LessEqual_FloatFloat(float A, float B);
	bool STATIC_LessEqual_DoubleDouble(double A, double B);
	bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Less_IntInt(int A, int B);
	bool STATIC_Less_FloatFloat(float A, float B);
	bool STATIC_Less_DoubleDouble(double A, double B);
	bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);
	float STATIC_LerpAngle(float startDegrees, float endDegrees, float Alpha);
	float STATIC_Lerp(float A, float B, float Alpha);
	bool STATIC_IsRotatorInfiniteOrNaN(const struct FRotator& A);
	bool STATIC_IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	bool STATIC_IsMorning(const struct FDateTime& A);
	bool STATIC_IsLeapYear(int Year);
	bool STATIC_IsInfiniteOrNaN(const struct FVector& A);
	bool STATIC_IsAfternoon(const struct FDateTime& A);
	struct FVector STATIC_InverseTransformLocation(const struct UObject_FTransform& T, const struct FVector& Location);
	struct FVector STATIC_InverseTransformDirection(const struct UObject_FTransform& T, const struct FVector& Direction);
	bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
	struct FVector STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_GreaterEqual_IntInt(int A, int B);
	bool STATIC_GreaterEqual_FloatFloat(float A, float B);
	bool STATIC_GreaterEqual_DoubleDouble(double A, double B);
	bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Greater_IntInt(int A, int B);
	bool STATIC_Greater_FloatFloat(float A, float B);
	bool STATIC_Greater_DoubleDouble(double A, double B);
	bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);
	int STATIC_GetYear(const struct FDateTime& A);
	struct FVector STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors);
	struct FVector STATIC_GetUpVector(const struct FRotator& InRot);
	float STATIC_GetTotalSeconds(const struct FTimespan& A);
	float STATIC_GetTotalMinutes(const struct FTimespan& A);
	float STATIC_GetTotalMilliseconds(const struct FTimespan& A);
	float STATIC_GetTotalHours(const struct FTimespan& A);
	float STATIC_GetTotalDays(const struct FTimespan& A);
	struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);
	int STATIC_GetSeconds(const struct FTimespan& A);
	int STATIC_GetSecond(const struct FDateTime& A);
	struct FVector STATIC_GetRightVector(const struct FRotator& InRot);
	float STATIC_GetPI();
	int STATIC_GetMonth(const struct FDateTime& A);
	int STATIC_GetMinutes(const struct FTimespan& A);
	int STATIC_GetMinute(const struct FDateTime& A);
	float STATIC_GetMinElement(const struct FVector& A);
	int STATIC_GetMilliseconds(const struct FTimespan& A);
	int STATIC_GetMillisecond(const struct FDateTime& A);
	float STATIC_GetMaxElement(const struct FVector& A);
	int STATIC_GetHours(const struct FTimespan& A);
	int STATIC_GetHour12(const struct FDateTime& A);
	int STATIC_GetHour(const struct FDateTime& A);
	struct FVector STATIC_GetForwardVector(const struct FRotator& InRot);
	struct FTimespan STATIC_GetDuration(const struct FTimespan& A);
	struct FVector STATIC_GetDirectionVector(const struct FVector& From, const struct FVector& To);
	int STATIC_GetDays(const struct FTimespan& A);
	int STATIC_GetDayOfYear(const struct FDateTime& A);
	int STATIC_GetDay(const struct FDateTime& A);
	struct FDateTime STATIC_GetDate(const struct FDateTime& A);
	void STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	struct FTimespan STATIC_FromSeconds(float Seconds);
	struct FTimespan STATIC_FromMinutes(float Minutes);
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds);
	struct FTimespan STATIC_FromHours(float Hours);
	struct FTimespan STATIC_FromDays(float Days);
	float STATIC_Fraction(float A);
	int STATIC_FMod(float Dividend, float Divisor, float* Remainder);
	float STATIC_FMin(float A, float B);
	float STATIC_FMax(float A, float B);
	struct FVector STATIC_FlattenVectorNormal(const struct FVector& A);
	struct FVector STATIC_FlattenVector(const struct FVector& A);
	float STATIC_FInterpTo_Constant(float current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpTo(float current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	struct FRotator STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	int STATIC_FFloor(float A);
	float STATIC_FClamp(float Value, float Min, float Max);
	int STATIC_FCeil(float A);
	float STATIC_FAngleInterpTo(float CurrentDegrees, float TargetDegrees, float DeltaTime, float InterpSpeed);
	float STATIC_FAngleInterpEaseOut(float startAngle, float endAngle, float Alpha, float BlendExp);
	float STATIC_FAngleInterpEaseInOut(float startAngle, float endAngle, float Alpha, float BlendExp);
	float STATIC_FAngleInterpEaseIn(float startAngle, float endAngle, float Alpha, float BlendExp);
	float STATIC_Exp(float A);
	bool STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B);
	bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_EqualEqual_IntInt(int A, int B);
	bool STATIC_EqualEqual_FloatFloat(float A, float B);
	bool STATIC_EqualEqual_DoubleDouble(double A, double B);
	bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_EqualEqual_BoolBool(bool A, bool B);
	float STATIC_EaseAngle(float startAngle, float endAngle, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Ease(float A, float B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B);
	int STATIC_Divide_IntInt(int A, int B);
	float STATIC_Divide_FloatFloat(float A, float B);
	double STATIC_Divide_DoubleFloat(double A, float B);
	double STATIC_Divide_DoubleDouble(double A, double B);
	unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);
	float STATIC_DegTan(float A);
	float STATIC_DegSin(float A);
	float STATIC_DegreesToRadians(float A);
	float STATIC_DegCos(float A);
	float STATIC_DegAtan2(float A, float B);
	float STATIC_DegAsin(float A);
	float STATIC_DegAcos(float A);
	int STATIC_DaysInYear(int Year);
	int STATIC_DaysInMonth(int Year, int Month);
	struct FDateTime STATIC_DateTimeMinValue();
	struct FDateTime STATIC_DateTimeMaxValue();
	struct FVector STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	float STATIC_Cos(float A);
	struct UObject_FTransform STATIC_ConvertTransformToRelative(const struct UObject_FTransform& WorldTransform, const struct UObject_FTransform& LocalTransform);
	struct FVector2D STATIC_Conv_VectorToVector2D(const struct FVector& InVector);
	struct UObject_FTransform STATIC_Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator STATIC_Conv_VectorToRotator(const struct FVector& inVec);
	struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct FVector& inVec);
	struct FVector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FVector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);
	struct FVector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor);
	float STATIC_Conv_IntToFloat(int InInt);
	unsigned char STATIC_Conv_IntToByte(int InInt);
	bool STATIC_Conv_IntToBool(int InInt);
	struct FVector STATIC_Conv_FloatToVector(float InFloat);
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
	double STATIC_Conv_FloatToDouble(float InFloat);
	float STATIC_Conv_DoubleToFloat(double InDouble);
	struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct FColor& InColor);
	int STATIC_Conv_ByteToInt(unsigned char InByte);
	float STATIC_Conv_ByteToFloat(unsigned char InByte);
	int STATIC_Conv_BoolToInt(bool InBool);
	float STATIC_Conv_BoolToFloat(bool InBool);
	unsigned char STATIC_Conv_BoolToByte(bool InBool);
	struct UObject_FTransform STATIC_ComposeTransforms(const struct UObject_FTransform& A, const struct UObject_FTransform& B);
	struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct FVector STATIC_ClampVectorSize(const struct FVector& A, float Min, float Max);
	float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int STATIC_Clamp(int Value, int Min, int Max);
	struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void STATIC_BreakVector2D(const struct FVector2D& inVec, float* X, float* Y);
	void STATIC_BreakVector(const struct FVector& inVec, float* X, float* Y, float* Z);
	void STATIC_BreakTransform(const struct UObject_FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void STATIC_BreakRot(const struct FRotator& InRot, float* Pitch, float* Yaw, float* Roll);
	void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	struct FVector STATIC_BoundToCube(const struct FVector& A, float Radius);
	bool STATIC_BooleanXOR(bool A, bool B);
	bool STATIC_BooleanOR(bool A, bool B);
	bool STATIC_BooleanAND(bool A, bool B);
	float STATIC_Atan2(float A, float B);
	float STATIC_Asin(float A);
	int STATIC_And_IntInt(int A, int B);
	struct FVector STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Add_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int STATIC_Add_IntInt(int A, int B);
	float STATIC_Add_FloatFloat(float A, float B);
	double STATIC_Add_DoubleFloat(double A, float B);
	double STATIC_Add_DoubleDouble(double A, double B);
	struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Acos(float A);
	int STATIC_Abs_Int(int A);
	float STATIC_Abs(float A);
};

// Class Engine.KismetNodeHelperLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetNodeHelperLibrary");
		return ptr;
	}



	void STATIC_MarkBit(int* Data, int index);
	bool STATIC_HasUnmarkedBit(int Data, int NumBits);
	bool STATIC_HasMarkedBit(int Data, int NumBits);
	unsigned char STATIC_GetValidIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	int STATIC_GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	int STATIC_GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	int STATIC_GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	struct FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorIndex);
	struct FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorIndex);
	void STATIC_ClearBit(int* Data, int index);
	void STATIC_ClearAllBits(int* Data);
	bool STATIC_BitIsMarked(int Data, int index);
};

// Class Engine.KismetRenderingLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetRenderingLibrary");
		return ptr;
	}



	class UTexture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const struct FString& Name, TEnumAsByte<Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<Engine_ETextureMipGenSettings> MipSettings);
	void STATIC_ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);
	struct FColor STATIC_ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor STATIC_ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor STATIC_ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y);
	struct FColor STATIC_ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y);
	class UTexture2D* STATIC_ImportFileAsTexture2D(class UObject* WorldContextObject, const struct FString& FileName);
	void STATIC_ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const struct FString& FilePath, const struct FString& FileName);
	void STATIC_ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& FileName);
	void STATIC_EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);
	void STATIC_DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
	class UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<Engine_ETextureRenderTargetFormat> Format);
	void STATIC_ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture);
	void STATIC_ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void STATIC_BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
};

// Class Engine.KismetStringLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetStringLibrary");
		return ptr;
	}



	struct FString STATIC_TrimTrailing(const struct FString& SourceString);
	struct FString STATIC_Trim(const struct FString& SourceString);
	struct FString STATIC_ToUpper(const struct FString& SourceString);
	struct FString STATIC_ToLower(const struct FString& SourceString);
	bool STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	bool STATIC_Split(const struct FString& SourceString, const struct FString& InStr, struct FString* LeftS, struct FString* RightS, TEnumAsByte<CoreUObject_ESearchCase> SearchCase, TEnumAsByte<CoreUObject_ESearchDir> SearchDir);
	struct FString STATIC_RightPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_RightChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Right(const struct FString& SourceString, int Count);
	struct FString STATIC_Reverse(const struct FString& SourceString);
	int STATIC_ReplaceInline(struct FString* SourceString, const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	struct FString STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	TArray<struct FString> STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString STATIC_Mid(const struct FString& SourceString, int Start, int Count);
	bool STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int STATIC_Len(const struct FString& S);
	struct FString STATIC_LeftPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_LeftChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Left(const struct FString& SourceString, int Count);
	struct FString STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool STATIC_IsNumeric(const struct FString& SourceString);
	struct FString STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int Length);
	int STATIC_GetCharacterAsNumber(const struct FString& SourceString, int index);
	TArray<struct FString> STATIC_GetCharacterArrayFromString(const struct FString& SourceString);
	int STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* InArray);
	struct FString STATIC_Conv_VectorToString(const struct FVector& inVec);
	struct FString STATIC_Conv_Vector2dToString(const struct FVector2D& inVec);
	struct FString STATIC_Conv_TransformToString(const struct UObject_FTransform& InTrans);
	struct FName STATIC_Conv_StringToName(const struct FString& InString);
	int STATIC_Conv_StringToInt(const struct FString& InString);
	float STATIC_Conv_StringToFloat(const struct FString& InString);
	double STATIC_Conv_StringToDouble(const struct FString& InString);
	struct FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);
	struct FString STATIC_Conv_ObjectToString(class UObject* InObj);
	struct FString STATIC_Conv_NameToString(const struct FName& InName);
	struct FString STATIC_Conv_IntToString(int InInt);
	struct FString STATIC_Conv_FloatToString(float InFloat);
	struct FString STATIC_Conv_DoubleToString(double InDouble);
	struct FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString STATIC_Conv_ByteToString(unsigned char InByte);
	struct FString STATIC_Conv_BoolToString(bool InBool);
	struct FString STATIC_Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix);
	struct FString STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);
	struct FString STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);
	struct FString STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);
	struct FString STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int InInt, const struct FString& Suffix);
	struct FString STATIC_BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix);
	struct FString STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);
	struct FString STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);
};

// Class Engine.KismetSystemLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetSystemLibrary");
		return ptr;
	}



	void STATIC_SwitchNetworkMode(class UObject* WorldContextObject, TEnumAsByte<Engine_ENetModeBP>* OutNetworkMode);
	void STATIC_StackTrace();
	bool STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapActorsSimple(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<Engine_EObjectTypeQuery> ObjectType, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void STATIC_ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void STATIC_ShowAdBanner(bool bShowOnBottomOfScreen);
	void STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);
	void STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct UObject_FTransform& Value);
	void STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);
	void STATIC_SetSupressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value);
	void STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);
	void STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);
	void STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);
	void STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);
	void STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);
	void STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);
	void STATIC_SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value);
	void STATIC_SetDoublePropertyByName(class UObject* Object, const struct FName& PropertyName, double Value);
	void STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);
	void STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);
	void STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);
	void STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<Engine_EQuitPreference> QuitPreference);
	void STATIC_PrintWarning(const struct FString& InString);
	void STATIC_PrintString(class UObject* WorldContextObject, const struct FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, int AtIndex);
	void STATIC_MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<Engine_EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo, bool bSweep);
	struct FText STATIC_MakeLiteralText(const struct FText& Value);
	struct FString STATIC_MakeLiteralString(const struct FString& Value);
	struct FName STATIC_MakeLiteralName(const struct FName& Value);
	int STATIC_MakeLiteralInt(int Value);
	float STATIC_MakeLiteralFloat(float Value);
	unsigned char STATIC_MakeLiteralByte(unsigned char Value);
	bool STATIC_MakeLiteralBool(bool Value);
	bool STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	void STATIC_LaunchURL(const struct FString& URL);
	void STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_SetTimerForNextTickDelegate(const struct FScriptDelegate& Delegate, bool bLooping);
	void STATIC_K2_SetTimerForNextTick(class UObject* Object, const struct FString& FunctionName, bool bLooping);
	void STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping);
	void STATIC_K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping);
	void STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_IsValid(class UObject* Object);
	bool STATIC_IsStandalone(class UObject* WorldContextObject);
	bool STATIC_IsServer(class UObject* WorldContextObject);
	void STATIC_IsRunningOnServer(class UObject* WorldContextObject, TEnumAsByte<Engine_ENetworkModeResult>* OutNetworkMode);
	bool STATIC_IsPackagedForDistribution();
	bool STATIC_IsListenServer(class UObject* WorldContextObject);
	bool STATIC_IsDedicatedServer(class UObject* WorldContextObject);
	bool STATIC_IsClient(class UObject* WorldContextObject);
	void STATIC_HideAdBanner();
	struct FString STATIC_GetUniqueDeviceId();
	int STATIC_GetRenderingMaterialQualityLevel();
	int STATIC_GetRenderingDetailMode();
	struct FString STATIC_GetPlatformUserName();
	double STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject);
	struct FString STATIC_GetGameName();
	struct FString STATIC_GetEngineVersion();
	struct FString STATIC_GetDisplayName(class UObject* Object);
	void STATIC_GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	struct FString STATIC_GetClassDisplayName(class UClass* Class);
	void STATIC_GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	void STATIC_GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceCloseAdBanner();
	void STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject);
	void STATIC_FlushDebugStrings(class UObject* WorldContextObject);
	void STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer);
	void STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugLineTraceHitResult(class UObject* WorldContextObject, const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool bPersistent);
	void STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct UObject_FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct UObject_FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Thickness, float Duration, bool bPersistent);
	void STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float LifeTime, bool bPersistent);
	void STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugCapsuleWithExtents(class UObject* WorldContextObject, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool bPersistent);
	void STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool bPersistent);
	void STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	class UObject* STATIC_Conv_InterfaceToObject();
	void STATIC_ControlScreensaver(bool bAllowScreenSaver);
	bool STATIC_ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_CollectGarbage();
	bool STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_CanRunCosmeticEvents(class UObject* WorldContextObject, TEnumAsByte<Engine_ENetworkModeResult>* OutNetworkMode);
	bool STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void BlueprintTimerDynamicDelegate__DelegateSignature();
	struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
};

// Class Engine.KismetTextLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetTextLibrary");
		return ptr;
	}



	struct FText STATIC_TextTrimTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPreceding(const struct FText& InText);
	bool STATIC_TextIsTransient(const struct FText& InText);
	bool STATIC_TextIsEmpty(const struct FText& InText);
	bool STATIC_TextIsCultureInvariant(const struct FText& InText);
	bool STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText STATIC_GetEmptyText();
	struct FText STATIC_Format(const struct FText& InPattern, TArray<struct FFormatTextArgument> InArgs);
	bool STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);
	bool STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FString STATIC_Conv_TextToString(const struct FText& InText);
	struct FText STATIC_Conv_StringToText(const struct FString& InString);
	struct FText STATIC_Conv_NameToText(const struct FName& InName);
	struct FText STATIC_Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_FloatToText(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_Conv_ByteToText(unsigned char Value);
	struct FText STATIC_Conv_BoolToText(bool InBool);
	struct FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText STATIC_AsTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsPercent_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText STATIC_AsCurrency_Integer(int Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
};

// Class Engine.CheckBoxStyleAsset
// 0x0508 (FullSize[0x0530] - InheritedSize[0x0028])
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                             // 0x0028(0x0508) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CheckBoxStyleAsset");
		return ptr;
	}



};

// Class Engine.ClipPadEntry
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	struct FString                                     Text;                                                      // 0x0038(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ClipPadEntry");
		return ptr;
	}



};

// Class Engine.CollisionProfile
// 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
class UCollisionProfile : public UObject
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                  // 0x0028(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                   // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                              // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                          // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                 // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData_87PG[0xD0];                                    // 0x0078(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CollisionProfile");
		return ptr;
	}



};

// Class Engine.Commandlet
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                           // 0x0028(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     HelpUsage;                                                 // 0x0038(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     HelpWebLink;                                               // 0x0048(0x0010) (BlueprintReadOnly, ZeroConstructor)
	TArray<struct FString>                             HelpParamNames;                                            // 0x0058(0x0010) (BlueprintReadOnly, ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                                     // 0x0068(0x0010) (BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      IsServer : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      IsClient : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      IsEditor : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      LogToConsole : 1;                                          // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ShowErrorCount : 1;                                        // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_RY0G[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Commandlet");
		return ptr;
	}



};

// Class Engine.SmokeTestCommandlet
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class USmokeTestCommandlet : public UCommandlet
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}



};

// Class Engine.Console
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData_PC69[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULocalPlayer*                                ConsoleTargetPlayer;                                       // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DefaultTexture_Black;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DefaultTexture_White;                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J6OQ[0x18];                                    // 0x0050(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             HistoryBuffer;                                             // 0x0068(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_LH4O[0x78];                                    // 0x0078(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}



};

// Class Engine.CurveLinearColor
// 0x01A0 (FullSize[0x01E0] - InheritedSize[0x0040])
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                          // 0x0040(0x01A0)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveLinearColor");
		return ptr;
	}



	struct FLinearColor GetLinearColorValue(float InTime);
};

// Class Engine.CurveVector
// 0x0148 (FullSize[0x0188] - InheritedSize[0x0040])
class UCurveVector : public UCurveBase
{
public:
	struct FInterpCurveVector                          VectorKeys;                                                // 0x0040(0x0010) (ZeroConstructor, Deprecated)
	struct FRichCurve                                  FloatCurves[0x3];                                          // 0x0050(0x0138)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveVector");
		return ptr;
	}



	struct FVector GetVectorValue(float InTime);
};

// Class Engine.CurveEdPresetCurve
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UCurveEdPresetCurve : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}



};

// Class Engine.CurveTable
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UCurveTable : public UObject
{
public:
	struct FString                                     ImportPath;                                                // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_JK0I[0x50];                                    // 0x0038(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveTable");
		return ptr;
	}



};

// Class Engine.TireType
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_183Y[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TireType");
		return ptr;
	}



};

// Class Engine.DestructibleFractureSettings
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class UDestructibleFractureSettings : public UObject
{
public:
	int                                                CellSiteCount;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFractureMaterial                           FractureMaterialDesc;                                      // 0x002C(0x0024) (Edit, Transient)
	int                                                RandomSeed;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2UKE[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector>                             VoronoiSites;                                              // 0x0058(0x0010) (ZeroConstructor)
	int                                                OriginalSubmeshCount;                                      // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HJBP[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  Materials;                                                 // 0x0070(0x0010) (ZeroConstructor)
	TArray<struct FDestructibleChunkParameters>        ChunkParameters;                                           // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_3KSB[0x28];                                    // 0x0090(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleFractureSettings");
		return ptr;
	}



};

// Class Engine.DeviceProfile
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UDeviceProfile : public UObject
{
public:
	struct FString                                     DeviceType;                                                // 0x0028(0x0010) (Edit, ZeroConstructor, Config, EditConst)
	struct FString                                     BaseProfileName;                                           // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	class UObject*                                     Parent;                                                    // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8PDW[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             CVars;                                                     // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData_9F9Z[0x8];                                     // 0x0068(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DeviceProfile");
		return ptr;
	}



};

// Class Engine.DeviceProfileManager
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_VQ80[0x30];                                    // 0x0038(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DeviceProfileManager");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant4Vector
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0078(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              G;                                                         // 0x007C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              B;                                                         // 0x0080(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              A;                                                         // 0x0084(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FLinearColor                                Constant;                                                  // 0x0088(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	float                                              Bias;                                                      // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Scale;                                                     // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCosine
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	float                                              Period;                                                    // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T9SW[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDDX
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDDX");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDDY
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDDY");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDepthFade
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                 // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            FadeDistance;                                              // 0x00B0(0x0038) (ZeroConstructor)
	float                                              OpacityDefault;                                            // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FadeDistanceDefault;                                       // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthFade");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EDepthOfFieldFunctionValue>     FunctionValue;                                             // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WUWS[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Depth;                                                     // 0x0080(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0118 (FullSize[0x0190] - InheritedSize[0x0078])
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Inputs[0x4];                                               // 0x00B0(0x00E0) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFeatureLevelSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFmod
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFontSample
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                      // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                FontTexturePage;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J8GO[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                             // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       ExpressionGUID;                                            // 0x0090(0x0010) (ZeroConstructor)
	struct FName                                       Group;                                                     // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFrac
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFresnel
// 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                                // 0x0078(0x0038) (ZeroConstructor)
	float                                              Exponent;                                                  // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MZZN[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            BaseReflectFractionIn;                                     // 0x00B8(0x0038) (ZeroConstructor)
	float                                              BaseReflectFraction;                                       // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1HGJ[0x4];                                     // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Normal;                                                    // 0x00F8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFunctionInput
// 0x0098 (FullSize[0x0110] - InheritedSize[0x0078])
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                   // 0x0078(0x0038) (ZeroConstructor)
	struct FString                                     InputName;                                                 // 0x00B0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     Description;                                               // 0x00C0(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       ID;                                                        // 0x00D0(0x0010) (ZeroConstructor)
	TEnumAsByte<Engine_EFunctionInputType>             inputType;                                                 // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z0ME[0xF];                                     // 0x00E1(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector4                                    PreviewValue;                                              // 0x00F0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                             // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UJWT[0x3];                                     // 0x0101(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SortPriority;                                              // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCompilingFunctionPreview : 1;                             // 0x0108(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_WN4I[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLandscapeLayerWeight
// 0x0098 (FullSize[0x0110] - InheritedSize[0x0078])
class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                      // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Layer;                                                     // 0x00B0(0x0038) (ZeroConstructor)
	struct FName                                       ParameterName;                                             // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PreviewWeight;                                             // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ConstBase;                                                 // 0x00F4(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       ExpressionGUID;                                            // 0x0100(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerWeight");
		return ptr;
	}



};

// Class Engine.AnimBlueprintGeneratedClass
// 0x0048 (FullSize[0x0220] - InheritedSize[0x01D8])
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                        // 0x01D8(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                            // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                              // 0x01F0(0x0010) (ZeroConstructor)
	int                                                RootAnimNodeIndex;                                         // 0x0200(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NB9L[0x1C];                                    // 0x0204(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimBlueprintGeneratedClass");
		return ptr;
	}



};

// Class Engine.BoneMaskFilter
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                                // 0x0028(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoneMaskFilter");
		return ptr;
	}



};

// Class Engine.BookMark
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                  // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    Rotation;                                                  // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             HiddenLevels;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCrossProduct
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFloor
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLandscapeLayerSwitch
// 0x0090 (FullSize[0x0108] - InheritedSize[0x0078])
class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            LayerUsed;                                                 // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            LayerNotUsed;                                              // 0x00B0(0x0038) (ZeroConstructor)
	struct FName                                       ParameterName;                                             // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      PreviewUsed : 1;                                           // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_WH7Z[0x3];                                     // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       ExpressionGUID;                                            // 0x00F4(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_MQ30[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                              // 0x0098(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleColor
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleDirection");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMotionBlurFade");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticlePositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRadius");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRelativeTime");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSize
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSpeed");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceFadeAmount");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelNormalWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSquareRoot
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticBool
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                 // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1VU1[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		return ptr;
	}



};

// Class Engine.SkeletalMeshSocket
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	struct FName                                       BoneName;                                                  // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeLocation;                                          // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeScale;                                             // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRotateBoneScaleForSocket : 1;                             // 0x005C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_AXTI[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}



	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
};

// Class Engine.SkyLightData
// 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
class USkyLightData : public UObject
{
public:
	struct FString                                     ComponentName;                                             // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_0HOL[0x90];                                    // 0x0038(0x0090) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkyLightData");
		return ptr;
	}



};

// Class Engine.ButtonStyleAsset
// 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                               // 0x0028(0x0248) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ButtonStyleAsset");
		return ptr;
	}



};

// Class Engine.CameraAnim
// 0x0390 (FullSize[0x03B8] - InheritedSize[0x0028])
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                         // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AnimLength;                                                // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                        BoundingBox;                                               // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              BaseFOV;                                                   // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1I6W[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        BasePostProcessSettings;                                   // 0x0058(0x0358)
	float                                              BasePostProcessBlendWeight;                                // 0x03B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AATP[0x4];                                     // 0x03B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}



};

// Class Engine.CameraAnimInst
// 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UInterpGroupInst*                            InterpGroupInst;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_9S11[0x1C];                                    // 0x0038(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlayRate;                                                  // 0x0054(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_N6XR[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpTrackMove*                            MoveTrack;                                                 // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class UInterpTrackInstMove*                        MoveInst;                                                  // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace;                                                 // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WFZW[0x97];                                    // 0x0079(0x0097) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}



	void Stop(bool bImmediate);
	void SetDuration(float NewDuration);
};

// Class Engine.DialogueVoice
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<Engine_EGrammaticalGender>             Gender;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_EGrammaticalNumber>             Plurality;                                                 // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_DB6G[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       LocalizationGUID;                                          // 0x002C(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_7SPS[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueVoice");
		return ptr;
	}



};

// Class Engine.DialogueWave
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                               // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_GM75[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0030(0x0010) (Edit, ZeroConstructor)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                          // 0x0050(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueWave");
		return ptr;
	}



};

// Class Engine.Distribution
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData_221A[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Distribution");
		return ptr;
	}



};

// Class Engine.DistributionFloat
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_59WA[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloat");
		return ptr;
	}



};

// Class Engine.DistributionFloatConstant
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z2Q4[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}



};

// Class Engine.DistributionFloatParameterBase
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                             // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinInput;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxInput;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinOutput;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxOutput;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamMode;                                                 // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GDIV[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}



};

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}



};

// Class Engine.DistributionFloatSoundParameter
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatSoundParameter");
		return ptr;
	}



};

// Class Engine.InterpTrackInst
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInst : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}



};

// Class Engine.InterpTrackInstProperty
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UProperty*                                   InterpProperty;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                     PropertyOuterObjectInst;                                   // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}



};

// Class Engine.InterpTrackInstColorProp
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_NDKZ[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      ResetColor;                                                // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_733B[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatProp
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_PIDW[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResetFloat;                                                // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0S0Q[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}



};

// Class Engine.MaterialExpressionComment
// 0x0028 (FullSize[0x00A0] - InheritedSize[0x0078])
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                     // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SizeY;                                                     // 0x007C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FString                                     Text;                                                      // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FLinearColor                                CommentColor;                                              // 0x0090(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}



};

// Class Engine.MaterialExpressionComponentMask
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	unsigned char                                      R : 1;                                                     // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      G : 1;                                                     // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      B : 1;                                                     // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      A : 1;                                                     // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_G6F2[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9S72[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              G;                                                         // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCustom
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                      // 0x0078(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<Engine_ECustomMaterialOutputType>      OutputType;                                                // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4RJB[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Description;                                               // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomInput>                        Inputs;                                                    // 0x00A0(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCustomTexture
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                   // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomTexture");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLightmassReplace
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                  // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Lightmass;                                                 // 0x00B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLightVector
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLinearInterpolate
// 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Alpha;                                                     // 0x00E8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstAlpha;                                                // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VNWF[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}



};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x05E8 (FullSize[0x0660] - InheritedSize[0x0078])
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                 // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Metallic;                                                  // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Specular;                                                  // 0x00E8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Roughness;                                                 // 0x0120(0x0038) (ZeroConstructor)
	struct FExpressionInput                            EmissiveColor;                                             // 0x0158(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Opacity;                                                   // 0x0190(0x0038) (ZeroConstructor)
	struct FExpressionInput                            OpacityMask;                                               // 0x01C8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Normal;                                                    // 0x0200(0x0038) (ZeroConstructor)
	struct FExpressionInput                            WorldPositionOffset;                                       // 0x0238(0x0038) (ZeroConstructor)
	struct FExpressionInput                            WorldDisplacement;                                         // 0x0270(0x0038) (ZeroConstructor)
	struct FExpressionInput                            TessellationMultiplier;                                    // 0x02A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            SubsurfaceColor;                                           // 0x02E0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            ClearCoat;                                                 // 0x0318(0x0038) (ZeroConstructor)
	struct FExpressionInput                            ClearCoatRoughness;                                        // 0x0350(0x0038) (ZeroConstructor)
	struct FExpressionInput                            AmbientOcclusion;                                          // 0x0388(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Refraction;                                                // 0x03C0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            SSAOIntensity;                                             // 0x03F8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            SSAOInfluence;                                             // 0x0430(0x0038) (ZeroConstructor)
	struct FExpressionInput                            SSAOLightInfluence;                                        // 0x0468(0x0038) (ZeroConstructor)
	struct FExpressionInput                            CustomizedUVs[0x8];                                        // 0x04A0(0x01C0) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMakeMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionOneMinus
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPanner
// 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Time;                                                      // 0x00B0(0x0038) (ZeroConstructor)
	float                                              SpeedX;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SpeedY;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint32_t                                           ConstCoordinate;                                           // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bFractionalPart;                                           // 0x00F4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MJVZ[0x3];                                     // 0x00F5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}



};

// Class Engine.MaterialExpressionScalarParameter
// 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5JLL[0x4];                                     // 0x009C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleRotationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotation
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                             // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                          // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      Scale : 1;                                                 // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1T1W[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRate
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                         // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}



};

// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                        // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MaxInitialRotation;                                        // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotation");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityCone
// 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                     // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Velocity;                                                  // 0x0070(0x0038) (Edit, ContainsInstancedReference)
	struct FVector                                     Direction;                                                 // 0x00A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Q5LT[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		return ptr;
	}



};

// Class Engine.CameraModifier_CameraShake
// 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FCameraShakeInstance>                ActiveShakes;                                              // 0x0058(0x0010) (ZeroConstructor)
	float                                              SplitScreenShakeScale;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_SAZZ[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}



};

// Class Engine.CameraShake
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UCameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                                       // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_59HY[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OscillationDuration;                                       // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OscillationBlendInTime;                                    // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OscillationBlendOutTime;                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FROscillator                                RotOscillation;                                            // 0x0038(0x0024) (Edit)
	struct FVOscillator                                LocOscillation;                                            // 0x005C(0x0024) (Edit)
	struct FFOscillator                                FOVOscillation;                                            // 0x0080(0x000C) (Edit)
	unsigned char                                      UnknownData_4E2I[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraAnim*                                 Anim;                                                      // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AnimPlayRate;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AnimScale;                                                 // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AnimBlendInTime;                                           // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AnimBlendOutTime;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIgnoreWhenBasedOnDino : 1;                                // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRandomAnimSegment : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreWorldShakeScaling : 1;                              // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceUseCameraShakeScale : 1;                             // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ZPO3[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RandomAnimSegmentDuration;                                 // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}



};

// Class Engine.Canvas
// 0x00D8 (FullSize[0x0100] - InheritedSize[0x0028])
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                      // 0x0028(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OrgY;                                                      // 0x002C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ClipX;                                                     // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ClipY;                                                     // 0x0034(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      DrawColor;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCenterX : 1;                                              // 0x003C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCenterY : 1;                                              // 0x003C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNoSmooth : 1;                                             // 0x003C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_9BR6[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SizeX;                                                     // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SizeY;                                                     // 0x0044(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DE43[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPlane                                      ColorModulate;                                             // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  GradientTexture0;                                          // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UReporterGraph*                              ReporterGraph;                                             // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VKE5[0x88];                                    // 0x0078(0x0088) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}



	void SetDrawColor(const struct FColor& C);
	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBoxEx(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor, TEnumAsByte<Engine_EBlendMode> BlendMode);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	bool IsPositionInFrontOfViewport(const struct FVector& Location);
	float BPDrawTextWrapped(class UFont* InFont, const struct FString& InText, float X, float Y, float XWidth, float YWidth, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY, const struct FVector2D& SpacingAdjust);
	float BPDrawTextCentered(class UFont* InFont, const struct FString& InText, float X, float Y, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY);
};

// Class Engine.Channel
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OJL8[0x50];                                    // 0x0030(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}



};

// Class Engine.ActorChannel
// 0x01D0 (FullSize[0x0250] - InheritedSize[0x0080])
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                     // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      ActorClass;                                                // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X0PR[0x1C0];                                   // 0x0090(0x01C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}



};

// Class Engine.BattlEyeChannel
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UBattlEyeChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_A3G6[0x18];                                    // 0x0080(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BattlEyeChannel");
		return ptr;
	}



};

// Class Engine.ClassInfoChannel
// 0x0080 (FullSize[0x0100] - InheritedSize[0x0080])
class UClassInfoChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_NP3Q[0x80];                                    // 0x0080(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ClassInfoChannel");
		return ptr;
	}



};

// Class Engine.ControlChannel
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_F6HQ[0x18];                                    // 0x0080(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}



};

// Class Engine.VoiceChannel
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_YY4I[0x10];                                    // 0x0080(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}



};

// Class Engine.DistributionFloatUniformCurve
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}



};

// Class Engine.DistributionVector
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsDirty : 1;                                              // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_VTAG[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVector");
		return ptr;
	}



};

// Class Engine.DistributionVectorConstant
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLockAxes : 1;                                             // 0x0044(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_M4RL[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5A4V[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}



};

// Class Engine.DistributionVectorParameterBase
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                             // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MinInput;                                                  // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MaxInput;                                                  // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MinOutput;                                                 // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MaxOutput;                                                 // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamModes[0x3];                                           // 0x0088(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RI4H[0x5];                                     // 0x008B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}



};

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}



};

// Class Engine.DistributionVectorConstantCurve
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                             // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_O93W[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_37BK[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}



};

// Class Engine.DistributionVectorUniform
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                       // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     Min;                                                       // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLockAxes : 1;                                             // 0x0050(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_VC94[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x0055(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseExtremes : 1;                                          // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_J4TC[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}



};

// Class Engine.DistributionVectorUniformCurve
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                            // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bLockAxes2 : 1;                                            // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_JVJI[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes[0x2];                                           // 0x004C(0x0002) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x004E(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1VXB[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseExtremes : 1;                                          // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_RLFZ[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}



};

// Class Engine.DynamicBlueprintBinding
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDynamicBlueprintBinding : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DynamicBlueprintBinding");
		return ptr;
	}



};

// Class Engine.ComponentDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ComponentDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputDelegateBinding
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputActionDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputActionDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputAxisDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputAxisDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputAxisKeyDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputVectorAxisDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputKeyDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                  // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputKeyDelegateBinding");
		return ptr;
	}



};

// Class Engine.InputTouchDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputTouchDelegateBinding");
		return ptr;
	}



};

// Class Engine.DynamicCaptureData
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UDynamicCaptureData : public UObject
{
public:
	TArray<class UReflectionCaptureData*>              ReflectionCapturesData;                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<class USkyLightData*>                       SkyLightsData;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DynamicCaptureData");
		return ptr;
	}



};

// Class Engine.EdGraph
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UEdGraphNode*>                        Nodes;                                                     // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable : 1;                                             // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowDeletion : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowRenaming : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_AT4N[0x27];                                    // 0x0041(0x0027) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraph");
		return ptr;
	}



};

// Class Engine.EdGraphNode_Comment
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UEdGraphNode_Comment : public UEdGraphNode
{
public:
	struct FLinearColor                                CommentColor;                                              // 0x0090(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bColorCommentBubble : 1;                                   // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7O27[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECommentBoxMode>                MoveMode;                                                  // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UJHX[0x3];                                     // 0x00A5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphNode_Comment");
		return ptr;
	}



};

// Class Engine.EdGraphNode_Documentation
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                      // 0x0090(0x0010) (ZeroConstructor)
	struct FString                                     Excerpt;                                                   // 0x00A0(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphNode_Documentation");
		return ptr;
	}



};

// Class Engine.EdGraphSchema
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEdGraphSchema : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphSchema");
		return ptr;
	}



};

// Class Engine.Exporter
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                     ExportRootScope;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             FormatExtension;                                           // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                         // 0x0048(0x0010) (ZeroConstructor)
	int                                                PreferredFormatIndex;                                      // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                TextIndent;                                                // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bText : 1;                                                 // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSelectedOnly : 1;                                         // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceFileOperations : 1;                                  // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_W07B[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Exporter");
		return ptr;
	}



};

// Class Engine.FoliageAttachedComponentInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UFoliageAttachedComponentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FoliageAttachedComponentInterface");
		return ptr;
	}



};

// Class Engine.FoliageType
// 0x0270 (FullSize[0x0298] - InheritedSize[0x0028])
class UFoliageType : public UObject
{
public:
	float                                              Density;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Radius;                                                    // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMinX;                                                 // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMinY;                                                 // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMinZ;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMaxX;                                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMaxY;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleMaxZ;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      LockScaleX : 1;                                            // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      LockScaleY : 1;                                            // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      LockScaleZ : 1;                                            // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_2V70[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlignMaxAngle;                                             // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RandomPitchAngle;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              GroundSlope;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HeightMin;                                                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              HeightMax;                                                 // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       LandscapeLayer;                                            // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      AlignToNormal : 1;                                         // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RandomYaw : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UniformScale : 1;                                          // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_D8ET[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ZOffsetMin;                                                // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ZOffsetMax;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      CollisionWithWorld : 1;                                    // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LKXB[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     CollisionScale;                                            // 0x0078(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBoxSphereBounds                            MeshBounds;                                                // 0x0084(0x001C) (ZeroConstructor)
	struct FVector                                     LowBoundOriginRadius;                                      // 0x00A0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EFoliageVertexColorMask>        VertexColorMask;                                           // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0233[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VertexColorMaskThreshold;                                  // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      VertexColorMaskInvert : 1;                                 // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReplicateThisComponent : 1;                               // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDontScaleAttachedComponent : 1;                           // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PSN4[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DamageFXActorToSpawn;                                      // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AttachedComponentScaleFactor;                              // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MinScaleForAttachedComponent;                              // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxScaleForAttachedComponent;                              // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                MaxInstancesPerCluster;                                    // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxClusterRadius;                                          // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WEJV[0x4];                                     // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AttachedComponentClass;                                    // 0x00D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDestructibleMesh*                           DestroyedMesh;                                             // 0x00E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                      DestroyedMeshActorClass;                                   // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OverrideWalkableFloorZ;                                    // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PlayerOverrideWalkableFloorZ;                              // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsFallingTree : 1;                                        // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QFTL[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  OverrideDestructionMaterials;                              // 0x0100(0x0010) (Edit, ZeroConstructor)
	float                                              ReapplyDensityAmount;                                      // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      ReapplyDensity : 1;                                        // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyRadius : 1;                                         // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyAlignToNormal : 1;                                  // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyRandomYaw : 1;                                      // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyScaleX : 1;                                         // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyScaleY : 1;                                         // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyScaleZ : 1;                                         // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyRandomPitchAngle : 1;                               // 0x0114(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyGroundSlope : 1;                                    // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyHeight : 1;                                         // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyLandscapeLayer : 1;                                 // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyZOffset : 1;                                        // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyCollisionWithWorld : 1;                             // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ReapplyVertexColorMask : 1;                                // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsHiddenInEditor : 1;                                     // 0x0115(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_SB2D[0x2];                                     // 0x0116(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                StartCullDistance;                                         // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EndCullDistance;                                           // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                LowEnd_StartCullDistance;                                  // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                LowEnd_EndCullDistance;                                    // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                DisplayOrder;                                              // 0x0128(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      IsSelected : 1;                                            // 0x012C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ShowNothing : 1;                                           // 0x012C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ShowPaintSettings : 1;                                     // 0x012C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ShowInstanceSettings : 1;                                  // 0x012C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bMapCheckIgnoreLargeCullDistance : 1;                      // 0x012C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      CastShadow : 1;                                            // 0x012C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x012C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bCastDynamicShadow : 1;                                    // 0x012C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bCastStaticShadow : 1;                                     // 0x012D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_SXVJ[0x2];                                     // 0x012E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ObjectLayer;                                               // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCastHiddenShadow : 1;                                     // 0x0134(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                 // 0x0134(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bReceivesDecals : 1;                                       // 0x0134(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_9VI9[0x3];                                     // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               BodyInstance;                                              // 0x0138(0x0160) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FoliageType");
		return ptr;
	}



};

// Class Engine.FoliageType_InstancedStaticMesh
// 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
class UFoliageType_InstancedStaticMesh : public UFoliageType
{
public:
	class UStaticMesh*                                 Mesh;                                                      // 0x0298(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FoliageType_InstancedStaticMesh");
		return ptr;
	}



};

// Class Engine.FontImportOptions
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                      // 0x0028(0x00B0) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}



};

// Class Engine.Font
// 0x0180 (FullSize[0x01A8] - InheritedSize[0x0028])
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData_JNTK[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EFontCacheType>                 FontCacheType;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R1XU[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFontCharacter>                      Characters;                                                // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                                  // 0x0048(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_ESPQ[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceOffline : 1;                                         // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_R3WV[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                IsRemapped;                                                // 0x006C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EmScale;                                                   // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Ascent;                                                    // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Descent;                                                   // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Leading;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistanceFieldScreenSpaceScalar;                            // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                Kerning;                                                   // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFontImportOptionsData                      ImportOptions;                                             // 0x0088(0x00B0) (Edit)
	int                                                NumCharacters;                                             // 0x0138(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2WUQ[0x4];                                     // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        MaxCharHeight;                                             // 0x0140(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                             // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SXLB[0x54];                                    // 0x0154(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}



};

// Class Engine.PlayerInput
// 0x0310 (FullSize[0x0338] - InheritedSize[0x0028])
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData_N83M[0xA0];                                    // 0x0028(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FKeyBind>                            DebugExecBindings;                                         // 0x00C8(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_H0ZD[0x40];                                    // 0x00D8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               InvertedAxis;                                              // 0x0118(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_OUR7[0x210];                                   // 0x0128(0x0210) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}



	void SetMouseSensitivityToDefault();
	void SetMouseSensitivity(float Sensitivity);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertMouse();
	void InvertAxisKey(const struct FKey& AxisKey);
	void InvertAxis(const struct FName& AxisName);
	void ClearSmoothing();
};

// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_FNEM[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                ResetColor;                                                // 0x0040(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}



};

// Class Engine.LandscapeLayerInfoObject
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class ULandscapeLayerInfoObject : public UObject
{
public:
	int                                                LandscapeInfoID;                                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       LayerName;                                                 // 0x002C(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_6AZC[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Hardness;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bNoWeightBlend : 1;                                        // 0x0044(0x0001) BIT_FIELD (Edit, EditConst, NoDestructor)
	unsigned char                                      UnknownData_AYV1[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                LayerUsageDebugColor;                                      // 0x0048(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeLayerInfoObject");
		return ptr;
	}



};

// Class Engine.LandscapeSplineSegment
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class ULandscapeSplineSegment : public UObject
{
public:
	struct FLandscapeSplineSegmentConnection           Connections[0x2];                                          // 0x0028(0x0030) (Edit, EditFixedSize)
	struct FInterpCurveVector                          SplineInfo;                                                // 0x0058(0x0010) (ZeroConstructor, Protected)
	TArray<struct FLandscapeSplineInterpPoint>         Points;                                                    // 0x0068(0x0010) (ZeroConstructor, Protected)
	struct FBox                                        Bounds;                                                    // 0x0078(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_D4PA[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USplineMeshComponent*>                MeshComponents;                                            // 0x0098(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, TextExportTransient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeSplineSegment");
		return ptr;
	}



};

// Class Engine.LandscapeSplineControlPoint
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class ULandscapeSplineControlPoint : public UObject
{
public:
	struct FVector                                     Location;                                                  // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    Rotation;                                                  // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Width;                                                     // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SideFalloff;                                               // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EndFalloff;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Y6YF[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLandscapeSplineConnection>          ConnectedSegments;                                         // 0x0050(0x0010) (ZeroConstructor, TextExportTransient)
	class UControlPointMeshComponent*                  MeshComponent;                                             // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, TextExportTransient)
	TArray<struct FLandscapeSplineInterpPoint>         Points;                                                    // 0x0068(0x0010) (ZeroConstructor, Protected)
	struct FBox                                        Bounds;                                                    // 0x0078(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_VSM3[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeSplineControlPoint");
		return ptr;
	}



};

// Class Engine.Layer
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsVisible : 1;                                            // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_BMVK[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLayerActorStats>                    ActorStats;                                                // 0x0038(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Layer");
		return ptr;
	}



};

// Class Engine.LevelStreaming
// 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                               // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	TAssetPtr<class UWorld>                            WorldAsset;                                                // 0x0030(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData_PKJE[0x4];                                     // 0x0030(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FName                                       PackageNameToLoad;                                         // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               LODPackageNames;                                           // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_74YA[0x18];                                    // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct UObject_FTransform                          LevelTransform;                                            // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8YN4 : 2;                                      // 0x00B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShouldBeVisibleInEditor : 1;                              // 0x00B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bLocked : 1;                                               // 0x00B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldBeLoaded : 1;                                       // 0x00B0(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bshouldBeVisible : 1;                                      // 0x00B0(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldBlockOnLoad : 1;                                    // 0x00B0(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bIsCriticalLoad : 1;                                       // 0x00B0(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_10LE : 1;                                      // 0x00B1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                 // 0x00B1(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bLevelStreamingVisibilityOnly : 1;                         // 0x00B1(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bLevelStreamingDesiredVisibility : 1;                      // 0x00B1(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bForceStreamingStateChange : 1;                            // 0x00B1(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_SIM4[0x2];                                     // 0x00B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      DrawColor;                                                 // 0x00B4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FLinearColor                                LevelColor;                                                // 0x00B8(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                    // 0x00C8(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                        // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_DYWY[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             Keywords;                                                  // 0x00E0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_B8ST[0x8];                                     // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                             // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                           // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                              // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                             // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bEnableTileStreaming;                                      // 0x0138(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6P41[0x7];                                     // 0x0139(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      LoadedLevel;                                               // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	class ULevel*                                      PendingUnloadLevel;                                        // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}



	void LevelStreamingVisibilityStatus__DelegateSignature();
	void LevelStreamingLoadedStatus__DelegateSignature();
	bool IsTileStreamingEnabled();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
	void BPSetLevelVisibility(bool bVisible, bool bIsLowMemory);
	struct FString BPGetPackageName();
};

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}



};

// Class Engine.LevelStreamingBounds
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class ULevelStreamingBounds : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingBounds");
		return ptr;
	}



};

// Class Engine.LevelStreamingKismet
// 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
class ULevelStreamingKismet : public ULevelStreaming
{
public:
	unsigned char                                      bInitiallyLoaded : 1;                                      // 0x0150(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInitiallyVisible : 1;                                     // 0x0150(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JEVO[0xF];                                     // 0x0151(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return ptr;
	}



};

// Class Engine.LevelStreamingPersistent
// 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
class ULevelStreamingPersistent : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}



};

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int>                                        Surfaces;                                                  // 0x0030(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}



};

// Class Engine.MaterialExpressionConstant3Vector
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0078(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              G;                                                         // 0x007C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              B;                                                         // 0x0080(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FLinearColor                                Constant;                                                  // 0x0084(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_V4KU[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                      // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDesaturation
// 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Fraction;                                                  // 0x00B0(0x0038) (ZeroConstructor)
	struct FLinearColor                                LuminanceFactors;                                          // 0x00E8(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDotProduct
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}



};

// Class Engine.MaterialExpressionDynamicParameter
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                                // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionEyeAdaptation");
		return ptr;
	}



};

// Class Engine.MaterialExpressionFunctionOutput
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                                // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FString                                     Description;                                               // 0x0088(0x0010) (Edit, ZeroConstructor)
	int                                                SortPriority;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z9GI[0x4];                                     // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            A;                                                         // 0x00A0(0x0038) (ZeroConstructor)
	unsigned char                                      bLastPreviewed : 1;                                        // 0x00D8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_E3V9[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       ID;                                                        // 0x00DC(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_MAN5[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		return ptr;
	}



};

// Class Engine.MaterialExpressionGIReplace
// 0x00A8 (FullSize[0x0120] - InheritedSize[0x0078])
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            StaticIndirect;                                            // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            DynamicIndirect;                                           // 0x00E8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionGIReplace");
		return ptr;
	}



};

// Class Engine.MaterialExpressionIf
// 0x0128 (FullSize[0x01A0] - InheritedSize[0x0078])
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            AGreaterThanB;                                             // 0x00E8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            AEqualsB;                                                  // 0x0120(0x0038) (ZeroConstructor)
	struct FExpressionInput                            ALessThanB;                                                // 0x0158(0x0038) (ZeroConstructor)
	float                                              EqualsThreshold;                                           // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstAEqualsB;                                             // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6QE6[0x4];                                     // 0x019C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLandscapeLayerBlend
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
{
public:
	TArray<struct FLayerBlendInput>                    Layers;                                                    // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       ExpressionGUID;                                            // 0x0088(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerBlend");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLandscapeLayerCoords
// 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_ETerrainCoordMappingType>       MappingType;                                               // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ELandscapeCustomizedCoordType>  CustomUVType;                                              // 0x0079(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8D55[0x2];                                     // 0x007A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MappingScale;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MappingRotation;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MappingPanU;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MappingPanV;                                               // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E7ZN[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerCoords");
		return ptr;
	}



};

// Class Engine.NiagaraScript
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UNiagaraScript : public UObject
{
public:
	TArray<unsigned char>                              ByteCode;                                                  // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FVector4>                            ConstantTable;                                             // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_06KM[0x10];                                    // 0x0048(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NiagaraScript");
		return ptr;
	}



};

// Class Engine.NiagaraScriptSourceBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNiagaraScriptSourceBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NiagaraScriptSourceBase");
		return ptr;
	}



};

// Class Engine.ObjectLibrary
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                           // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bHasBlueprintClasses;                                      // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IC8R[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             Objects;                                                   // 0x0038(0x0010) (Edit, ZeroConstructor, Protected)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                               // 0x0048(0x0010) (ZeroConstructor, Protected)
	bool                                               bUseWeakReferences;                                        // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bIsFullyLoaded;                                            // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_M08H[0x16];                                    // 0x005A(0x0016) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ObjectLibrary");
		return ptr;
	}



};

// Class Engine.ObjectReferencer
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                         // 0x0028(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}



};

// Class Engine.PackageMapClient
// 0x0148 (FullSize[0x0188] - InheritedSize[0x0040])
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData_ET56[0x148];                                   // 0x0040(0x0148) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PackageMapClient");
		return ptr;
	}



};

// Class Engine.ParticleEmitter
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubUVDataOffset;                                           // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EEmitterRenderMode>             EmitterRenderMode;                                         // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z3BY[0x3];                                     // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                 // 0x0038(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      ConvertedModules : 1;                                      // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_IW0E[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PeakActiveParticles;                                       // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                InitialAllocationCount;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MediumDetailSpawnRateScale;                                // 0x0054(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	float                                              QualityLevelSpawnRateScale;                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z0PY[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIsSoloing : 1;                                            // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCookedOut : 1;                                            // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_2XAV[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}



};

// Class Engine.ParticleSpriteEmitter
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class UParticleSpriteEmitter : public UParticleEmitter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}



};

// Class Engine.ParticleLODLevel
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x002C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_5V1Y[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleModuleRequired*                     RequiredModule;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	TArray<class UParticleModule*>                     Modules;                                                   // 0x0038(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class UParticleModule*                             TypeDataModule;                                            // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleModuleSpawn*                        SpawnModule;                                               // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleModuleEventGenerator*               EventGenerator;                                            // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                           // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                              // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                             // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                              // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                      // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                      // 0x00B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_SOIW[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PeakActiveParticles;                                       // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                   // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_V20E[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (FullSize[0x00C8] - InheritedSize[0x00A8])
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00A8(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleColorOverLife
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                             // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AlphaOverLife;                                             // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_2WV6[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                        // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bEmitterTime : 1;                                          // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NROP[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleEventBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                    // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<Engine_EParticleEventType>             EventGeneratorType;                                        // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BNCJ[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       EventName;                                                 // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0TY4[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                         // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_N0MM[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                                // 0x0040(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bUseParticleTime : 1;                                      // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUsePSysLocation : 1;                                      // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritVelocity : 1;                                      // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5NKH[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      InheritVelocityScale;                                      // 0x0080(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}



};

// Class Engine.ParticleModuleKillBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleKillBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleKillBox
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                           // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      UpperRightCorner;                                          // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAbsolute : 1;                                             // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bKillInside : 1;                                           // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                              // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6WQI[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}



};

// Class Engine.ParticleModuleKillHeight
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                    // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAbsolute : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFloor : 1;                                                // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bApplyPSysScale : 1;                                       // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_VN9N[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}



};

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLightBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleLightBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLightBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0048(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleRequired
// 0x0100 (FullSize[0x0130] - InheritedSize[0x0030])
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                  // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     EmitterOrigin;                                             // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    EmitterRotation;                                           // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EParticleScreenAlignment>       ScreenAlignment;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ITFW[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseLocalSpace : 1;                                        // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bKillOnDeactivate : 1;                                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bKillOnCompleted : 1;                                      // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRequiresSorting : 1;                                      // 0x0054(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_SX5G[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSortMode>              SortMode;                                                  // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O1EF[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                 // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Z0C2[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EmitterDuration;                                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EmitterDurationLow;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEmitterDurationUseRange : 1;                              // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDurationRecalcEachLoop : 1;                               // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_39J6[0x3];                                     // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                EmitterLoops;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRawDistributionFloat                       SpawnRate;                                                 // 0x0070(0x0038) (ContainsInstancedReference)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1T1V[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x00B0(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                              // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EmitterDelayLow;                                           // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bEmitterDelayUseRange : 1;                                 // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                   // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_556Q[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSubUVInterpMethod>     InterpolationMethod;                                       // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5HVC[0x3];                                     // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SubImages_Horizontal;                                      // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubImages_Vertical;                                        // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bScaleUV : 1;                                              // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JE3S[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RandomImageTime;                                           // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                RandomImageChanges;                                        // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bOverrideSystemMacroUV : 1;                                // 0x00E4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CFLI[0x3];                                     // 0x00E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     MacroUVPosition;                                           // 0x00E8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MacroUVRadius;                                             // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseMaxDrawCount : 1;                                      // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_J0PG[0x3];                                     // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxDrawCount;                                              // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EEmitterNormalsMode>            EmitterNormalsMode;                                        // 0x0100(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JPZP[0x3];                                     // 0x0101(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     NormalsSphereCenter;                                       // 0x0104(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     NormalsCylinderDirection;                                  // 0x0110(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                  // 0x011C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_VEE4[0x3];                                     // 0x011D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               NamedMaterialOverrides;                                    // 0x0120(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotation
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                             // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bInheritParent : 1;                                        // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_OU7Z[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}



};

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0070(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		return ptr;
	}



};

// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                     // 0x0038(0x0020) (Edit)
	unsigned char                                      bLooping : 1;                                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_02I3[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDialoguePlayer");
		return ptr;
	}



};

// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                            // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}



};

// Class Engine.SoundNodeParamCrossFade
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                 // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeParamCrossFade");
		return ptr;
	}



};

// Class Engine.SoundNodeDoppler
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AB4E[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDoppler");
		return ptr;
	}



};

// Class Engine.SoundNodeEnveloper
// 0x0118 (FullSize[0x0150] - InheritedSize[0x0038])
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LoopEnd;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DurationAfterLoop;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                LoopCount;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bLoop : 1;                                                 // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SGRK[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                         // 0x0050(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                          // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor)
	struct FRuntimeFloatCurve                          VolumeCurve;                                               // 0x0060(0x0070) (Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                                // 0x00D0(0x0070) (Edit)
	float                                              PitchMin;                                                  // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitchMax;                                                  // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMin;                                                 // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMax;                                                 // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		return ptr;
	}



};

// Class Engine.SoundNodeGroupControl
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                                // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeGroupControl");
		return ptr;
	}



};

// Class Engine.SoundNodeLooping
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeLooping : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}



};

// Class Engine.SoundNodeMature
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeMature : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}



};

// Class Engine.SoundNodeMixer
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}



};

// Class Engine.SoundNodeModulator
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PitchMax;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMin;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VolumeMax;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}



};

// Class Engine.SoundNodeModulatorContinuous
// 0x00B0 (FullSize[0x00E8] - InheritedSize[0x0038])
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                     // 0x0038(0x0020) (Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                    // 0x0058(0x0020) (Edit)
	struct FRawDistributionFloat                       PitchModulation;                                           // 0x0078(0x0038) (Deprecated, ContainsInstancedReference)
	struct FRawDistributionFloat                       VolumeModulation;                                          // 0x00B0(0x0038) (Deprecated, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}



};

// Class Engine.SoundNodeOscillator
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                       // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bModulatePitch : 1;                                        // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_X2ZL[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AmplitudeMin;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AmplitudeMax;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FrequencyMin;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              FrequencyMax;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OffsetMin;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              OffsetMax;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CenterMin;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              CenterMax;                                                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MRYF[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}



};

// Class Engine.SoundNodeRandom
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                   // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                PreselectAtLevelLoad;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                          // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_G7MV[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<bool>                                       HasBeenUsed;                                               // 0x0050(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                             // 0x0060(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_T8FX[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}



};

// Class Engine.SoundNodeSoundClass
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                        // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeSoundClass");
		return ptr;
	}



};

// Class Engine.SoundNodeSwitch
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                          // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeSwitch");
		return ptr;
	}



};

// Class Engine.SoundNodeWaveParam
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                         // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}



};

// Class Engine.SoundNodeWavePlayer
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeWavePlayer : public USoundNode
{
public:
	class USoundWave*                                  SoundWave;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLooping : 1;                                              // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_OJA7[0x7];                                     // 0x0041(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeWavePlayer");
		return ptr;
	}



};

// Class Engine.StaticMesh
// 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData_LTQ0[0x20];                                    // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRequiresCPUAccess : 1;                                    // 0x0048(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReallyDoesWantLightMapUVs : 1;                            // 0x0048(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_RG75[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  Materials;                                                 // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      bIgnoreTriReductions : 1;                                  // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bPreventLODStreamingOnWindows : 1;                         // 0x0060(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_QCJQ[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LightMapResolution;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                LightMapCoordinateIndex;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_AQFC[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  BodySetup;                                                 // 0x0070(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor)
	unsigned char                                      UseFullPrecisionUVs : 1;                                   // 0x0078(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bUseMaximumStreamingTexelRatio : 1;                        // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                      // 0x0078(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bHasNavigationData : 1;                                    // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseDistanceFieldTexture : 1;                              // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOnlyLoadDistanceFieldsOnInteriorLightingMaps : 1;         // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceAllowMeshStreaming : 1;                              // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowDistanceFieldOnLowEnd : 1;                           // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHighQualityDistanceField : 1;                             // 0x0079(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceUseDistanceFieldResolution : 1;                      // 0x0079(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CYBV[0x2];                                     // 0x007A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistanceFieldTwoSidedOverride> DistanceFieldTwoSidedOverride;                             // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_U2BS[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAllowLODStreamingTransient : 1;                           // 0x0080(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCastFarShadow : 1;                                        // 0x0080(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowLODStreaming : 1;                                    // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bConsoleDropLOD0 : 1;                                      // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bConsoleDropLOD0onLowMemPlatform : 1;                      // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_XN54[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DistanceFieldRuntimeQuality;                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UFYO[0x30];                                    // 0x0088(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StreamingDistanceMultiplier;                               // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              LpvBiasMultiplier;                                         // 0x00BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A8J9[0x30];                                    // 0x00C0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UStaticMeshSocket*>                   Sockets;                                                   // 0x00F0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_SOGH[0x20];                                    // 0x0100(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ElementToIgnoreForTexFactor;                               // 0x0120(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_MFRG[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0128(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected)
	class UNavCollision*                               NavCollision;                                              // 0x0138(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor)
	struct FName                                       CustomTag;                                                 // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}



};

// Class Engine.StaticMeshSocket
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeLocation;                                          // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeScale;                                             // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4XL9[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Tag;                                                       // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMeshSocket");
		return ptr;
	}



};

// Class Engine.DistributionFloatConstantCurve
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}



};

// Class Engine.DistributionFloatUniform
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Max;                                                       // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBlackBody
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                      // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBlackBody");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCeil
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}



};

// Class Engine.MaterialExpressionClamp
// 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Min;                                                       // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Max;                                                       // 0x00E8(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EClampMode>                     ClampMode;                                                 // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EZ1S[0x3];                                     // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDefault;                                                // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MaxDefault;                                                // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F1J7[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}



};

// Class Engine.MaterialExpressionStaticSwitch
// 0x00B0 (FullSize[0x0128] - InheritedSize[0x0078])
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GUYA[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            A;                                                         // 0x0080(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Value;                                                     // 0x00F0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionSubtract
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureBase
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                   // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMaterialSamplerType>           SamplerType;                                               // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6260[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                             // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_4FAF[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureBase");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureObject
// 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSample
// 0x0128 (FullSize[0x01B0] - InheritedSize[0x0088])
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0088(0x0038) (ZeroConstructor)
	struct FExpressionInput                            TextureObject;                                             // 0x00C0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            MipValue;                                                  // 0x00F8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            CoordinatesDX;                                             // 0x0130(0x0038) (ZeroConstructor)
	struct FExpressionInput                            CoordinatesDY;                                             // 0x0168(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_ETextureMipValueMode>           MipValueMode;                                              // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESamplerSourceMode>             SamplerSource;                                             // 0x01A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8ZKJ[0x2];                                     // 0x01A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ConstCoordinate;                                           // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ConstMipValue;                                             // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GP0Z[0x4];                                     // 0x01AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}



};

// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (FullSize[0x01B8] - InheritedSize[0x01B0])
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KOD6[0x7];                                     // 0x01B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (FullSize[0x01D0] - InheritedSize[0x01B0])
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                             // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       ExpressionGUID;                                            // 0x01B8(0x0010) (ZeroConstructor)
	struct FName                                       Group;                                                     // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (FullSize[0x01D8] - InheritedSize[0x01D0])
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                 // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETextureColorChannel>           Channel;                                                   // 0x01D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ORW8[0x3];                                     // 0x01D5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (FullSize[0x01D8] - InheritedSize[0x01D0])
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x01D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_STWI[0x7];                                     // 0x01D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              UTiling;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              VTiling;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnMirrorU : 1;                                             // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnMirrorV : 1;                                             // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_AZZO[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTime
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                          // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_09VS[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTransform
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EMaterialVectorCoordTransformSource> TransformSourceType;                                       // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMaterialVectorCoordTransform>  TransformType;                                             // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z4MZ[0x6];                                     // 0x00B2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTransformPosition
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformSourceType;                                       // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformType;                                             // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GXCM[0x6];                                     // 0x00B2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}



};

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexNormalWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionViewSize
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionViewSize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EWorldPositionIncludedOffsets>  WorldPositionShaderOffset;                                 // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_54R2[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}



};

// Class Engine.MaterialFunction
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                                   // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient)
	TArray<struct FString>                             AdditionalIncludes;                                        // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable)
	struct FString                                     Description;                                               // 0x0048(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable)
	unsigned char                                      bExposeToLibrary : 1;                                      // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_R1WP[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             LibraryCategories;                                         // 0x0060(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable)
	TArray<class UMaterialExpression*>                 FunctionExpressions;                                       // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bReentrantFlag : 1;                                        // 0x0080(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_F7IL[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialFunction");
		return ptr;
	}



};

// Class Engine.Material
// 0x0A88 (FullSize[0x0AE8] - InheritedSize[0x0060])
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColorMaterialInput                         DiffuseColor;                                              // 0x0068(0x0040)
	struct FColorMaterialInput                         SpecularColor;                                             // 0x00A8(0x0040)
	struct FColorMaterialInput                         BaseColor;                                                 // 0x00E8(0x0040)
	struct FScalarMaterialInput                        Metallic;                                                  // 0x0128(0x0040)
	struct FScalarMaterialInput                        Specular;                                                  // 0x0168(0x0040)
	struct FScalarMaterialInput                        SpecularPower;                                             // 0x01A8(0x0040) (Deprecated)
	struct FScalarMaterialInput                        Roughness;                                                 // 0x01E8(0x0040)
	struct FVectorMaterialInput                        Normal;                                                    // 0x0228(0x0048)
	struct FColorMaterialInput                         EmissiveColor;                                             // 0x0270(0x0040)
	struct FScalarMaterialInput                        Opacity;                                                   // 0x02B0(0x0040)
	struct FScalarMaterialInput                        OpacityMask;                                               // 0x02F0(0x0040)
	float                                              FresnelBaseReflectFraction;                                // 0x0330(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UCLI[0x4];                                     // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             AdditionalIncludes;                                        // 0x0338(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_EMaterialDomain>                MaterialDomain;                                            // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_EBlendMode>                     BlendMode;                                                 // 0x0349(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_EDecalBlendMode>                DecalBlendMode;                                            // 0x034A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EMaterialDecalResponse>         MaterialDecalResponse;                                     // 0x034B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	TEnumAsByte<Engine_EMaterialShadingModel>          ShadingModel;                                              // 0x034C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_FN4I[0x3];                                     // 0x034D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OpacityMaskClipValue;                                      // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_O9AD[0x4];                                     // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVectorMaterialInput                        WorldPositionOffset;                                       // 0x0358(0x0048)
	struct FVectorMaterialInput                        WorldDisplacement;                                         // 0x03A0(0x0048)
	struct FScalarMaterialInput                        TessellationMultiplier;                                    // 0x03E8(0x0040)
	struct FColorMaterialInput                         SubsurfaceColor;                                           // 0x0428(0x0040)
	struct FScalarMaterialInput                        ClearCoat;                                                 // 0x0468(0x0040)
	struct FScalarMaterialInput                        ClearCoatRoughness;                                        // 0x04A8(0x0040)
	struct FScalarMaterialInput                        AmbientOcclusion;                                          // 0x04E8(0x0040)
	struct FScalarMaterialInput                        Refraction;                                                // 0x0528(0x0040)
	struct FScalarMaterialInput                        SSAOIntensity;                                             // 0x0568(0x0040)
	struct FScalarMaterialInput                        SSAOInfluence;                                             // 0x05A8(0x0040)
	struct FScalarMaterialInput                        SSAOLightInfluence;                                        // 0x05E8(0x0040)
	struct FVector2MaterialInput                       CustomizedUVs[0x8];                                        // 0x0628(0x0240)
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x0868(0x0038) (ZeroConstructor)
	unsigned char                                      UnknownData_8U3X[0x8];                                     // 0x08A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        PixelDepthOffset;                                          // 0x08A8(0x0040)
	unsigned char                                      bEnableSeparateTranslucency : 1;                           // 0x08E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnableResponsiveAA : 1;                                   // 0x08E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bScreenSpaceReflections : 1;                               // 0x08E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      TwoSided : 1;                                              // 0x08E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUsedWithCustomDepths : 1;                                 // 0x08E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOutputToSecondaryTarget : 1;                              // 0x08E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_4VOB[0x3];                                     // 0x08E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumCustomizedUVs;                                          // 0x08EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_ETranslucencyLightingMode>      TranslucencyLightingMode;                                  // 0x08F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UK59[0x3];                                     // 0x08F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TranslucencyDirectionalLightingIntensity;                  // 0x08F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentShadowDensityScale;                             // 0x08F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentSelfShadowDensityScale;                         // 0x08FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentSelfShadowSecondDensityScale;                   // 0x0900(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentSelfShadowSecondOpacity;                        // 0x0904(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentBackscatteringExponent;                         // 0x0908(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                   // 0x090C(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentShadowStartOffset;                              // 0x091C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bDisableDepthTest : 1;                                     // 0x0920(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                     // 0x0920(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTangentSpaceNormal : 1;                                   // 0x0920(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                    // 0x0920(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPhysicallyBasedInputs : 1;                                // 0x0920(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bUsedAsLightFunction : 1;                                  // 0x0920(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bUsedWithDeferredDecal : 1;                                // 0x0920(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                          // 0x0920(0x0001) BIT_FIELD (DuplicateTransient, NoDestructor)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                 // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithEditorCompositing : 1;                            // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithLandscape : 1;                                    // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithParticleSprites : 1;                              // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithBeamTrails : 1;                                   // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithMeshParticles : 1;                                // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithStaticLighting : 1;                               // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithFluidSurfaces : 1;                                // 0x0921(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithMorphTargets : 1;                                 // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                 // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                        // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAllowFullSceneColorTranslucentPath : 1;                   // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithGroundClutter : 1;                                // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithTrueSkyScatter : 1;                               // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithStaticMesh : 1;                                   // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsesDistortion : 1;                                       // 0x0922(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithClothing : 1;                                     // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithUI : 1;                                           // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                        // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOptOutOfMaterialUsedWithFlagOptimizations : 1;            // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bFullyRough : 1;                                           // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAllowAdditionalSkyLightMultiplier : 1;                    // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseLightmapDirectionality : 1;                            // 0x0923(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	TEnumAsByte<Engine_EMaterialTessellationMode>      D3D11TessellationMode;                                     // 0x0924(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JR0U[0x3];                                     // 0x0925(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                          // 0x0928(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                           // 0x0928(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      Wireframe : 1;                                             // 0x0928(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_10A9[0x3];                                     // 0x0929(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                EditorX;                                                   // 0x092C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EditorY;                                                   // 0x0930(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EditorPitch;                                               // 0x0934(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                EditorYaw;                                                 // 0x0938(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YAOK[0x4];                                     // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialExpression*>                 Expressions;                                               // 0x0940(0x0010) (ZeroConstructor)
	TArray<struct FMaterialFunctionInfo>               MaterialFunctionInfos;                                     // 0x0950(0x0010) (ZeroConstructor)
	TArray<struct FMaterialParameterCollectionInfo>    MaterialParameterCollectionInfos;                          // 0x0960(0x0010) (ZeroConstructor)
	unsigned char                                      bIsMasked : 1;                                             // 0x0970(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsPreviewMaterial : 1;                                    // 0x0970(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      bUseMaterialAttributes : 1;                                // 0x0970(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                             // 0x0970(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                        // 0x0970(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                        // 0x0970(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      UnknownData_4E7Q[0x3];                                     // 0x0971(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UsageFlagWarnings;                                         // 0x0974(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EBlendableLocation>             BlendableLocation;                                         // 0x0978(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_X1TZ[0x3];                                     // 0x0979(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlendablePriority;                                         // 0x097C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                DownsampleFactor;                                          // 0x0980(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RefractionDepthBias;                                       // 0x0984(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FGuid                                       StateId;                                                   // 0x0988(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_EUMT[0x140];                                   // 0x0998(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UTexture*>                            ExpressionTextureReferences;                               // 0x0AD8(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}



};

// Class Engine.MaterialInstance
// 0x01A8 (FullSize[0x0208] - InheritedSize[0x0060])
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                          Parent;                                                    // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bHasStaticPermutationResource : 1;                         // 0x0070(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_9AP7 : 1;                                      // 0x0070(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                            // 0x0070(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_GT30[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       ParentLightingGuid;                                        // 0x0074(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_Y8O2[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                       // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                     // 0x0098(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                    // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                     // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bOverrideBaseProperties;                                   // 0x00C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0G5Y[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                     // 0x00CC(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bOptOutOfMaterialUsedWithFlagOptimizations;                // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bOverrideUsedWithFlags;                                    // 0x00DD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EGS7[0x2];                                     // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMaterialInstanceUsedWithOverride           UsedWithOverrides;                                         // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData_8RFS[0x124];                                   // 0x00E4(0x0124) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}



};

// Class Engine.MaterialInstanceConstant
// 0x0000 (FullSize[0x0208] - InheritedSize[0x0208])
class UMaterialInstanceConstant : public UMaterialInstance
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}



};

// Class Engine.LandscapeMaterialInstanceConstant
// 0x0010 (FullSize[0x0218] - InheritedSize[0x0208])
class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
{
public:
	unsigned char                                      bIsLayerThumbnail : 1;                                     // 0x0208(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_L50D[0x3];                                     // 0x0209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                DataWeightmapIndex;                                        // 0x020C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                DataWeightmapSize;                                         // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FOMT[0x4];                                     // 0x0214(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeMaterialInstanceConstant");
		return ptr;
	}



};

// Class Engine.MaterialInstanceDynamic
// 0x0000 (FullSize[0x0208] - InheritedSize[0x0208])
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstanceDynamic");
		return ptr;
	}



	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* MaterialA, class UMaterialInstance* MaterialB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* SourceMaterialToCopyFrom);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
};

// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                              // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KPXC[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationConstant");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationDrag
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                           // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDrag");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                 // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDragScaleOverLife");
		return ptr;
	}



};

// Class Engine.InputSettings
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                                // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay)
	unsigned char                                      bUseMouseForTouch : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bEnableMouseSmoothing : 1;                                 // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableFOVScaling : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_9OLV[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOVScale;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              DoubleClickTime;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_CRUE[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                            // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                              // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bAlwaysShowTouchInterface;                                 // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowConsoleOnFourFingerTap;                               // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0JGG[0x6];                                     // 0x006A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStringAssetReference                       DefaultTouchInterface;                                     // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	struct FKey                                        ConsoleKey;                                                // 0x0080(0x0018) (Config, Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                               // 0x0098(0x0010) (Edit, ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputSettings");
		return ptr;
	}



};

// Class Engine.InterpCurveEdSetup
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                      // 0x0028(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DSGI[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}



};

// Class Engine.InterpData
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                              // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PathBuildTime;                                             // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UInterpGroup*>                        InterpGroups;                                              // 0x0030(0x0010) (ExportObject, ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EdSectionStart;                                            // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              EdSectionEnd;                                              // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bShouldBakeAndPrune : 1;                                   // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GFGS[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimSetBakeAndPruneStatus>          BakeAndPruneStatus;                                        // 0x0058(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	class UInterpGroupDirector*                        CachedDirectorGroup;                                       // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	TArray<struct FName>                               AllEventNames;                                             // 0x0070(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}



};

// Class Engine.InterpFilter
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpFilter : public UObject
{
public:
	struct FString                                     caption;                                                   // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}



};

// Class Engine.InterpFilter_Classes
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInterpFilter_Classes : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}



};

// Class Engine.InterpFilter_Custom
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInterpFilter_Custom : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}



};

// Class Engine.InterpGroup
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData_UMQQ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        InterpTracks;                                              // 0x0030(0x0010) (ExportObject, ZeroConstructor)
	struct FName                                       GroupName;                                                 // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      GroupColor;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCollapsed : 1;                                            // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bVisible : 1;                                              // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsFolder : 1;                                             // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsParented : 1;                                           // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsSelected : 1;                                           // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_YIN3[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}



};

// Class Engine.InterpGroupCamera
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                            // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                              CompressTolerance;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PEB6[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupCamera");
		return ptr;
	}



};

// Class Engine.InterpGroupDirector
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UInterpGroupDirector : public UInterpGroup
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}



};

// Class Engine.InterpGroupInst
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                      GroupActor;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                 // 0x0038(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}



};

// Class Engine.InterpGroupInstCamera
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		return ptr;
	}



};

// Class Engine.InterpGroupInstDirector
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}



};

// Class Engine.InterpTrack
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData_ZPL9[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        SubTracks;                                                 // 0x0038(0x0010) (ZeroConstructor)
	class UClass*                                      TrackInstClass;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETrackActiveCondition>          ActiveCondition;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RJH2[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TrackTitle;                                                // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                          // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDirGroupOnly : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisableTrack : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsSelected : 1;                                           // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_P9W6[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  TrackIcon;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsAnimControlTrack : 1;                                   // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSubTrackOnly : 1;                                         // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bVisible : 1;                                              // 0x0078(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsRecording : 1;                                          // 0x0078(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_YNVS[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}



};

// Class Engine.InterpTrackBoolProp
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                 // 0x0080(0x0010) (ZeroConstructor)
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		return ptr;
	}



};

// Class Engine.InterpTrackDirector
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                  // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                          // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_3A9D[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}



};

// Class Engine.InterpTrackEvent
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                                // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YDU8[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatBase
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                                // 0x0080(0x0010) (ZeroConstructor)
	float                                              CurveTension;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2ADR[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}



};

// Class Engine.InterpTrackAnimControl
// 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                  // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                  // 0x00A0(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                    // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YTI8[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}



};

// Class Engine.InterpTrackFade
// 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                          // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QBV1[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                           // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                 // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}



};

// Class Engine.InterpTrackFloatProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETrackInterpMode>               InterpMode;                                                // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_93WZ[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}



};

// Class Engine.InterpTrackMove
// 0x0048 (FullSize[0x00C8] - InheritedSize[0x0080])
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                  // 0x0080(0x0010) (ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                                // 0x0090(0x0010) (ZeroConstructor)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LinCurveTension;                                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AngCurveTension;                                           // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseQuatInterpolation : 1;                                 // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowArrowAtKeys : 1;                                      // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDisableMovement : 1;                                      // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                             // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowRotationOnCurveEd : 1;                                // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHide3DTrack : 1;                                          // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_DI4G[0x3];                                     // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EInterpTrackMoveRotMode>        RotMode;                                                   // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DFPF[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}



};

// Class Engine.InterpTrackMoveAxis
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<Engine_EInterpMoveAxis>                MoveAxis;                                                  // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4WR1[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x00A0(0x0010)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		return ptr;
	}



};

// Class Engine.InterpTrackSlomo
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}



};

// Class Engine.InterpTrackLinearColorBase
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                          // 0x0080(0x0010) (ZeroConstructor)
	float                                              CurveTension;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NNBS[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}



};

// Class Engine.InterpTrackLinearColorProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETrackInterpMode>               InterpMode;                                                // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JT2T[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackParticleReplay
// 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                 // 0x0080(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}



};

// Class Engine.InterpTrackToggle
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                               // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                             // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                         // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KMX1[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}



};

// Class Engine.InterpTrackVectorBase
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                               // 0x0080(0x0010) (ZeroConstructor)
	float                                              CurveTension;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9PVL[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}



};

// Class Engine.InterpTrackAudioMaster
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}



};

// Class Engine.InterpTrackColorProp
// 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackColorScale
// 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}



};

// Class Engine.InterpTrackSound
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                    // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                        // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                            // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSuppressSubtitles : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTreatAsDialogue : 1;                                      // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAttach : 1;                                               // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1HOE[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}



};

// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                           // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                 // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackVectorProp
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETrackInterpMode>               InterpMode;                                                // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MEL6[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackVisibility
// 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                           // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QKS2[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}



};

// Class Engine.InterpTrackInstAnimControl
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R00K[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}



};

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}



};

// Class Engine.InterpTrackInstColorScale
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}



};

// Class Engine.InterpTrackInstDirector
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}



};

// Class Engine.InterpTrackInstEvent
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8FR5[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFade
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstFade : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0028(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                               // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0048(0x0010) (ZeroConstructor)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                            // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                                // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_200D[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstMove
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                             // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    ResetRotation;                                             // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}



};

// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AZ2Q[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}



};

// Class Engine.InterpTrackInstBoolProp
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_6SML[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBoolProperty*                               BoolProperty;                                              // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               ResetBool;                                                 // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_I1KB[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstVectorProp
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_R5T1[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ResetVector;                                               // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RB58[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}



};

// Class Engine.InterpTrackInstSlomo
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NPBH[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}



};

// Class Engine.InterpTrackInstSound
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4PSK[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAudioComponent*                             PlayAudioComp;                                             // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}



};

// Class Engine.InterpTrackInstToggle
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_ETrackToggleAction>             Action;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VJA8[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bSavedActiveState : 1;                                     // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_6YY2[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}



};

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0048(0x0010) (ZeroConstructor)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                            // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}



};

// Class Engine.InterpTrackInstVisibility
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_EVisibilityTrackAction>         Action;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WF0N[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}



};

// Class Engine.IntSerialization
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                     // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_W8TS[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UnsignedInt32Variable;                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	uint64_t                                           UnsignedInt64Variable;                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int8_t                                             SignedInt8Variable;                                        // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UTH5[0x1];                                     // 0x0039(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int16_t                                            SignedInt16Variable;                                       // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_85Y9[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int64_t                                            SignedInt64Variable;                                       // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnsignedInt8Variable;                                      // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_G51K[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SignedInt32Variable;                                       // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.IntSerialization");
		return ptr;
	}



};

// Class Engine.LandscapeInfo
// 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
class ULandscapeInfo : public UObject
{
public:
	TLazyObjectPtr<class ALandscape>                   LandscapeActor;                                            // 0x0028(0x001C) (IsPlainOldData, NoDestructor)
	struct FGuid                                       LandscapeGuid;                                             // 0x0044(0x0010) (ZeroConstructor)
	int                                                ComponentSizeQuads;                                        // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                SubsectionSizeQuads;                                       // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                ComponentNumSubsections;                                   // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DrawScale;                                                 // 0x0060(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bIsValid : 1;                                              // 0x006C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_LRGR[0x203];                                   // 0x006D(0x0203) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LandscapeInfo");
		return ptr;
	}



};

// Class Engine.ParticleModuleLight
// 0x00E8 (FullSize[0x0118] - InheritedSize[0x0030])
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                 // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAffectsTranslucency;                                      // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bPreviewLightRadius;                                       // 0x0032(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KD49[0x1];                                     // 0x0033(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpawnFraction;                                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       BrightnessOverLife;                                        // 0x0070(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       RadiusScale;                                               // 0x00A8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       LightExponent;                                             // 0x00E0(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLight");
		return ptr;
	}



};

// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (FullSize[0x0138] - InheritedSize[0x0118])
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0118(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLight_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocation
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                             // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	float                                              DistributeOverNPoints;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DistributeThreshold;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0070(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0070(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationBoneSocketSource>      SourceType;                                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CQIA[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     UniversalOffset;                                           // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<Engine_ELocationBoneSocketSelectionMethod> SelectionMethod;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_09B5[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JLS1[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityInheritParent
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                     // 0x0038(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}



};

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                               // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      Absolute : 1;                                              // 0x0070(0x0001) BIT_FIELD (Edit, ExportObject, NoDestructor)
	unsigned char                                      UnknownData_KTOM[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UParticleModuleEventSendToGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}



};

// Class Engine.ParticleSystemReplay
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8YD1[0x14];                                    // 0x002C(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}



};

// Class Engine.PhysicsSettings
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UPhysicsSettings : public UObject
{
public:
	float                                              DefaultGravityZ;                                           // 0x0028(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DefaultTerminalVelocity;                                   // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              DefaultFluidFriction;                                      // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bEnableAsyncScene;                                         // 0x0034(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bEnable2DPhysics;                                          // 0x0035(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESettingsLockedAxis>            LockedAxis;                                                // 0x0036(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EFrictionCombineMode>           FrictionCombineMode;                                       // 0x0037(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MaxDepenetrationVelocity;                                  // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              MaxPhysicsDeltaTime;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bSubstepping;                                              // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FPFH[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSubstepDeltaTime;                                       // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                MaxSubsteps;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              Server_MaxSubstepDeltaTime;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	int                                                Server_MaxSubsteps;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	float                                              SyncSceneSmoothingFactor;                                  // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              AsyncSceneSmoothingFactor;                                 // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              InitialAverageFrameRate;                                   // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                          // 0x0060(0x0010) (ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsSettings");
		return ptr;
	}



};

// Class Engine.PhysicalMaterial
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                  // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EFrictionCombineMode>           FrictionCombineMode;                                       // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOverrideFrictionCombineMode;                              // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5QV0[0x2];                                     // 0x002E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Restitution;                                               // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Density;                                                   // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              RaiseMassToPower;                                          // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DestructibleDamageThresholdScale;                          // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                  // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EPhysicalSurface>               SurfaceType;                                               // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MWNO[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TireFrictionScale;                                         // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FTireFrictionScalePair>              TireFrictionScales;                                        // 0x0050(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_SWAF[0x18];                                    // 0x0060(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}



};

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPhysicalMaterialPropertyBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}



};

// Class Engine.PhysicsAsset
// 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
class UPhysicsAsset : public UObject
{
public:
	TArray<class UBodySetup*>                          BodySetup;                                                 // 0x0028(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<int>                                        BoundsBodies;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                           // 0x0048(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      UnknownData_F0PY[0xA0];                                    // 0x0058(0x00A0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}



};

// Class Engine.PhysicsCollisionHandler
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ImpactReFireDelay;                                         // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                                  DefaultImpactSound;                                        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              LastImpactSoundTime;                                       // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_68J8[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsCollisionHandler");
		return ptr;
	}



};

// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x0028(0x0018) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}



};

// Class Engine.LocalMessage
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULocalMessage : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}



};

// Class Engine.EngineMessage
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                        // 0x0028(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     MaxedOutMessage;                                           // 0x0038(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     EnteredMessage;                                            // 0x0048(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     LeftMessage;                                               // 0x0058(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     GlobalNameChange;                                          // 0x0068(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     SpecEnteredMessage;                                        // 0x0078(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     NewPlayerMessage;                                          // 0x0088(0x0010) (BlueprintReadOnly, ZeroConstructor)
	struct FString                                     NewSpecMessage;                                            // 0x0098(0x0010) (BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EngineMessage");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAbs
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}



};

// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionActorPositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAdd
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConstB;                                                    // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPlatformSwitch
// 0x0658 (FullSize[0x06D0] - InheritedSize[0x0078])
class UMaterialExpressionPlatformSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Inputs[0x1C];                                              // 0x00B0(0x0620) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPlatformSwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPower
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                      // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Exponent;                                                  // 0x00B0(0x0038) (ZeroConstructor)
	float                                              ConstExponent;                                             // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZQVJ[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedNormal");
		return ptr;
	}



};

// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedPosition");
		return ptr;
	}



};

// Class Engine.MaterialExpressionQualitySwitch
// 0x00A8 (FullSize[0x0120] - InheritedSize[0x0078])
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Inputs[0x2];                                               // 0x00B0(0x0070) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		return ptr;
	}



};

// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                         // 0x0078(0x0038) (ZeroConstructor)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                           // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_XH8B[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVectorWS");
		return ptr;
	}



};

// Class Engine.NavigationPath
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UNavigationPath : public UObject
{
public:
	struct FScriptMulticastDelegate                    PathUpdatedNotifier;                                       // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FVector>                             PathPoints;                                                // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<Engine_ENavigationOptionFlag>          RecalculateOnInvalidation;                                 // 0x0048(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4FQF[0x27];                                    // 0x0049(0x0027) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationPath");
		return ptr;
	}



	void OnNavigationPathUpdated__DelegateSignature(class UNavigationPath* AffectedPath, TEnumAsByte<Engine_ENavPathEvent> PathEvent);
	bool IsValid();
	bool IsStringPulled();
	bool IsPartial();
	float GetPathLength();
	float GetPathCost();
	struct FString GetDebugString();
	void EnableRecalculationOnInvalidation(TEnumAsByte<Engine_ENavigationOptionFlag> DoRecalculation);
	void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
};

// Class Engine.NavigationPathGenerator
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavigationPathGenerator : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationPathGenerator");
		return ptr;
	}



};

// Class Engine.RecastFilter_UseDefaultArea
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RecastFilter_UseDefaultArea");
		return ptr;
	}



};

// Class Engine.NavLinkTrivial
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UNavLinkTrivial : public UNavLinkDefinition
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkTrivial");
		return ptr;
	}



};

// Class Engine.NavNodeInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavNodeInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavNodeInterface");
		return ptr;
	}



};

// Class Engine.NetworkSettings
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UNetworkSettings : public UObject
{
public:
	unsigned char                                      bVerifyPeer : 1;                                           // 0x0028(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_RMC5[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetworkSettings");
		return ptr;
	}



};

// Class Engine.NiagaraEffect
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UNiagaraEffect : public UObject
{
public:
	TArray<struct FName>                               Emitters;                                                  // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NiagaraEffect");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAppendVector
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}



};

// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                             // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericFogColor");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            Struct;                                                    // 0x0078(0x0038) (ZeroConstructor)
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x00B0(0x0038) (ZeroConstructor)
	unsigned char                                      UnknownData_PB0S[0x8];                                     // 0x00E8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBreakMaterialAttributes");
		return ptr;
	}



};

// Class Engine.MaterialExpressionBumpOffset
// 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Height;                                                    // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            HeightRatioInput;                                          // 0x00E8(0x0038) (ZeroConstructor)
	float                                              HeightRatio;                                               // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ReferencePlane;                                            // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint32_t                                           ConstCoordinate;                                           // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_741L[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraPositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVectorWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLandscapeLayerSample
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                             // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PreviewWeight;                                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       ExpressionGUID;                                            // 0x0084(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_TRI7[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerSample");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLandscapeVisibilityMask
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
{
public:
	struct FGuid                                       ExpressionGUID;                                            // 0x0078(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeVisibilityMask");
		return ptr;
	}



};

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}



};

// Class Engine.MaterialExpressionNormalize
// 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                               // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectBounds");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectId
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionObjectId : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectId");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectPositionWS");
		return ptr;
	}



};

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}



};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                            // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeBase
// 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
class UParticleModuleSizeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}



};

// Class Engine.ParticleModuleSize
// 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                 // 0x0030(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}



};

// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      MultiplyX : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      MultiplyY : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      MultiplyZ : 1;                                             // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_FR40[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeScale
// 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                 // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      EnableX : 1;                                               // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      EnableY : 1;                                               // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      EnableZ : 1;                                               // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_C1XY[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}



};

// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   MaxScale;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleBySpeed");
		return ptr;
	}



};

// Class Engine.SoundNodeWave
// 0x00A0 (FullSize[0x00D8] - InheritedSize[0x0038])
class USoundNodeWave : public USoundNodeDeprecated
{
public:
	int                                                CompressionQuality;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bLoopingSound : 1;                                         // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_45TN[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0040(0x0010) (Edit, ZeroConstructor)
	float                                              Volume;                                                    // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              Pitch;                                                     // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	float                                              Duration;                                                  // 0x0058(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                NumChannels;                                               // 0x005C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                SampleRate;                                                // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable)
	int                                                RawPCMDataSize;                                            // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FSubtitleCue>                        Subtitles;                                                 // 0x0068(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bMature : 1;                                               // 0x0078(0x0001) BIT_FIELD (Edit, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bManualWordWrap : 1;                                       // 0x0078(0x0001) BIT_FIELD (Edit, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bSingleLine : 1;                                           // 0x0078(0x0001) BIT_FIELD (Edit, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_CQVS[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                        // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_ZQH7[0x48];                                    // 0x0090(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeWave");
		return ptr;
	}



};

// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       ParameterName;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGuid                                       ParameterId;                                               // 0x0088(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCollectionParameter");
		return ptr;
	}



};

// Class Engine.ParticleModuleAcceleration
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                              // 0x0038(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5OLP[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}



};

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                             // 0x0038(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationDirect
// 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                  // 0x0030(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      LocationOffset;                                            // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      ScaleFactor;                                               // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      Direction;                                                 // 0x00D8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ELocationEmitterSelectionMethod> SelectionMethod;                                           // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LQH1[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      InheritSourceVelocity : 1;                                 // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_W3FJ[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceVelocityScale;                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bInheritSourceRotation : 1;                                // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_9GJD[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceRotationScale;                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QG6T[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}



};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x00E0(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		return ptr;
	}



};

// Class Engine.ParticleModulePivotOffset
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModulePivotOffset");
		return ptr;
	}



};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
